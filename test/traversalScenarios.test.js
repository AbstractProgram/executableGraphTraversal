"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _path = _interopRequireDefault(require("path"));




var Graph = _interopRequireWildcard(require("../source/constructable/Graph"));
var Traversal = _interopRequireWildcard(require("../source/constructable/Traversal.class.js"));
var Database = _interopRequireWildcard(require("../source/constructable/Database.class.js"));
var Context = _interopRequireWildcard(require("../source/constructable/Context.class.js"));
var schemeReference = _interopRequireWildcard(require("../source/dataModel/graphSchemeReference.js"));
var implementation = _interopRequireWildcard(require("@dependency/graphTraversal-implementation"));
var _graph = _interopRequireDefault(require("./asset/graph.json"));process.env['SZN_DEBUG'] = true;const boltProtocolDriver = require('neo4j-driver').v1;
const fixture = { traversalResult: ['dataItem-key-1'] };

async function clearGraphData() {

  const url = { protocol: 'bolt', hostname: 'localhost', port: 7687 },
  authentication = { username: 'neo4j', password: 'test' };
  const graphDBDriver = boltProtocolDriver.driver(`${url.protocol}://${url.hostname}:${url.port}`, boltProtocolDriver.auth.basic(authentication.username, authentication.password));
  let session = await graphDBDriver.session();
  let result = await session.run(`match (n) detach delete n`);
  session.close();
}

let concreteDatabaseBehavior = new Database.clientInterface({
  implementationList: {
    redisModelAdapterFunction: implementation.database.redisModelAdapterFunction(),
    simpleMemoryModelAdapter: implementation.database.simpleMemoryModelAdapterFunction(),
    boltCypher: implementation.database.boltCypherModelAdapterFunction({ schemeReference }) },

  defaultImplementation: 'boltCypher' });


let concreteGraphTraversalBehavior = new Traversal.clientInterface({
  implementationList: {
    default: {
      portNode: implementation.traversal.portNode,
      traversalInterception: implementation.traversal.traversalInterception,
      aggregator: implementation.traversal.aggregator,
      processNode: implementation.traversal.processNode } },


  defaultImplementation: 'default' });


let contextInstance = new Context.clientInterface({
  implementationKey: {
    processNode: 'returnDataItemKey',
    portNode: 'propagationControl',
    aggregator: 'AggregatorArray',
    traversalInterception: 'processThenTraverse' } });



let configuredGraph = Graph.clientInterface({
  parameter: [
  {
    database: concreteDatabaseBehavior,
    traversal: concreteGraphTraversalBehavior,
    concreteBehaviorList: [contextInstance],
    data: {} }] });




suite('Graph traversal scenarios - Traversing graphs with different implementations', () => {
  setup(async () => await clearGraphData());

  suite('Reroute node with Extend, Insert, Reference edges:', () => {
    const fixture = ['referencedTarget-0', 'insert-before', 'dataItem-1', 'insert-after'];
    let graph = new configuredGraph.clientInterface({});
    test('Should traverse graph successfully', async () => {
      await graph.load({ graphData: _graph.default });
      let result = await graph.traverse({ nodeKey: '968f644a-ac89-11e9-a2a3-2a2ae2dbcce4', implementationKey: {} });
      _chai.assert.deepEqual(result, fixture);
    });
  });

  suite('Configure edge with Configuration node - evaluation & traversal implementations', () => {
    const fixture = ['include-0', 'include-1', 'include-2'];
    let graph = new configuredGraph.clientInterface({});
    test('Should traverse graph successfully', async () => {
      await graph.load({ graphData: _graph.default });
      let result = await graph.traverse({ nodeKey: '9160338f-6990-4957-9506-deebafdb6e29', implementationKey: { processNode: 'returnDataItemKey' } });
      _chai.assert.deepEqual(result, fixture);
    });
  });

  suite('Fork edge & Port node - propgation implementations: parallel, chronological, etc.', () => {

    const fixture = ['dataItem-0', 'parallel-1', 'parallel-2', 'parallel-3', 'parallel-4', 'chronological-1', 'chronological-2', 'chronological-3', 'race-firstSetteled'];
    let graph = new configuredGraph.clientInterface({});
    test('Should traverse graph successfully ', async () => {
      await graph.load({ graphData: _graph.default });
      let result = await graph.traverse({ nodeKey: '5ab7f475-f5a1-4a23-bd9d-161e26e1aef6', implementationKey: {} });
      _chai.assert.deepEqual(result, fixture);
    });
  });

  suite('Execute edge with Process node & reference context.', () => {
    const fixture = [];
    contextInstance[Context.$.key.setter]({

      fileContext: { shellscript: _path.default.join(__dirname, './asset/shellscript.sh') } });

    let graph = new configuredGraph.clientInterface({});
    test('Should traverse graph successfully - during which a shell script executed', async () => {
      await graph.load({ graphData: _graph.default });
      let result = await graph.traverse({ nodeKey: '28a486af-1c27-4183-8953-c40742a68ab0', implementationKey: {} });
      _chai.assert.deepEqual(result, fixture);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,