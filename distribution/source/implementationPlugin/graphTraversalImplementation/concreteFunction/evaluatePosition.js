"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.evaluateCondition = evaluateCondition;var _graphSchemeReference = require("../../../graphSchemeReference.js");
var _assert = _interopRequireDefault(require("assert"));
var _EvaluatorClass = require("../../../constructable/Evaluator.class.js");

async function evaluateCondition({ evaluation, node, graphInstance }) {
  let configureRelationshipArray = await graphInstance.database.getNodeConnection({ direction: 'incoming', nodeID: node.identity, connectionType: _graphSchemeReference.connectionType.configure });

  for (let configureRelationship of configureRelationshipArray) {
    let configureNode = configureRelationship.destination;


    let nodeEvaluationConfig = {};
    if (configureNode.labels.includes(_graphSchemeReference.nodeLabel.configuration)) {
      nodeEvaluationConfig = extractEvaluationConfigProperty(configureNode.properties);
    } else if (configureNode.labels.includes(_graphSchemeReference.nodeLabel.evaluation)) {
      nodeEvaluationConfig = await checkEvaluationNode({ evaluationNode: configureNode, graphInstance });
    } else throw new Error(`• "${configureNode.labels}" Unsupported node type for a NEXT connection.`);

    Object.assign(evaluation, nodeEvaluationConfig);
  }
}

async function checkEvaluationNode({ evaluationNode, graphInstance }) {
  let caseRelationshipArray = await graphInstance.database.getNodeConnection({ direction: 'outgoing', nodeID: evaluationNode.identity, connectionType: _graphSchemeReference.connectionType.case });
  let defaultRelationshipArray = await graphInstance.database.getNodeConnection({ direction: 'outgoing', nodeID: evaluationNode.identity, connectionType: _graphSchemeReference.connectionType.default });
  let executeRelationshipArray = await graphInstance.database.getNodeConnection({ direction: 'outgoing', nodeID: evaluationNode.identity, connectionType: _graphSchemeReference.connectionType.execute });


  let checkResult;
  if (executeRelationshipArray.length > 0) {
    let executeNode = executeRelationshipArray[0].destination;


    checkResult = undefined;
  } else {var _evaluationNode$prope;
    checkResult = ((_evaluationNode$prope = evaluationNode.properties) === null || _evaluationNode$prope === void 0 ? void 0 : _evaluationNode$prope.switchValue) || undefined;
  }
  caseRelationshipArray = caseRelationshipArray.filter(caseRelationship => {var _caseRelationship$con;return ((_caseRelationship$con = caseRelationship.connection.properties) === null || _caseRelationship$con === void 0 ? void 0 : _caseRelationship$con.expected) == checkResult;});


  if (caseRelationshipArray.length > 0) {
    let caseNode = caseRelationshipArray[0].destination;
    (0, _assert.default)(caseNode.labels.includes(_graphSchemeReference.nodeLabel.configuration), `• "${caseNode.labels}" Unsupported node type for a NEXT connection.`);
    return extractEvaluationConfigProperty(caseNode.properties);
  } else {
    let defaultNode = defaultRelationshipArray[0].destination;
    (0, _assert.default)(defaultNode.labels.includes(_graphSchemeReference.nodeLabel.configuration), `• "${defaultNode.labels}" Unsupported node type for a NEXT connection.`);
    return extractEvaluationConfigProperty(defaultNode.properties);
  }
}

function extractEvaluationConfigProperty(propertyObject) {
  return Object.entries(propertyObject).reduce((accumulator, [key, value]) => {
    if (Object.keys(_EvaluatorClass.evaluationOption).includes(key)) accumulator[key] = value;
    return accumulator;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,