"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.EvaluatorFunction = exports.evaluationOption = void 0;const evaluationOption = {
  propagation: {
    continue: 'continue',
    break: 'break',
    hult: 'hult' },

  aggregation: {
    include: 'process&include',
    exclude: 'process&exclude',
    skip: 'skipProcess' } };exports.evaluationOption = evaluationOption;






const EvaluatorFunction = (defaultParameter = {}) =>
class Evaluator {
  constructor({ propagation = defaultParameter.propagation, aggregation = defaultParameter.aggregation } = {}) {
    this.propagation = propagation;
    this.aggregation = aggregation;
  }
  shouldContinue() {
    switch (this.propagation) {
      case evaluationOption.propagation.continue:
        return true;
        break;
      case evaluationOption.propagation.break:
      case evaluationOption.propagation.hult:
        return false;
        break;
      default:
        throw new Error(`• Unknown option for 'evaluator.propagation' = ${this.propagation}.`);
        break;}

  }
  shouldIncludeResult() {
    switch (this.aggregation) {
      case evaluationOption.aggregation.include:
        return true;
        break;
      case evaluationOption.aggregation.exclude:
      case evaluationOption.aggregation.skip:
        return false;
        break;
      default:
        throw new Error(`• Unknown option for 'evaluator.aggregation' = ${this.aggregation}.`);
        break;}

  }
  shouldExecuteProcess() {
    switch (this.aggregation) {
      case evaluationOption.aggregation.include:
      case evaluationOption.aggregation.exclude:
        return true;
        break;
      case evaluationOption.aggregation.skip:
        return false;
        break;
      default:
        throw new Error(`• Unknown option for 'evaluator.aggregation' = ${this.aggregation}.`);
        break;}

  }};exports.EvaluatorFunction = EvaluatorFunction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0V2YWx1YXRvci5jbGFzcy5qcyJdLCJuYW1lcyI6WyJldmFsdWF0aW9uT3B0aW9uIiwicHJvcGFnYXRpb24iLCJjb250aW51ZSIsImJyZWFrIiwiaHVsdCIsImFnZ3JlZ2F0aW9uIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJza2lwIiwiRXZhbHVhdG9yRnVuY3Rpb24iLCJkZWZhdWx0UGFyYW1ldGVyIiwiRXZhbHVhdG9yIiwiY29uc3RydWN0b3IiLCJzaG91bGRDb250aW51ZSIsIkVycm9yIiwic2hvdWxkSW5jbHVkZVJlc3VsdCIsInNob3VsZEV4ZWN1dGVQcm9jZXNzIl0sIm1hcHBpbmdzIjoieUlBQU8sTUFBTUEsZ0JBQWdCLEdBQUc7QUFDOUJDLEVBQUFBLFdBQVcsRUFBRTtBQUNYQyxJQUFBQSxRQUFRLEVBQUUsVUFEQztBQUVYQyxJQUFBQSxLQUFLLEVBQUUsT0FGSTtBQUdYQyxJQUFBQSxJQUFJLEVBQUUsTUFISyxFQURpQjs7QUFNOUJDLEVBQUFBLFdBQVcsRUFBRTtBQUNYQyxJQUFBQSxPQUFPLEVBQUUsaUJBREU7QUFFWEMsSUFBQUEsT0FBTyxFQUFFLGlCQUZFO0FBR1hDLElBQUFBLElBQUksRUFBRSxhQUhLLEVBTmlCLEVBQXpCLEM7Ozs7Ozs7QUFnQkEsTUFBTUMsaUJBQWlCLEdBQUcsQ0FBQ0MsZ0JBQWdCLEdBQUcsRUFBcEI7QUFDL0IsTUFBTUMsU0FBTixDQUFnQjtBQUNkQyxFQUFBQSxXQUFXLENBQUMsRUFBRVgsV0FBVyxHQUFHUyxnQkFBZ0IsQ0FBQ1QsV0FBakMsRUFBOENJLFdBQVcsR0FBR0ssZ0JBQWdCLENBQUNMLFdBQTdFLEtBQTZGLEVBQTlGLEVBQWtHO0FBQzNHLFNBQUtKLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0EsU0FBS0ksV0FBTCxHQUFtQkEsV0FBbkI7QUFDRDtBQUNEUSxFQUFBQSxjQUFjLEdBQUc7QUFDZixZQUFRLEtBQUtaLFdBQWI7QUFDRSxXQUFLRCxnQkFBZ0IsQ0FBQ0MsV0FBakIsQ0FBNkJDLFFBQWxDO0FBQ0UsZUFBTyxJQUFQO0FBQ0E7QUFDRixXQUFLRixnQkFBZ0IsQ0FBQ0MsV0FBakIsQ0FBNkJFLEtBQWxDO0FBQ0EsV0FBS0gsZ0JBQWdCLENBQUNDLFdBQWpCLENBQTZCRyxJQUFsQztBQUNFLGVBQU8sS0FBUDtBQUNBO0FBQ0Y7QUFDRSxjQUFNLElBQUlVLEtBQUosQ0FBVyxrREFBaUQsS0FBS2IsV0FBWSxHQUE3RSxDQUFOO0FBQ0EsY0FWSjs7QUFZRDtBQUNEYyxFQUFBQSxtQkFBbUIsR0FBRztBQUNwQixZQUFRLEtBQUtWLFdBQWI7QUFDRSxXQUFLTCxnQkFBZ0IsQ0FBQ0ssV0FBakIsQ0FBNkJDLE9BQWxDO0FBQ0UsZUFBTyxJQUFQO0FBQ0E7QUFDRixXQUFLTixnQkFBZ0IsQ0FBQ0ssV0FBakIsQ0FBNkJFLE9BQWxDO0FBQ0EsV0FBS1AsZ0JBQWdCLENBQUNLLFdBQWpCLENBQTZCRyxJQUFsQztBQUNFLGVBQU8sS0FBUDtBQUNBO0FBQ0Y7QUFDRSxjQUFNLElBQUlNLEtBQUosQ0FBVyxrREFBaUQsS0FBS1QsV0FBWSxHQUE3RSxDQUFOO0FBQ0EsY0FWSjs7QUFZRDtBQUNEVyxFQUFBQSxvQkFBb0IsR0FBRztBQUNyQixZQUFRLEtBQUtYLFdBQWI7QUFDRSxXQUFLTCxnQkFBZ0IsQ0FBQ0ssV0FBakIsQ0FBNkJDLE9BQWxDO0FBQ0EsV0FBS04sZ0JBQWdCLENBQUNLLFdBQWpCLENBQTZCRSxPQUFsQztBQUNFLGVBQU8sSUFBUDtBQUNBO0FBQ0YsV0FBS1AsZ0JBQWdCLENBQUNLLFdBQWpCLENBQTZCRyxJQUFsQztBQUNFLGVBQU8sS0FBUDtBQUNBO0FBQ0Y7QUFDRSxjQUFNLElBQUlNLEtBQUosQ0FBVyxrREFBaUQsS0FBS1QsV0FBWSxHQUE3RSxDQUFOO0FBQ0EsY0FWSjs7QUFZRCxHQTlDYSxDQURYLEMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZXZhbHVhdGlvbk9wdGlvbiA9IHtcbiAgcHJvcGFnYXRpb246IHtcbiAgICBjb250aW51ZTogJ2NvbnRpbnVlJyxcbiAgICBicmVhazogJ2JyZWFrJyxcbiAgICBodWx0OiAnaHVsdCcsXG4gIH0sXG4gIGFnZ3JlZ2F0aW9uOiB7XG4gICAgaW5jbHVkZTogJ3Byb2Nlc3MmaW5jbHVkZScsXG4gICAgZXhjbHVkZTogJ3Byb2Nlc3MmZXhjbHVkZScsXG4gICAgc2tpcDogJ3NraXBQcm9jZXNzJyxcbiAgfSxcbn1cblxuLyoqXG4gKiBSZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgZXZhbHVhdG9yIGNvbmZpZ3VyYXRpb24gZm9yIGVhY2ggdHJhdmVyc2VyIGFuZCBkZWNpZGluZyB3aGV0aGVyIHRyYXZlcnNhbCBhbmQgYWN0aW9ucyBzaG91bGQgYmUgcGVyZm9ybWVkIG9uIGVhY2ggcG9zaXRpb24gYWNjb3JkaW5nbHkuXG4gKi9cbmV4cG9ydCBjb25zdCBFdmFsdWF0b3JGdW5jdGlvbiA9IChkZWZhdWx0UGFyYW1ldGVyID0ge30pID0+XG4gIGNsYXNzIEV2YWx1YXRvciB7XG4gICAgY29uc3RydWN0b3IoeyBwcm9wYWdhdGlvbiA9IGRlZmF1bHRQYXJhbWV0ZXIucHJvcGFnYXRpb24sIGFnZ3JlZ2F0aW9uID0gZGVmYXVsdFBhcmFtZXRlci5hZ2dyZWdhdGlvbiB9ID0ge30pIHtcbiAgICAgIHRoaXMucHJvcGFnYXRpb24gPSBwcm9wYWdhdGlvblxuICAgICAgdGhpcy5hZ2dyZWdhdGlvbiA9IGFnZ3JlZ2F0aW9uXG4gICAgfVxuICAgIHNob3VsZENvbnRpbnVlKCkge1xuICAgICAgc3dpdGNoICh0aGlzLnByb3BhZ2F0aW9uKSB7XG4gICAgICAgIGNhc2UgZXZhbHVhdGlvbk9wdGlvbi5wcm9wYWdhdGlvbi5jb250aW51ZTpcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgZXZhbHVhdGlvbk9wdGlvbi5wcm9wYWdhdGlvbi5icmVhazpcbiAgICAgICAgY2FzZSBldmFsdWF0aW9uT3B0aW9uLnByb3BhZ2F0aW9uLmh1bHQ6XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOKAoiBVbmtub3duIG9wdGlvbiBmb3IgJ2V2YWx1YXRvci5wcm9wYWdhdGlvbicgPSAke3RoaXMucHJvcGFnYXRpb259LmApXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgc2hvdWxkSW5jbHVkZVJlc3VsdCgpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5hZ2dyZWdhdGlvbikge1xuICAgICAgICBjYXNlIGV2YWx1YXRpb25PcHRpb24uYWdncmVnYXRpb24uaW5jbHVkZTpcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgZXZhbHVhdGlvbk9wdGlvbi5hZ2dyZWdhdGlvbi5leGNsdWRlOlxuICAgICAgICBjYXNlIGV2YWx1YXRpb25PcHRpb24uYWdncmVnYXRpb24uc2tpcDpcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg4oCiIFVua25vd24gb3B0aW9uIGZvciAnZXZhbHVhdG9yLmFnZ3JlZ2F0aW9uJyA9ICR7dGhpcy5hZ2dyZWdhdGlvbn0uYClcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICBzaG91bGRFeGVjdXRlUHJvY2VzcygpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5hZ2dyZWdhdGlvbikge1xuICAgICAgICBjYXNlIGV2YWx1YXRpb25PcHRpb24uYWdncmVnYXRpb24uaW5jbHVkZTpcbiAgICAgICAgY2FzZSBldmFsdWF0aW9uT3B0aW9uLmFnZ3JlZ2F0aW9uLmV4Y2x1ZGU6XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIGV2YWx1YXRpb25PcHRpb24uYWdncmVnYXRpb24uc2tpcDpcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg4oCiIFVua25vd24gb3B0aW9uIGZvciAnZXZhbHVhdG9yLmFnZ3JlZ2F0aW9uJyA9ICR7dGhpcy5hZ2dyZWdhdGlvbn0uYClcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuIl19