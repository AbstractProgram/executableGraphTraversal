"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validate = validate;
exports.required = required;
exports.optional = optional;
exports.Inject = Inject;
exports.Factory = Factory;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

function validate(target, property, descriptor) {
  var fn = descriptor.value;

  descriptor.value = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var req_metadata = "meta_req_".concat(property);
    (target[req_metadata] || []).forEach(function (metadata) {
      if (args[metadata.index] === undefined) {
        throw new Error("".concat(metadata.key, " is required"));
      }
    });
    var opt_metadata = "meta_opt_".concat(property);
    (target[opt_metadata] || []).forEach(function (metadata) {
      if (args[metadata.index] === undefined) {
        console.warn("The ".concat(metadata.index + 1, "(th) optional argument is missing of method ").concat(fn.name));
      }
    });
    return fn.apply(this, args);
  };

  return descriptor;
}

function required(key) {
  return function (target, propertyKey, parameterIndex) {
    var metadata = "meta_req_".concat(propertyKey);
    target[metadata] = [].concat((0, _toConsumableArray2.default)(target[metadata] || []), [{
      index: parameterIndex,
      key: key
    }]);
  };
}

function optional(target, propertyKey, parameterIndex) {
  var metadata = "meta_opt_".concat(propertyKey);
  target[metadata] = [].concat((0, _toConsumableArray2.default)(target[metadata] || []), [{
    index: parameterIndex
  }]);
}

function Inject(Clazz) {
  return function (target, unusedKey, parameterIndex) {
    var metadata = "meta_ctr_inject";
    target[metadata] = target[metadata] || [];
    target[metadata][parameterIndex] = Clazz;
    return target;
  };
}

function Factory(target) {
  var metadata = "meta_ctr_inject";
  return (
    /*#__PURE__*/
    function (_target) {
      (0, _inherits2.default)(_class, _target);

      function _class() {
        var _getPrototypeOf2;

        (0, _classCallCheck2.default)(this, _class);
        var metaInject = target[metadata] || [];

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        for (var i = 0; i < metaInject.length; i++) {
          var Clazz = metaInject[i];

          if (Clazz && args[i] === null) {
            args[i] = Reflect.construct(Clazz, []);
          }
        }

        return (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_class)).call.apply(_getPrototypeOf2, [this].concat(args)));
      }

      return _class;
    }(target)
  );
}