"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.isSelfEdge = isSelfEdge;exports.getResource = getResource;exports.getValue = getValue;exports.getExecution = getExecution;exports.getFork = getFork;exports.getNext = getNext;exports.getConfigure = getConfigure;exports.getCase = getCase;exports.getDefault = getDefault;exports.getReference = getReference;exports.getExtend = getExtend;exports.getInsert = getInsert;exports.getRerouteTraverseReferenceElement = getRerouteTraverseReferenceElement;exports.getReferenceResolutionElement = getReferenceResolutionElement;exports.getSwitchElement = getSwitchElement;exports.getValueElement = getValueElement;

var _assert = _interopRequireDefault(require("assert"));
var schemeReference = _interopRequireWildcard(require("../dataModel/graphSchemeReference.js"));

function isSelfEdge(edge) {
  return edge.source.identity == edge.destination.identity;
}

async function getResource({ concreteDatabase, nodeID }) {
  let resourceArray = await concreteDatabase.getNodeConnection({ direction: 'incoming', nodeID, connectionType: schemeReference.connectionType.resource });
  (0, _assert.default)(
  resourceArray.every(n => schemeReference.connectionProperty.context.includes(n.connection.properties.context)),
  `• Unsupported property value for a RESOURCE connection.`);

  return { resourceArray };
}

async function getValue({ concreteDatabase, nodeID }) {
  let valueArray = await concreteDatabase.getNodeConnection({ direction: 'incoming', nodeID, connectionType: schemeReference.connectionType.value });
  (0, _assert.default)(
  valueArray.every(n => schemeReference.connectionProperty.type.includes(n.connection.properties.type)),
  `• Unsupported "type" property value for a VALUE connection.`);

  return { valueArray: valueArray };
}

async function getExecution({ concreteDatabase, nodeID }) {
  let executeArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID, connectionType: schemeReference.connectionType.execute });
  (0, _assert.default)(
  executeArray.every(n => n.destination.labels.includes(schemeReference.nodeLabel.process)),
  `• Unsupported node type for a EXECUTE connection.`);

  return { executeArray };
}

async function getFork({ concreteDatabase, nodeID }) {
  let forkArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID: nodeID, connectionType: schemeReference.connectionType.fork });
  (0, _assert.default)(
  forkArray.every(n => n.destination.labels.includes(schemeReference.nodeLabel.port)),
  `• Unsupported property value for a FORK connection.`);

  return { forkArray };
}

async function getNext({ concreteDatabase, nodeID }) {
  let nextArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID: nodeID, connectionType: schemeReference.connectionType.next });
  (0, _assert.default)(
  nextArray.every(n => n.destination.labels.includes(schemeReference.nodeLabel.stage) || n.destination.labels.includes(schemeReference.nodeLabel.reroute)),
  `• Unsupported property value for a NEXT connection.`);

  return { nextArray };
}

async function getConfigure({ concreteDatabase, nodeID }) {
  let configureArray = await concreteDatabase.getNodeConnection({ direction: 'incoming', nodeID: nodeID, connectionType: schemeReference.connectionType.configure });
  (0, _assert.default)(
  configureArray.every(n => n.source.labels.includes(schemeReference.nodeLabel.configuration) || n.source.labels.includes(schemeReference.nodeLabel.reroute)),
  `• Unsupported node type for a CONFIGURE connection.`);

  (0, _assert.default)(
  configureArray.every(n => n.connection.properties.setting),
  `• Missing "setting" property on a CONFIGURE connection.`);


  return { configureArray };
}

async function getCase({ concreteDatabase, nodeID }) {
  let caseArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID, connectionType: schemeReference.connectionType.case });

  return { caseArray };
}

async function getDefault({ concreteDatabase, nodeID }) {
  let defaultArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID, connectionType: schemeReference.connectionType.default });

  return { defaultArray };
}

async function getReference({ concreteDatabase, nodeID }) {
  let referenceArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID: nodeID, connectionType: schemeReference.connectionType.reference });
  (0, _assert.default)(
  referenceArray.every(n => n.destination.labels.includes(schemeReference.nodeLabel.stage) || n.destination.labels.includes(schemeReference.nodeLabel.reroute)),
  `• Unsupported node type for a ${schemeReference.connectionType.reference} connection.`);

  return { referenceArray };
}

async function getExtend({ concreteDatabase, nodeID }) {
  let extendArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID: nodeID, connectionType: schemeReference.connectionType.extend });
  (0, _assert.default)(
  extendArray.every(n => n.destination.labels.includes(schemeReference.nodeLabel.reroute)),
  `• Unsupported node type for a EXTEND connection.`);

  return { extendArray };
}

async function getInsert({ concreteDatabase, nodeID }) {
  let insertArray = await concreteDatabase.getNodeConnection({ direction: 'incoming', nodeID: nodeID, connectionType: schemeReference.connectionType.insert });
  (0, _assert.default)(
  insertArray.every(n => n.source.labels.includes(schemeReference.nodeLabel.stage)),
  `• Unsupported node type for a INSERT connection.`);

  return { insertArray };
}










async function getRerouteTraverseReferenceElement({ concreteDatabase, nodeID }) {
  const { extendArray } = await getExtend({ concreteDatabase, nodeID });
  const { insertArray } = await getInsert({ concreteDatabase, nodeID });

  if (extendArray.length > 1) throw new Error(`• Multiple extend relationships are not supported for Reroute node.`);

  return { extend: extendArray.length > 0 ? extendArray[0] : null, insertArray };
}

async function getReferenceResolutionElement({ concreteDatabase, nodeID }) {
  const { referenceArray } = await getReference({ concreteDatabase, nodeID });

  if (referenceArray.length > 1) throw new Error(`• Multiple reference relationships are not supported for Reroute node.`);

  return { reference: referenceArray.length > 0 ? referenceArray[0] : null };
}

async function getSwitchElement({ concreteDatabase, nodeID }) {
  const { caseArray } = await getCase({ concreteDatabase, nodeID });
  const { defaultArray } = await getDefault({ concreteDatabase, nodeID });

  if (defaultArray.length > 1) throw new Error(`• Multiple default relationships are not supported for Switch node.`);

  return { caseArray: caseArray.length > 0 ? caseArray : null, default: defaultArray.length > 0 ? defaultArray[0] : null };
}


async function getValueElement({ concreteDatabase, nodeID }) {

  let value;
  const { valueArray } = await getValue({ concreteDatabase, nodeID });
  if (valueArray.length > 1) throw new Error(`• Multiple VALUE relationships are not supported for Process node.`);else
  if (valueArray.length != 0 && valueArray[0]) return valueArray[0];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,