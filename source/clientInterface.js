"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.Graph = exports.GraphControllerConfiguration = void 0;var _assert = _interopRequireDefault(require("assert"));
var _linkConstructor = require("./prototypeChain/linkConstructor.js");

var _proxyUtility = require("@dependency/commonPattern/source/proxyUtility.js");
var _shallowObjectMerge = require("./utility/shallowObjectMerge.js");
var _entity = require("@dependency/entity");var _ref, _ref2, _GraphControllerConfi;


const GraphControllerConfiguration = new _entity.Entity.clientInterface({ description: 'GraphControllerConfiguration', instanceType: 'object' });exports.GraphControllerConfiguration = GraphControllerConfiguration;

_ref = GraphControllerConfiguration,

Object.assign(_ref, {

  constructorPrototypeChain: {

    GraphController: null,
    Node: null,
    DataItem: null },

  defaultClientInterfaceInstance: undefined,

  initializeStaticClass(self = this) {

    self.constructorPrototypeChain = (0, _linkConstructor.linkConstructor)({});
    self.defaultClientInterfaceInstance = new self({ constructorPrototypeChain: self.constructorPrototypeChain });
  },




  constructGraphInstance({
    interfaceInstance = GraphControllerConfiguration.defaultClientInterfaceInstance,
    argumentList } =
  {}) {

    let { GraphController, Node, DataItem } = interfaceInstance.constructorPrototypeChain,
    pluginInstance = interfaceInstance.pluginInstance,
    contextInstance = interfaceInstance.contextInstance,
    cacheInstance = interfaceInstance.cacheInstance;





    let graphController = new interfaceProxy({
      additionalDelegatedChain: {
        plugin: pluginInstance,
        context: contextInstance,
        cache: cacheInstance } });










    let graphTraversalResult = graphController.traverseGraph(argumentsList);






    return graphTraversalResult;
  },
  constructor(option = {}) {
    const instance = this,
    self = instance.constructor;
    instance.constructorPrototypeChain = {};
    instance.pluginInstance = {};
    instance.contextInstance = {};
    let { pluginInstance, contextInstance, constructorPrototypeChain } = option;
    if (!constructorPrototypeChain) constructorPrototypeChain = self.constructorPrototypeChain;

    if (constructorPrototypeChain) {

      (0, _assert.default)(constructorPrototypeChain.GraphController, '`constructorPrototypeChain` object must contain `GraphController` property.');
      (0, _assert.default)(constructorPrototypeChain.Node, '`constructorPrototypeChain` object must contain `Node` property.');
      (0, _assert.default)(constructorPrototypeChain.DataItem, '`constructorPrototypeChain` object must contain `DataItem` property.');
    }


    instance.constructorPrototypeChain = constructorPrototypeChain;
    instance.pluginInstance = pluginInstance;
    instance.contextInstance = contextInstance;
    return instance;
  },












  constructor(...args) {

    const instance = this;
    return {
      instance,
      get proxiedInstance() {
        return instance.createInstanceProxy();
      } };

  },

  createNewInstanceWithInitialInstanceValue({ baseInstance, constructorArgumentList }) {
    const self = ClientInterfaceClass;
    let { instance: newInstance, proxiedInstance } = new self(...constructorArgumentList);

    (0, _shallowObjectMerge.shallowMergeNonExistingPropertyOnly)({ baseObject: baseInstance, targetObject: newInstance });
    return proxiedInstance;
  } });


_ref2 = GraphControllerConfiguration.prototype,

Object.assign(_ref2, {
  createInstanceProxy({ instance = this } = {}) {
    const self = instance.constructor;

    let reflectedInstanceTrap = (0, _proxyUtility.createProxyHandlerReflectedToTargetObject)({ target: instance });
    let proxyHandler = Object.assign(reflectedInstanceTrap, {

      apply(target, thisArg, argumentList) {

        let clientInterface = self.createNewInstanceWithInitialInstanceValue({ baseInstance: instance, constructorArgumentList: argumentList });
        return clientInterface;
      },
      construct(target, argumentList, proxiedInterfaceInstance) {
        return self.constructGraphInstance({ argumentList, interfaceInstance: proxiedInterfaceInstance });
      } });

    proxyHandler = (0, _proxyUtility.addRequiredPropertyForConstructorProxy)({ proxyHandler });
    return new Proxy(function () {}, proxyHandler);
  } });


GraphControllerConfiguration.initializeStaticClass();

GraphControllerConfiguration[_entity.Entity.reference.clientInterface.setter.list]({
  clientinterface({ configuredConstructable, self = this, interfaceTarget } = {}) {
    interfaceTarget || (interfaceTarget = self);
    const proxiedTarget = new Proxy(ClientInterfaceClass, {



      apply(target, thisArg, argumentsList) {
        let { proxiedInstance: configuredInterface } = new ClientInterfaceClass(...argumentsList);
        return configuredInterface;












      },




      construct(target, argumentList, proxiedInterfaceClass) {
        return GraphControllerConfiguration.constructGraphInstance({ argumentList });
      } });

    return proxiedTarget;
  } });


const Graph = (_GraphControllerConfi =
GraphControllerConfiguration[_entity.Entity.reference.clientInterface.switch]({ implementationKey: 'clientinterface' }), (
g => {
  g.next('intermittent');
  return g.next({}).

  value;
})(_GraphControllerConfi));exports.Graph = Graph;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,