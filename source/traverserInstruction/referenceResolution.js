"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.resolveReference = resolveReference;exports.selectionReferenceResolution = selectionReferenceResolution;exports.conditionSwitchResolution = conditionSwitchResolution;var _valueResolution = require("./valueResolution.js");
var _concreteDatabaseWrapper = require("../dataModel/concreteDatabaseWrapper.js");


async function resolveReference({ targetNode, graphInstance, traverseCallContext }) {
  const { reference } = await graphInstance.databaseWrapper.getReferenceResolutionElement({ concreteDatabase: graphInstance.database, nodeID: targetNode.identity });
  if (!reference) return;


  if ((0, _concreteDatabaseWrapper.isSelfEdge)(reference)) {

    let labelIndex = reference.destination.labels.indexOf(targetNode.entrypointNodeType);
    reference.destination.labels[labelIndex] += `-ignore`;
  }

  let resolvedNode;
  switch (reference.connection.properties.resolutionImplementation) {
    case 'selection':
      resolvedNode = await selectionReferenceResolution({ graphInstance, targetNode: reference.destination, traverseCallContext });
      break;
    case 'node':
    default:
      resolvedNode = reference.destination;
      break;}


  return resolvedNode;
}




async function selectionReferenceResolution({ graphInstance, targetNode, traverseCallContext }) {
  let resolvedReferenceNode;
  const { selectArray, fallback: fallbackRelationship } = await graphInstance.databaseWrapper.getSelectionElement({ concreteDatabase: graphInstance.database, nodeID: targetNode.identity });
  selectArray.sort((former, latter) => former.connection.properties.order - latter.connection.properties.order);



  let index = 0;
  while (selectArray.length > index && !resolvedReferenceNode) {
    resolvedReferenceNode = await conditionSwitchResolution({ graphInstance, targetNode: selectArray[index].destination, traverseCallContext });
    index++;
  }

  resolvedReferenceNode || (resolvedReferenceNode = fallbackRelationship === null || fallbackRelationship === void 0 ? void 0 : fallbackRelationship.destination);
  return resolvedReferenceNode || null;
}





async function conditionSwitchResolution({ graphInstance, targetNode, traverseCallContext }) {
  let matchingNode;
  const { caseArray } = await graphInstance.databaseWrapper.getConditionSwitchElement({ concreteDatabase: graphInstance.database, nodeID: targetNode.identity });
  let value = await (0, _valueResolution.resolveValue)({ targetNode: targetNode, graphInstance, traverseCallContext });

  if (caseArray) {

    let caseRelationship = caseArray.filter(caseRelationship => {var _caseRelationship$con;return ((_caseRelationship$con = caseRelationship.connection.properties) === null || _caseRelationship$con === void 0 ? void 0 : _caseRelationship$con.expected) == value;})[0];
    matchingNode = caseRelationship === null || caseRelationship === void 0 ? void 0 : caseRelationship.destination;
  }
  return matchingNode || null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,