"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.resolveReference = resolveReference;exports.selectionReferenceResolution = selectionReferenceResolution;exports.conditionSwitchResolution = conditionSwitchResolution;var _concreteDatabaseWrapper = require("../dataModel/concreteDatabaseWrapper.js");

const emptyStageNode = {
  identity: -1,
  labels: ['Stage'],
  properties: {
    key: null } };




async function resolveReference({ targetNode, graph, traverseCallContext }) {
  const { reference } = await graph.databaseWrapper.getReferenceResolutionElement({ concreteDatabase: graph.database, nodeID: targetNode.identity });
  if (!reference) return;


  if ((0, _concreteDatabaseWrapper.isSelfEdge)(reference)) {

    let labelIndex = reference.destination.labels.indexOf(targetNode.entrypointNodeType);
    reference.destination.labels[labelIndex] += `-ignore`;
  }

  let resolvedNode;
  switch (reference.connection.properties.resolutionImplementation) {
    case 'selection':
      resolvedNode = await graph.traverserInstruction.referenceResolution.selectionReferenceResolution({ graph, targetNode: reference.destination, traverseCallContext });
      break;
    case 'node':
    default:
      resolvedNode = reference.destination;
      break;}


  return resolvedNode;
}





async function selectionReferenceResolution({ graph, targetNode, traverseCallContext }) {
  let resolvedReferenceNode;
  const { selectArray, fallback: fallbackRelationship } = await graph.databaseWrapper.getSelectionElement({ concreteDatabase: graph.database, nodeID: targetNode.identity });

  if (selectArray) {
    selectArray.sort(
    (former, latter) => former.connection.properties.order - latter.connection.properties.order || isNaN(former.connection.properties.order) - isNaN(latter.connection.properties.order));




    let index = 0;
    while (selectArray.length > index && !resolvedReferenceNode) {
      resolvedReferenceNode = await graph.traverserInstruction.referenceResolution.conditionSwitchResolution({ graph, targetNode: selectArray[index].destination, traverseCallContext });
      index++;
    }
  }


  resolvedReferenceNode || (resolvedReferenceNode = (fallbackRelationship === null || fallbackRelationship === void 0 ? void 0 : fallbackRelationship.destination) || emptyStageNode);
  return resolvedReferenceNode;
}





async function conditionSwitchResolution({ graph, targetNode, traverseCallContext }) {
  let matchingNode;
  const { caseArray } = await graph.databaseWrapper.getConditionSwitchElement({ concreteDatabase: graph.database, nodeID: targetNode.identity });
  let value = await graph.traverserInstruction.valueResolution.resolveValue({ targetNode: targetNode, graph, traverseCallContext, allowSelfEdge: true });

  if (caseArray) {

    let caseRelationship = caseArray.filter(caseRelationship => {var _caseRelationship$con;return ((_caseRelationship$con = caseRelationship.connection.properties) === null || _caseRelationship$con === void 0 ? void 0 : _caseRelationship$con.expected) == value;})[0];
    matchingNode = caseRelationship === null || caseRelationship === void 0 ? void 0 : caseRelationship.destination;
  }
  return matchingNode || null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,