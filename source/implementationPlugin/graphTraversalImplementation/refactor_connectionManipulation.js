"use strict";
let x = {






  async filterAndOrderChildren({ insertionPointKey, children = this.children }) {
    let ownFilteredChildren = await this.filterAndModifyChildrenArray(children, insertionPointKey, null);
    let additionalFilteredChildren = await this.filterAndModifyChildrenArray(this.additionalChildNestedUnit, insertionPointKey, this.pathPointerKey);
    let merged = await this.mergeAndOrderChildren(ownFilteredChildren, additionalFilteredChildren);
    return merged;
  },






  async filterAndModifyChildrenArray(children, insertionPointKey, pathPointerKey) {
    return children.filter((child, index) => {

      let result = child.insertionPosition.insertionPoint == insertionPointKey && child.insertionPosition.insertionPathPointer == pathPointerKey;

      return result;
    });
  },

  async mergeAndOrderChildren(ownFilteredChildren, additionalFilteredChildren) {



    let firstChildren = [],
    lastChildren = [],
    orderedChildren = [];
    await additionalFilteredChildren.sort((prior, subsequent) => {
      return prior.order <= subsequent.order ? 1 : -1;
    });
    await ownFilteredChildren.sort((prior, subsequent) => {
      return prior.order <= subsequent.order ? 1 : -1;
    });


    additionalFilteredChildren = additionalFilteredChildren.filter((child, index) => {

      if (!child.insertionPosition.placement.pathPointer && child.insertionPosition.placement.type) {
        switch (child.insertionPosition.placement.type) {
          case 'before':
            firstChildren.push(child);
            break;
          case 'after':
          default:
            lastChildren.push(child);
            break;}

        return false;

      }
      return true;
    });


    ownFilteredChildren.map((ownChild, ownChildIndex) => {
      orderedChildren.push(ownChild);
      let currentChildPosition = orderedChildren.length - 1;
      additionalFilteredChildren.map((additionalChild, additionalChildIndex) => {
        if (
        additionalChild.insertionPosition.placement.type &&
        additionalChild.insertionPosition.placement.pathPointer &&
        additionalChild.insertionPosition.placement.pathPointer == ownChild.pathPointerKey)
        {
          switch (additionalChild.insertionPosition.placement.type) {
            case 'before':
              orderedChildren.splice(currentChildPosition, 0, additionalChild);
              break;
            case 'after':
            default:
              orderedChildren.splice(currentChildPosition + 1, 0, additionalChild);
              break;}

        }
      });
    });

    return Array.prototype.concat(firstChildren, orderedChildren, lastChildren);
  },
  async addAdditionalChildNestedUnit({ nestedUnit }) {

    if (nestedUnit.children.length != 0) {
      await Array.prototype.push.apply(nestedUnit.children, nestedUnit.additionalChildNestedUnit);
    } else {
      nestedUnit.children = await nestedUnit.additionalChildNestedUnit.slice();
    }
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,