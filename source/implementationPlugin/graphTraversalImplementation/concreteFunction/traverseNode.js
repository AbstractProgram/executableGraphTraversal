"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.iterateFork = iterateFork;var _graphSchemeReference = require("../../../graphSchemeReference.js");
var _assert = _interopRequireDefault(require("assert"));





async function* iterateFork({ node, additionalChildNode, graphInstance }) {
  let forkArray = await graphInstance.database.getNodeConnection({ direction: 'outgoing', nodeID: node.identity, connectionType: _graphSchemeReference.connectionType.fork });
  if (forkArray.length == 0) return;


  forkArray.sort((former, latter) => former.connection.properties.order - latter.connection.properties.order);

  for (let fork of forkArray) {
    let forkNode = fork.destination;
    (0, _assert.default)(forkNode.labels.includes(_graphSchemeReference.nodeLabel.port), `• "${forkNode.labels}" Unsupported node type for a FORK connection.`);
    let traversalConfig = { handlePropagationImplementation: forkNode.properties.handlePropagationImplementation };
    let nextIterator = yield {
      traversalConfig: traversalConfig,
      forkNode,
      nextIterator: await iterateNext({ node: forkNode, additionalChildNode, graphInstance }) };

  }
}





async function* iterateNext({ node, additionalChildNode, graphInstance } = {}) {
  let nextArray = await graphInstance.database.getNodeConnection({ direction: 'outgoing', nodeID: node.identity, connectionType: _graphSchemeReference.connectionType.next });
  if (nextArray.length == 0) return;


  nextArray.sort((former, latter) => {var _former$connection$pr, _latter$connection$pr;return ((_former$connection$pr = former.connection.properties) === null || _former$connection$pr === void 0 ? void 0 : _former$connection$pr.order) - ((_latter$connection$pr = latter.connection.properties) === null || _latter$connection$pr === void 0 ? void 0 : _latter$connection$pr.order);});

  for (let next of nextArray) {

    let insertAdditional = additionalChildNode.reduce(
    (accumolator, additional, index, array) => {
      if (additional.placement.connectionKey == next.connection.properties.key) {

        accumolator[additional.placement.position].push(additional.node) && delete array[index];
      }
      return accumolator;
    },
    { before: [], after: [] });

    additionalChildNode = additionalChildNode.filter(n => n);


    for (let nextNode of [...insertAdditional.before, next.destination, ...insertAdditional.after]) {
      (0, _assert.default)(nextNode.labels.includes(_graphSchemeReference.nodeLabel.stage) || nextNode.labels.includes(_graphSchemeReference.nodeLabel.subgraphTemplate), `• "${nextNode.labels}" Unsupported node type for a NEXT connection.`);
      yield nextNode;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,