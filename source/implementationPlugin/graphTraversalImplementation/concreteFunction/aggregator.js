"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.ConditionAggregator = exports.ConditionCheck = exports.AggregatorArray = void 0;
class AggregatorArray {

  constructor(initialValue) {
    this.value = initialValue || [];
    return this;
  }

  add(item, aggregator = this) {


    if (item) aggregator.value.push(item);

  }

  merge(additionalAggregatorArray, targetAggregator = this) {
    for (let additionalAggregator of additionalAggregatorArray) {
      targetAggregator.value = [...targetAggregator.value, ...additionalAggregator.value];
    }
    return targetAggregator;
  }}exports.AggregatorArray = AggregatorArray;


class ConditionCheck {

  constructor(initialValue) {
    this.value = initialValue || true;
    return this;
  }}exports.ConditionCheck = ConditionCheck;



class ConditionAggregator {



  constructor(initialValue) {
    this.processResultArray = initialValue || [];
    return this;
  }


  add(item, aggregator = this) {
    aggregator.processResultArray.push(item);
  }


  merge(additionalAggregatorArray, targetAggregator = this, logicalOperator) {
    if (!targetAggregator.calculatedLogicalOperaion) targetAggregator.calculateLogicalOperation(logicalOperator);

    for (let additionalAggregator of additionalAggregatorArray) {
      if (!additionalAggregator.calculatedLogicalOperaion) additionalAggregator.calculateLogicalOperation(logicalOperator);
      targetAggregator.calculatedLogicalOperaion = Boolean(additionalAggregator.calculatedLogicalOperaion) && Boolean(targetAggregator.calculatedLogicalOperaion);
    }
    return targetAggregator;
  }

  calculateLogicalOperation(logicalOperator) {
    switch (logicalOperator) {
      case 'or':
        this.calculatedLogicalOperaion = this.processResultArray.some(item => Boolean(item));
        break;
      case 'and':
      default:
        this.calculatedLogicalOperaion = this.processResultArray.every(item => Boolean(item));
        break;}

  }}exports.ConditionAggregator = ConditionAggregator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9pbXBsZW1lbnRhdGlvblBsdWdpbi9ncmFwaFRyYXZlcnNhbEltcGxlbWVudGF0aW9uL2NvbmNyZXRlRnVuY3Rpb24vYWdncmVnYXRvci5qcyJdLCJuYW1lcyI6WyJBZ2dyZWdhdG9yQXJyYXkiLCJjb25zdHJ1Y3RvciIsImluaXRpYWxWYWx1ZSIsInZhbHVlIiwiYWRkIiwiaXRlbSIsImFnZ3JlZ2F0b3IiLCJwdXNoIiwibWVyZ2UiLCJhZGRpdGlvbmFsQWdncmVnYXRvckFycmF5IiwidGFyZ2V0QWdncmVnYXRvciIsImFkZGl0aW9uYWxBZ2dyZWdhdG9yIiwiQ29uZGl0aW9uQ2hlY2siLCJDb25kaXRpb25BZ2dyZWdhdG9yIiwicHJvY2Vzc1Jlc3VsdEFycmF5IiwibG9naWNhbE9wZXJhdG9yIiwiY2FsY3VsYXRlZExvZ2ljYWxPcGVyYWlvbiIsImNhbGN1bGF0ZUxvZ2ljYWxPcGVyYXRpb24iLCJCb29sZWFuIiwic29tZSIsImV2ZXJ5Il0sIm1hcHBpbmdzIjoiO0FBQ08sTUFBTUEsZUFBTixDQUFzQjs7QUFFM0JDLEVBQUFBLFdBQVcsQ0FBQ0MsWUFBRCxFQUFzQjtBQUMvQixTQUFLQyxLQUFMLEdBQWFELFlBQVksSUFBSSxFQUE3QjtBQUNBLFdBQU8sSUFBUDtBQUNEOztBQUVERSxFQUFBQSxHQUFHLENBQUNDLElBQUQsRUFBT0MsVUFBVSxHQUFHLElBQXBCLEVBQTBCOzs7QUFHM0IsUUFBSUQsSUFBSixFQUFVQyxVQUFVLENBQUNILEtBQVgsQ0FBaUJJLElBQWpCLENBQXNCRixJQUF0Qjs7QUFFWDs7QUFFREcsRUFBQUEsS0FBSyxDQUFDQyx5QkFBRCxFQUEwQ0MsZ0JBQTRCLEdBQUcsSUFBekUsRUFBK0U7QUFDbEYsU0FBSyxJQUFJQyxvQkFBVCxJQUFpQ0YseUJBQWpDLEVBQTREO0FBQzFEQyxNQUFBQSxnQkFBZ0IsQ0FBQ1AsS0FBakIsR0FBeUIsQ0FBQyxHQUFHTyxnQkFBZ0IsQ0FBQ1AsS0FBckIsRUFBNEIsR0FBR1Esb0JBQW9CLENBQUNSLEtBQXBELENBQXpCO0FBQ0Q7QUFDRCxXQUFPTyxnQkFBUDtBQUNELEdBbkIwQixDOzs7QUFzQnRCLE1BQU1FLGNBQU4sQ0FBcUI7O0FBRTFCWCxFQUFBQSxXQUFXLENBQUNDLFlBQUQsRUFBZTtBQUN4QixTQUFLQyxLQUFMLEdBQWFELFlBQVksSUFBSSxJQUE3QjtBQUNBLFdBQU8sSUFBUDtBQUNELEdBTHlCLEM7Ozs7QUFTckIsTUFBTVcsbUJBQU4sQ0FBMEI7Ozs7QUFJL0JaLEVBQUFBLFdBQVcsQ0FBQ0MsWUFBRCxFQUFzQjtBQUMvQixTQUFLWSxrQkFBTCxHQUEwQlosWUFBWSxJQUFJLEVBQTFDO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7OztBQUdERSxFQUFBQSxHQUFHLENBQUNDLElBQUQsRUFBT0MsVUFBVSxHQUFHLElBQXBCLEVBQTBCO0FBQzNCQSxJQUFBQSxVQUFVLENBQUNRLGtCQUFYLENBQThCUCxJQUE5QixDQUFtQ0YsSUFBbkM7QUFDRDs7O0FBR0RHLEVBQUFBLEtBQUssQ0FBQ0MseUJBQUQsRUFBd0NDLGdCQUE0QixHQUFHLElBQXZFLEVBQTZFSyxlQUE3RSxFQUE0RztBQUMvRyxRQUFJLENBQUNMLGdCQUFnQixDQUFDTSx5QkFBdEIsRUFBaUROLGdCQUFnQixDQUFDTyx5QkFBakIsQ0FBMkNGLGVBQTNDOztBQUVqRCxTQUFLLElBQUlKLG9CQUFULElBQWlDRix5QkFBakMsRUFBNEQ7QUFDMUQsVUFBSSxDQUFDRSxvQkFBb0IsQ0FBQ0sseUJBQTFCLEVBQXFETCxvQkFBb0IsQ0FBQ00seUJBQXJCLENBQStDRixlQUEvQztBQUNyREwsTUFBQUEsZ0JBQWdCLENBQUNNLHlCQUFqQixHQUE2Q0UsT0FBTyxDQUFDUCxvQkFBb0IsQ0FBQ0sseUJBQXRCLENBQVAsSUFBMkRFLE9BQU8sQ0FBQ1IsZ0JBQWdCLENBQUNNLHlCQUFsQixDQUEvRztBQUNEO0FBQ0QsV0FBT04sZ0JBQVA7QUFDRDs7QUFFRE8sRUFBQUEseUJBQXlCLENBQUNGLGVBQUQsRUFBa0I7QUFDekMsWUFBUUEsZUFBUjtBQUNFLFdBQUssSUFBTDtBQUNFLGFBQUtDLHlCQUFMLEdBQWlDLEtBQUtGLGtCQUFMLENBQXdCSyxJQUF4QixDQUE2QmQsSUFBSSxJQUFJYSxPQUFPLENBQUNiLElBQUQsQ0FBNUMsQ0FBakM7QUFDQTtBQUNGLFdBQUssS0FBTDtBQUNBO0FBQ0UsYUFBS1cseUJBQUwsR0FBaUMsS0FBS0Ysa0JBQUwsQ0FBd0JNLEtBQXhCLENBQThCZixJQUFJLElBQUlhLE9BQU8sQ0FBQ2IsSUFBRCxDQUE3QyxDQUFqQztBQUNBLGNBUEo7O0FBU0QsR0FuQzhCLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBZ2dyZWdhdGVzIGdyYXBoIHRyYXZlcnNhbCByZXN1bHRzXG5leHBvcnQgY2xhc3MgQWdncmVnYXRvckFycmF5IHtcbiAgdmFsdWU6IEFycmF5XG4gIGNvbnN0cnVjdG9yKGluaXRpYWxWYWx1ZTogQXJyYXkpIHtcbiAgICB0aGlzLnZhbHVlID0gaW5pdGlhbFZhbHVlIHx8IFtdXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICAvLyBhZGQgaXRlbSB0byBhZ2dyZWdhdG9yXG4gIGFkZChpdGVtLCBhZ2dyZWdhdG9yID0gdGhpcykge1xuICAgIC8vIGZpbHRlciBudWxsIGFuZCB1bmRlZmluZWRcbiAgICAvLyBpZiAoIWl0ZW0pIHRocm93IG5ldyBFcnJvcihg4oCiIFJldHVybmVkIHVuZGVmaW5lZCBvciBudWxsIHJlc3VsdCBvZiBkYXRhIHByb2Nlc3NpbmcuYClcbiAgICBpZiAoaXRlbSkgYWdncmVnYXRvci52YWx1ZS5wdXNoKGl0ZW0pXG4gICAgLy8gcmV0dXJuIGFnZ3JlZ2F0b3IudmFsdWUudW5zaGlmdChpdGVtKSAvLyBpbnNlcnQgYXQgc3RhcnRcbiAgfVxuICAvLyBtZXJnZSBhZ2dyZWdhdG9yc1xuICBtZXJnZShhZGRpdGlvbmFsQWdncmVnYXRvckFycmF5OiBbQWdncmVnYXRvcl0sIHRhcmdldEFnZ3JlZ2F0b3I6IEFnZ3JlZ2F0b3IgPSB0aGlzKSB7XG4gICAgZm9yIChsZXQgYWRkaXRpb25hbEFnZ3JlZ2F0b3Igb2YgYWRkaXRpb25hbEFnZ3JlZ2F0b3JBcnJheSkge1xuICAgICAgdGFyZ2V0QWdncmVnYXRvci52YWx1ZSA9IFsuLi50YXJnZXRBZ2dyZWdhdG9yLnZhbHVlLCAuLi5hZGRpdGlvbmFsQWdncmVnYXRvci52YWx1ZV1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldEFnZ3JlZ2F0b3JcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29uZGl0aW9uQ2hlY2sge1xuICB2YWx1ZTogQm9vbGVhblxuICBjb25zdHJ1Y3Rvcihpbml0aWFsVmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gaW5pdGlhbFZhbHVlIHx8IHRydWUgLy8gYXNzdW1lIHRydWUgdGlsbCBjaGVjayBmYWlscy5cbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbi8vIENvbmRpdGlvbnMgYWdncmVnYXRvclxuZXhwb3J0IGNsYXNzIENvbmRpdGlvbkFnZ3JlZ2F0b3Ige1xuICBwcm9jZXNzUmVzdWx0QXJyYXk6IEFycmF5XG4gIGNhbGN1bGF0ZWRMb2dpY2FsT3BlcmFpb246IEJvb2xlYW4gLy8gdGhlIHJlc3VsdCBvZiB0aGUgbG9naWNhbCBvcGVyYXRpb24gb24gdGhlIGFycmF5IHZhbHVlcy5cblxuICBjb25zdHJ1Y3Rvcihpbml0aWFsVmFsdWU6IEFycmF5KSB7XG4gICAgdGhpcy5wcm9jZXNzUmVzdWx0QXJyYXkgPSBpbml0aWFsVmFsdWUgfHwgW11cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gYWRkIGl0ZW0gdG8gYWdncmVnYXRvclxuICBhZGQoaXRlbSwgYWdncmVnYXRvciA9IHRoaXMpIHtcbiAgICBhZ2dyZWdhdG9yLnByb2Nlc3NSZXN1bHRBcnJheS5wdXNoKGl0ZW0pIC8vIGFkZCBpdGVtIHJlZ2FyZGxlc3MgaWYgaXQgaXMgYSB0cnVlIGJvb2xlYW4gb3IgZmFsc2UgYm9vbGVhbiwgYXMgaXQgaXMgbmVlZGVkIHRvIGJlIGNoZWNrZWQgYnkgdGhlIGxvZ2ljYWwgb3BlcmF0b3IuXG4gIH1cblxuICAvLyBtZXJnZSBhZ2dyZWdhdG9yc1xuICBtZXJnZShhZGRpdGlvbmFsQWdncmVnYXRvckFycmF5OiBBZ2dyZWdhdG9yLCB0YXJnZXRBZ2dyZWdhdG9yOiBBZ2dyZWdhdG9yID0gdGhpcywgbG9naWNhbE9wZXJhdG9yOiAnYW5kJyB8ICdvcicpIHtcbiAgICBpZiAoIXRhcmdldEFnZ3JlZ2F0b3IuY2FsY3VsYXRlZExvZ2ljYWxPcGVyYWlvbikgdGFyZ2V0QWdncmVnYXRvci5jYWxjdWxhdGVMb2dpY2FsT3BlcmF0aW9uKGxvZ2ljYWxPcGVyYXRvcilcbiAgICAvLyBUT0RPOiB0ZXN0IGlmIGl0IHdvcmtzIHdpdGggbXVsdGlwbGUgbmVzdGVkIGNvbmRpdGlvbiBzdGF0Z2VzLlxuICAgIGZvciAobGV0IGFkZGl0aW9uYWxBZ2dyZWdhdG9yIG9mIGFkZGl0aW9uYWxBZ2dyZWdhdG9yQXJyYXkpIHtcbiAgICAgIGlmICghYWRkaXRpb25hbEFnZ3JlZ2F0b3IuY2FsY3VsYXRlZExvZ2ljYWxPcGVyYWlvbikgYWRkaXRpb25hbEFnZ3JlZ2F0b3IuY2FsY3VsYXRlTG9naWNhbE9wZXJhdGlvbihsb2dpY2FsT3BlcmF0b3IpXG4gICAgICB0YXJnZXRBZ2dyZWdhdG9yLmNhbGN1bGF0ZWRMb2dpY2FsT3BlcmFpb24gPSBCb29sZWFuKGFkZGl0aW9uYWxBZ2dyZWdhdG9yLmNhbGN1bGF0ZWRMb2dpY2FsT3BlcmFpb24pICYmIEJvb2xlYW4odGFyZ2V0QWdncmVnYXRvci5jYWxjdWxhdGVkTG9naWNhbE9wZXJhaW9uKVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0QWdncmVnYXRvclxuICB9XG5cbiAgY2FsY3VsYXRlTG9naWNhbE9wZXJhdGlvbihsb2dpY2FsT3BlcmF0b3IpIHtcbiAgICBzd2l0Y2ggKGxvZ2ljYWxPcGVyYXRvcikge1xuICAgICAgY2FzZSAnb3InOlxuICAgICAgICB0aGlzLmNhbGN1bGF0ZWRMb2dpY2FsT3BlcmFpb24gPSB0aGlzLnByb2Nlc3NSZXN1bHRBcnJheS5zb21lKGl0ZW0gPT4gQm9vbGVhbihpdGVtKSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2FuZCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLmNhbGN1bGF0ZWRMb2dpY2FsT3BlcmFpb24gPSB0aGlzLnByb2Nlc3NSZXN1bHRBcnJheS5ldmVyeShpdGVtID0+IEJvb2xlYW4oaXRlbSkpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG4iXX0=