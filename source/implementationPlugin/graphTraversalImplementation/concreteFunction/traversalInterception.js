"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.conditionCheck = exports.traverseThenProcess = exports.processThenTraverse = void 0;
const processThenTraverse = ({ dataProcessCallback, targetFunction, aggregator }) => {
  return new Proxy(targetFunction, {
    async apply(target, thisArg, argArray) {
      let { nodeInstance, traversalDepth, eventEmitter } = argArray[0];
      eventEmitter.on('nodeTraversalCompleted', data => {

      });

      let result = await dataProcessCallback(aggregator.value);

      let traversalResultIterator = await Reflect.apply(...arguments);
      for await (let traversalResult of traversalResultIterator) {
        aggregator.merge(traversalResult.result);
      }

      return traversalDepth == 0 ? aggregator.value : aggregator;
    } });

};exports.processThenTraverse = processThenTraverse;


const traverseThenProcess = ({ dataProcessCallback, targetFunction, aggregator }) => {
  return new Proxy(targetFunction, {
    async apply(target, thisArg, argArray) {
      let { nodeInstance, traversalDepth, eventEmitter } = argArray[0];
      eventEmitter.on('nodeTraversalCompleted', data => {

      });

      let traversalResultIterator = await Reflect.apply(...arguments);
      for await (let traversalResult of traversalResultIterator) {
        aggregator.merge(traversalResult.result);
      }

      let result = await dataProcessCallback(aggregator.value);

      return traversalDepth == 0 ? aggregator.value : aggregator;
    } });

};exports.traverseThenProcess = traverseThenProcess;

const conditionCheck = ({ dataProcessCallback, targetFunction, aggregator }) => {

  async function checkCondition(nodeInstance) {


    if (!this.conditionResult) {
      let expectedReturn = this.expectedReturn;
      let filePath = this.file.filePath;
      let returnedValue = await require(filePath).default(this.portAppInstance);
      if (process.env.SZN_DEBUG == 'true' && this.portAppInstance.context.headers.debug == 'true')
      console.log(`ðŸ”€ Comparing conditionKey: ${this.key} ${filePath}. \n â€¢ expected: ${expectedReturn} == ${returnedValue}. \n â€¢ compare result: ${returnedValue == expectedReturn} \n \n`);
      this.conditionResult = returnedValue == expectedReturn ? true : false;
    }
    return this.conditionResult;
  }
  return new Proxy(targetFunction, {
    async apply(target, thisArg, argArray) {
      let { nodeInstance, traversalDepth, eventEmitter } = argArray[0];

      let conditionMet;
      conditionMet = true;

      if (conditionMet) {









        await dataProcessCallback(aggregator.value);











        await Reflect.apply(...arguments);
      }
    } });

};exports.conditionCheck = conditionCheck;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,