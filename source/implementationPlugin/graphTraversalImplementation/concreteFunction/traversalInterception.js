"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.traverseThenProcess = exports.processThenTraverse = exports.handleMiddlewareNextCall = void 0;
const handleMiddlewareNextCall = ({ dataProcessCallback, targetFunction, aggregator }) => {
  return new Proxy(targetFunction, {
    async apply(target, thisArg, argArray) {
      let { nodeInstance, traversalDepth, eventEmitter } = argArray[0];

      let nextCalled = false;

      const nextFunction = async () => {
        nextCalled = true;
        let traversalResultIterator = await Reflect.apply(...arguments);
        for await (let traversalResult of traversalResultIterator) aggregator.merge(traversalResult.result);
      };

      let result = await dataProcessCallback({ nextProcessData: aggregator.value, additionalParameter: { nextFunction } });
      if (!nextCalled) await nextFunction();

      return traversalDepth == 0 ? aggregator.value : aggregator;
    } });

};exports.handleMiddlewareNextCall = handleMiddlewareNextCall;


const processThenTraverse = ({ dataProcessCallback, targetFunction, aggregator }) => {
  return new Proxy(targetFunction, {
    async apply(target, thisArg, argArray) {
      let { nodeInstance, traversalDepth, eventEmitter } = argArray[0];
      eventEmitter.on('nodeTraversalCompleted', data => {

      });

      let result = await dataProcessCallback({ nextProcessData: aggregator.value, additionalParameter: {} });

      let traversalResultIterator = await Reflect.apply(...arguments);
      for await (let traversalResult of traversalResultIterator) aggregator.merge(traversalResult.result);

      return traversalDepth == 0 ? aggregator.value : aggregator;
    } });

};exports.processThenTraverse = processThenTraverse;


const traverseThenProcess = ({ dataProcessCallback, targetFunction, aggregator }) => {
  return new Proxy(targetFunction, {
    async apply(target, thisArg, argArray) {
      let { nodeInstance, traversalDepth, eventEmitter } = argArray[0];
      eventEmitter.on('nodeTraversalCompleted', data => {

      });

      let traversalResultIterator = await Reflect.apply(...arguments);
      for await (let traversalResult of traversalResultIterator) aggregator.merge(traversalResult.result);

      let result = await dataProcessCallback({ nextProcessData: aggregator.value, additionalParameter: {} });

      return traversalDepth == 0 ? aggregator.value : aggregator;
    } });

};exports.traverseThenProcess = traverseThenProcess;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,