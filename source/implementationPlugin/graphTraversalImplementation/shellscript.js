"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.shellscript = shellscript;








var _child_process = require("child_process");

function shellscript({ thisArg }) {

  let self = {
    async executeDataItem({
      dataItem,
      nodeInstance = thisArg,
      executionType })
    {

      await dataItemInstance.executeScript();
    },

    async executeScript() {
      let message = ` _____                          _        
| ____|__  __ ___   ___  _   _ | |_  ___ 
|  _|  \\ \\/ // _ \\ / __|| | | || __|/ _ \\
| |___  >  <|  __/| (__ | |_| || |_|  __/    
|_____|/_/\\_\\\\___| \\___| \\__,_| \\__|\\___|`;
      let childProcess;
      switch (this.implementation) {
        case 'spawn':
          try {
            console.log(message);console.log(`\x1b[45m%s\x1b[0m`, `${this.command} ${this.argument.join(' ')}`);
            childProcess = (0, _child_process.spawnSync)(this.command, this.argument, this.option);
            if (childProcess.status > 0) throw childProcess.error;
          } catch (error) {
            process.exit(childProcess.status);
          }
          break;
        case 'spawnIgnoreError':
          try {
            console.log(message);console.log(`\x1b[45m%s\x1b[0m`, `${this.command} ${this.argument.join(' ')}`);
            childProcess = (0, _child_process.spawnSync)(this.command, this.argument, this.option);
            if (childProcess.status > 0) throw childProcess.error;
          } catch (error) {
            console.log(childProcess.status);
          }
          break;
        case 'spawnAsynchronous':
          try {
            console.log(message);console.log(`\x1b[45m%s\x1b[0m`, `${this.command} ${this.argument.join(' ')}`);
            childProcess = (0, _child_process.spawn)(this.command, this.argument, this.option);
            if (childProcess.status > 0) throw childProcess.error;
          } catch (error) {
            process.exit(childProcess.status);
          }
          break;
        case 'file':
          try {
            console.log(message);console.log(`\x1b[45m%s\x1b[0m`, `shellscript file: ${this.filename}, shellscriptPath: ${this.shellscriptPath}`);
            this.option.cwd = this.shellscriptPath;
            (0, _child_process.execSync)(`sh ${this.filename}`, this.option);
          } catch (error) {
            throw error;
            process.exit(1);
          }
          break;
        default:
          console.log('X shellscriptUnit.implementation does not match any option.');
          break;}


      await new Promise(resolve => setTimeout(resolve, 500));
    } };



  Object.keys(self).forEach(function (key) {
    self[key] = self[key].bind(thisArg);
  }, {});
  return self;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,