"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.shellscript = shellscript;var _underscore = _interopRequireDefault(require("underscore"));

function shellscript({ thisArg }) {

  let self = {




    async initializeNestedUnit({ nestedUnitKey, additionalChildNestedUnit = [], pathPointerKey = null }) {


      let view = await nestedUnitInstance.loopInsertionPoint({ type: 'aggregateIntoTemplateObject' });

      assert(this.portAppInstance.config.clientSidePath, 'â€¢ clientSidePath cannot be undefined. i.e. previous middlewares should\'ve set it');
      let templatePath = path.join(this.portAppInstance.config.clientSidePath, unitInstance.file.filePath);
      let renderedContent;
      switch (unitInstance.executionType) {
        default:
        case 'underscoreRendering':
          renderedContent = await this.underscoreRendering({ templatePath, view });
          break;}


      switch (unitInstance.processRenderedContent) {
        case 'wrapJsTag':
          renderedContent = `<script type="module" async>${renderedContent}</script>`;
          break;
        default:}


      return renderedContent;
    },

    async underscoreRendering({ templatePath, view }) {

      let templateString = await filesystem.readFileSync(templatePath, 'utf-8');

      const templateArgument = {
        templateController: this,
        context: this.portAppInstance.context,
        Application,
        argument: {} };

      let renderedContent = _underscore.default.template(templateString)(
      Object.assign(
      {},
      templateArgument,
      { view, templateArgument }));


      return renderedContent;
    },

    renderedContentString(viewName, viewObject) {

      if (viewObject[viewName] && Array.isArray(viewObject[viewName])) {
        return viewObject[viewName].join('');
      }
    },

    traversePort: async function aggregateIntoTemplateObject() {
      let view = {};
      if (this.insertionPoint) {
        for (let insertionPoint of this.insertionPoint) {
          let children = await this.filterAndOrderChildren({ insertionPointKey: insertionPoint.key });
          let subsequent = await this.initializeInsertionPoint({ insertionPoint, children });
          if (!(insertionPoint.name in view)) view[insertionPoint.name] = [];
          Array.prototype.push.apply(
          view[insertionPoint.name],
          subsequent);

        }
      }
      return view;
    } };



  Object.keys(self).forEach(function (key) {
    self[key] = self[key].bind(thisArg);
  }, {});
  return self;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,