"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.getResource = getResource;exports.getExecution = getExecution;exports.getFork = getFork;exports.getNext = getNext;exports.getConfigure = getConfigure;exports.getCase = getCase;exports.getDefault = getDefault;exports.getRoot = getRoot;exports.getExtend = getExtend;exports.getInsert = getInsert;exports.getSubgraphTemplateElement = getSubgraphTemplateElement;exports.getSwitchElement = getSwitchElement;exports.getProcessElement = getProcessElement;

var _assert = _interopRequireDefault(require("assert"));
var _graphSchemeReference = require("../graphModel/graphSchemeReference.js");

async function getResource({ concreteDatabase, nodeID }) {
  let resourceArray = await concreteDatabase.getNodeConnection({ direction: 'incoming', nodeID, connectionType: _graphSchemeReference.connectionType.resource });
  (0, _assert.default)(resourceArray.every(n => _graphSchemeReference.connectionProperty.context.includes(n.connection.properties.context)), `• Unsupported property value for a RESOURCE connection.`);
  return { resourceArray };
}

async function getExecution({ concreteDatabase, nodeID }) {
  let executeArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID, connectionType: _graphSchemeReference.connectionType.execute });
  (0, _assert.default)(executeArray.every(n => n.destination.labels.includes(_graphSchemeReference.nodeLabel.process)), `• Unsupported node type for a EXECUTE connection.`);
  return { executeArray };
}

async function getFork({ concreteDatabase, nodeID }) {
  let forkArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID: nodeID, connectionType: _graphSchemeReference.connectionType.fork });
  (0, _assert.default)(forkArray.every(n => n.destination.labels.includes(_graphSchemeReference.nodeLabel.port)), `• Unsupported property value for a FORK connection.`);
  return { forkArray };
}

async function getNext({ concreteDatabase, nodeID }) {
  let nextArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID: nodeID, connectionType: _graphSchemeReference.connectionType.next });
  (0, _assert.default)(nextArray.every(n => n.destination.labels.includes(_graphSchemeReference.nodeLabel.stage) || n.destination.labels.includes(_graphSchemeReference.nodeLabel.subgraphTemplate)), `• Unsupported property value for a NEXT connection.`);
  return { nextArray };
}

async function getConfigure({ concreteDatabase, nodeID }) {
  let configureArray = await concreteDatabase.getNodeConnection({ direction: 'incoming', nodeID: nodeID, connectionType: _graphSchemeReference.connectionType.configure });
  (0, _assert.default)(
  configureArray.every(n => n.destination.labels.includes(_graphSchemeReference.nodeLabel.configuration) || n.destination.labels.includes(_graphSchemeReference.nodeLabel.evaluation)),
  `• Unsupported property value for a CONFIGURE connection.`);

  return { configureArray };
}

async function getCase({ concreteDatabase, nodeID }) {
  let caseArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID, connectionType: _graphSchemeReference.connectionType.case });
  (0, _assert.default)(caseArray.every(n => n.destination.labels.includes(_graphSchemeReference.nodeLabel.configuration)), `• Unsupported property value for a CASE connection.`);
  return { caseArray };
}

async function getDefault({ concreteDatabase, nodeID }) {
  let defaultArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID, connectionType: _graphSchemeReference.connectionType.default });
  (0, _assert.default)(defaultArray.every(n => n.destination.labels.includes(_graphSchemeReference.nodeLabel.configuration)), `• Unsupported property value for a DEFAULT connection.`);
  return { defaultArray };
}

async function getRoot({ concreteDatabase, nodeID }) {
  let rootArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID: nodeID, connectionType: _graphSchemeReference.connectionType.root });
  (0, _assert.default)(rootArray.every(n => n.destination.labels.includes(_graphSchemeReference.nodeLabel.stage) || n.destination.labels.includes(_graphSchemeReference.nodeLabel.subgraphTemplate)), `• Unsupported node type for a ROOT connection.`);
  return { rootArray };
}

async function getExtend({ concreteDatabase, nodeID }) {
  let extendArray = await concreteDatabase.getNodeConnection({ direction: 'outgoing', nodeID: nodeID, connectionType: _graphSchemeReference.connectionType.extend });
  (0, _assert.default)(extendArray.every(n => n.destination.labels.includes(_graphSchemeReference.nodeLabel.subgraphTemplate)), `• Unsupported node type for a EXTEND connection.`);
  return { extendArray };
}

async function getInsert({ concreteDatabase, nodeID }) {
  let insertArray = await concreteDatabase.getNodeConnection({ direction: 'incoming', nodeID: nodeID, connectionType: _graphSchemeReference.connectionType.insert });
  (0, _assert.default)(insertArray.every(n => n.destination.labels.includes(_graphSchemeReference.nodeLabel.stage)), `• Unsupported node type for a INSERT connection.`);
  return { insertArray };
}










async function getSubgraphTemplateElement({ concreteDatabase, nodeID }) {
  const { rootArray } = await getRoot({ concreteDatabase, nodeID });
  const { extendArray } = await getExtend({ concreteDatabase, nodeID });
  const { insertArray } = await getInsert({ concreteDatabase, nodeID });

  if (extendArray.length > 1) throw new Error(`• Multiple extend relationships are not supported for SubgraphTemplate node.`);
  if (rootArray.length > 1) throw new Error(`• Multiple root relationships are not supported for SubgraphTemplate node.`);

  return { extend: extendArray.length > 0 ? extendArray[0] : null, root: rootArray.length > 0 ? rootArray[0] : null, insertArray };
}


async function getSwitchElement({ concreteDatabase, nodeID }) {
  const { caseArray } = await getCase({ concreteDatabase, nodeID });
  const { defaultArray } = await getDefault({ concreteDatabase, nodeID });

  if (defaultArray.length > 1) throw new Error(`• Multiple default relationships are not supported for Switch node.`);

  return { caseArray: caseArray.length > 0 ? caseArray : null, default: defaultArray.length > 0 ? defaultArray[0] : null };
}

async function getProcessElement({ concreteDatabase, nodeID }) {
  const { resourceArray } = await getResource({ concreteDatabase, nodeID });
  const { executeArray } = await getExecution({ concreteDatabase, nodeID });

  if (resourceArray.length > 1) throw new Error(`• Multiple resource relationships are not supported for Process node.`);
  if (executeArray.length > 1) throw new Error(`• Multiple execute relationships are not supported for Process node.`);

  return { resource: resourceArray.length > 0 ? resourceArray[0] : null, execute: executeArray.length > 0 ? executeArray[0] : null };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,