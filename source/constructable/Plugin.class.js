"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.Plugin = void 0;var _assert = _interopRequireDefault(require("assert"));
var _entity = require("@dependency/entity");var _ref, _ref2, _Plugin$Constructable, _Plugin$Entity$refere;




const Plugin = new _entity.Entity.clientInterface({ description: 'Plugin', instanceType: 'object' });exports.Plugin = Plugin;

_ref = Plugin.reference,

Object.assign(_ref, {
  plugin: {
    list: Symbol('Plugin:plugin.list'),
    getter: Symbol('Plugin:plugin.getter'),
    setter: Symbol('Plugin:plugin.setter'),
    fallback: {
      list: Symbol('Plugin:plugin.fallback.list'),
      getter: Symbol('Plugin:plugin.fallback.getter'),
      setter: Symbol('Plugin:plugin.fallback.setter') } } });




_ref2 = Plugin.prototype,

Object.assign(_ref2, {
  [Plugin.reference.plugin.setter](








  pluginList,
  self = this)
  {var _Plugin$reference$plu;
    self[_Plugin$reference$plu = Plugin.reference.plugin.list] || (self[_Plugin$reference$plu] = {
      databaseModelAdapter: {},
      graphTraversalImplementation: {} });


    Object.entries(pluginList).forEach(([groupKey, implementationList]) => {
      (0, _assert.default)(self[Plugin.reference.plugin.list][groupKey] !== undefined, '• plugin groupKey isn`t supported. Trying to add a plugin that the Plugin class does`t support.');
      self[Plugin.reference.plugin.list][groupKey] = Object.assign(self[Plugin.reference.plugin.list][groupKey], implementationList);
    });
  },






  [Plugin.reference.plugin.getter]({
    pluginGroupKey,
    implementation = null,
    self = this })
  {
    (0, _assert.default)(pluginGroupKey, '• "plugin" parameter must be set.');


    if (implementation) return self[Plugin.reference.plugin.list][pluginGroupKey][implementation];


    let defaultImplementation = self[Plugin.reference.plugin.fallback.getter]({ pluginGroupKey });
    if (defaultImplementation) return self[Plugin.reference.plugin.list][pluginGroupKey][defaultImplementation];


    let firstItemKey = Object.groupKeys(self[Plugin.reference.plugin.list][pluginGroupKey])[0];
    return self[Plugin.reference.plugin.list][pluginGroupKey][firstItemKey];
  },
  [Plugin.reference.plugin.fallback.setter](defaultPluginList, self = this) {var _Plugin$reference$plu2;
    self[_Plugin$reference$plu2 = Plugin.reference.plugin.fallback.list] || (self[_Plugin$reference$plu2] = {});
    Object.assign(self[Plugin.reference.plugin.fallback.list], defaultPluginList);
  },
  [Plugin.reference.plugin.fallback.getter]({ pluginGroupKey }) {
    return self[Plugin.reference.plugin.fallback.list][pluginGroupKey];
  } });


Plugin[Constructable.reference.initialize.setter.list]({
  data({ data = {}, instanceObject }) {
    let { defaultPlugin, pluginList } = data;
    instanceObject[Plugin.reference.plugin.fallback.list] = {};

    instanceObject.databaseModelAdapter = {};
    instanceObject.graphTraversalImplementation = {};

    instanceObject[Plugin.reference.plugin.setter](pluginList);
    if (defaultPlugin) instanceObject[Plugin.reference.plugin.fallback.setter](defaultPlugin);

    return instanceObject;
  } });



let configuredConstructable = (_Plugin$Constructable =
Plugin[Constructable.reference.constructor.switch]({ implementationKey: Constructable.reference.constructor.key.configuredConstructable }), (
g => {
  g.next('intermittent');
  return g.next({
    description: 'EntityConstructableForClientInterfaceData',
    initializeFallback: 'data' }).
  value;
})(_Plugin$Constructable));
Plugin.clientInterface = (_Plugin$Entity$refere =
Plugin[_entity.Entity.reference.clientInterface.switch]({ implementationKey: _entity.Entity.reference.clientInterface.key.prototypeConstruct }), (
g => {
  g.next('intermittent');
  return g.next({ configuredConstructable }).value;
})(_Plugin$Entity$refere));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,