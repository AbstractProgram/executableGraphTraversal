"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.DataItemFunction = DataItemFunction;var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));var _assert = _interopRequireDefault(require("assert"));
var _prototypeChainDebug = require("@dependency/prototypeChainDebug");
var _decoratorUtility = require("@dependency/commonPattern/source/decoratorUtility.js");
var _extendedSubclassPattern = require("@dependency/commonPattern/source/extendedSubclassPattern.js");

function DataItemFunction({ Superclass, getDocumentQuery } = {}) {var _dec, _dec2, _dec3, _dec4, _class, _class2;
  let self = (_dec =
  (0, _decoratorUtility.conditional)({ decorator: _prototypeChainDebug.classDecorator, condition: process.env.SZN_DEBUG }), _dec2 =
  (0, _decoratorUtility.execute)({ staticMethod: 'initializeStaticClass', args: [] }), _dec3 =
  _extendedSubclassPattern.extendedSubclassPattern.Subclass(), _dec4 =


















  (0, _decoratorUtility.executeOnceForEachInstance)(), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = class DataItem extends Superclass {static initializeStaticClass(self) {self.getDocumentQuery = getDocumentQuery;}constructor(databaseDocumentKey) {super();this.key = databaseDocumentKey;return this;}async initializeDataItem() {console.log('â€¢ DataItem class, initializeDataItem function');}async
    pupolateUnitWithFile({
      fileKey,
      getDocument,
      extract = null })
    {
      _assert.default.strictEqual(Object.getPrototypeOf(self.rethinkdbConnection).constructor.name, 'TcpConnection');
      let file = await getDocument({ key: fileKey, connection: self.rethinkdbConnection });
      if (extract) this[extract.destinationKey] = extract.sourceKey ? file[extract.sourceKey] : file;
    }}, ((0, _applyDecoratedDescriptor2.default)(_class2.prototype, "pupolateUnitWithFile", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "pupolateUnitWithFile"), _class2.prototype)), _class2)) || _class) || _class) || _class);




  return self;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0RhdGFJdGVtLmNsYXNzLmpzIl0sIm5hbWVzIjpbIkRhdGFJdGVtRnVuY3Rpb24iLCJTdXBlcmNsYXNzIiwiZ2V0RG9jdW1lbnRRdWVyeSIsInNlbGYiLCJkZWNvcmF0b3IiLCJwcm90b3R5cGVDaGFpbkRlYnVnIiwiY29uZGl0aW9uIiwicHJvY2VzcyIsImVudiIsIlNaTl9ERUJVRyIsInN0YXRpY01ldGhvZCIsImFyZ3MiLCJleHRlbmRlZFN1YmNsYXNzUGF0dGVybiIsIlN1YmNsYXNzIiwiRGF0YUl0ZW0iLCJpbml0aWFsaXplU3RhdGljQ2xhc3MiLCJjb25zdHJ1Y3RvciIsImRhdGFiYXNlRG9jdW1lbnRLZXkiLCJrZXkiLCJpbml0aWFsaXplRGF0YUl0ZW0iLCJjb25zb2xlIiwibG9nIiwicHVwb2xhdGVVbml0V2l0aEZpbGUiLCJmaWxlS2V5IiwiZ2V0RG9jdW1lbnQiLCJleHRyYWN0IiwiYXNzZXJ0Iiwic3RyaWN0RXF1YWwiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsInJldGhpbmtkYkNvbm5lY3Rpb24iLCJuYW1lIiwiZmlsZSIsImNvbm5lY3Rpb24iLCJkZXN0aW5hdGlvbktleSIsInNvdXJjZUtleSJdLCJtYXBwaW5ncyI6ImdVQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVPLFNBQVNBLGdCQUFULENBQTBCLEVBQUVDLFVBQUYsRUFBY0MsZ0JBQWQsS0FBbUMsRUFBN0QsRUFBaUU7QUFDdEUsTUFBSUMsSUFBSTtBQUNMLHFDQUFZLEVBQUVDLFNBQVMsRUFBRUMsbUNBQWIsRUFBa0NDLFNBQVMsRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFNBQXpELEVBQVosQ0FESztBQUVMLGlDQUFRLEVBQUVDLFlBQVksRUFBRSx1QkFBaEIsRUFBeUNDLElBQUksRUFBRSxFQUEvQyxFQUFSLENBRks7QUFHTEMsbURBQXdCQyxRQUF4QixFQUhLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JILHFEQXRCRyx5REFDTixNQUdNQyxRQUhOLFNBR3VCYixVQUh2QixDQUdrQyxDQUdoQyxPQUFPYyxxQkFBUCxDQUE2QlosSUFBN0IsRUFBbUMsQ0FDakNBLElBQUksQ0FBQ0QsZ0JBQUwsR0FBd0JBLGdCQUF4QixDQUNELENBRURjLFdBQVcsQ0FBQ0MsbUJBQUQsRUFBc0IsQ0FDL0IsUUFDQSxLQUFLQyxHQUFMLEdBQVdELG1CQUFYLENBQ0EsT0FBTyxJQUFQLENBQ0QsQ0FFRCxNQUFNRSxrQkFBTixHQUEyQixDQUV6QkMsT0FBTyxDQUFDQyxHQUFSLENBQVksK0NBQVosRUFDRCxDQUVEO0FBQ01DLElBQUFBLG9CQUROLENBQzJCO0FBQ3pCQyxNQUFBQSxPQUR5QjtBQUV6QkMsTUFBQUEsV0FGeUI7QUFHekJDLE1BQUFBLE9BQU8sR0FBRyxJQUhlLEVBRDNCO0FBS0c7QUFDREMsc0JBQU9DLFdBQVAsQ0FBbUJDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQjFCLElBQUksQ0FBQzJCLG1CQUEzQixFQUFnRGQsV0FBaEQsQ0FBNERlLElBQS9FLEVBQXFGLGVBQXJGO0FBQ0EsVUFBSUMsSUFBSSxHQUFHLE1BQU1SLFdBQVcsQ0FBQyxFQUFFTixHQUFHLEVBQUVLLE9BQVAsRUFBZ0JVLFVBQVUsRUFBRTlCLElBQUksQ0FBQzJCLG1CQUFqQyxFQUFELENBQTVCO0FBQ0EsVUFBSUwsT0FBSixFQUFhLEtBQUtBLE9BQU8sQ0FBQ1MsY0FBYixJQUErQlQsT0FBTyxDQUFDVSxTQUFSLEdBQW9CSCxJQUFJLENBQUNQLE9BQU8sQ0FBQ1UsU0FBVCxDQUF4QixHQUE4Q0gsSUFBN0U7QUFDZCxLQTNCK0IsQ0FKNUIsME9BQVI7Ozs7O0FBb0NBLFNBQU83QixJQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCdcclxuaW1wb3J0IHsgY2xhc3NEZWNvcmF0b3IgYXMgcHJvdG90eXBlQ2hhaW5EZWJ1ZyB9IGZyb20gJ0BkZXBlbmRlbmN5L3Byb3RvdHlwZUNoYWluRGVidWcnXHJcbmltcG9ydCB7IGFkZCwgZXhlY3V0ZSwgY29uZGl0aW9uYWwsIGV4ZWN1dGVPbmNlRm9yRWFjaEluc3RhbmNlIH0gZnJvbSAnQGRlcGVuZGVuY3kvY29tbW9uUGF0dGVybi9zb3VyY2UvZGVjb3JhdG9yVXRpbGl0eS5qcydcclxuaW1wb3J0IHsgZXh0ZW5kZWRTdWJjbGFzc1BhdHRlcm4gfSBmcm9tICdAZGVwZW5kZW5jeS9jb21tb25QYXR0ZXJuL3NvdXJjZS9leHRlbmRlZFN1YmNsYXNzUGF0dGVybi5qcydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBEYXRhSXRlbUZ1bmN0aW9uKHsgU3VwZXJjbGFzcywgZ2V0RG9jdW1lbnRRdWVyeSB9ID0ge30pIHtcclxuICBsZXQgc2VsZiA9XHJcbiAgICBAY29uZGl0aW9uYWwoeyBkZWNvcmF0b3I6IHByb3RvdHlwZUNoYWluRGVidWcsIGNvbmRpdGlvbjogcHJvY2Vzcy5lbnYuU1pOX0RFQlVHIH0pXHJcbiAgICBAZXhlY3V0ZSh7IHN0YXRpY01ldGhvZDogJ2luaXRpYWxpemVTdGF0aWNDbGFzcycsIGFyZ3M6IFtdIH0pXHJcbiAgICBAZXh0ZW5kZWRTdWJjbGFzc1BhdHRlcm4uU3ViY2xhc3MoKSAvLyBpbiBjYXNlIHNwZWNpZmljTmVzdGVkVW5pdCBzdWJjbGFzcyBpc24ndCByZWdpc3RlcmVkLCB0aGlzIGNsYXNzIHdpbGwgYmUgdXNlZCBhcyBDb250cm9sbGVyIHN1YmNsYXNzIHdoZW4gY2FsbGVkLlxyXG4gICAgY2xhc3MgRGF0YUl0ZW0gZXh0ZW5kcyBTdXBlcmNsYXNzIHtcclxuICAgICAgc3RhdGljIGdldERvY3VtZW50UXVlcnlcclxuXHJcbiAgICAgIHN0YXRpYyBpbml0aWFsaXplU3RhdGljQ2xhc3Moc2VsZikge1xyXG4gICAgICAgIHNlbGYuZ2V0RG9jdW1lbnRRdWVyeSA9IGdldERvY3VtZW50UXVlcnlcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3RydWN0b3IoZGF0YWJhc2VEb2N1bWVudEtleSkge1xyXG4gICAgICAgIHN1cGVyKClcclxuICAgICAgICB0aGlzLmtleSA9IGRhdGFiYXNlRG9jdW1lbnRLZXlcclxuICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhc3luYyBpbml0aWFsaXplRGF0YUl0ZW0oKSB7XHJcbiAgICAgICAgLy8gbGV0IGluaXRpYWxpemF0aW9uSW1wbGVtZW50YXRpb25UeXBlID0gZGF0YUl0ZW0udGFnLmluaXRpYWxpemF0aW9uSW1wbGVtZW50YXRpb25UeXBlXHJcbiAgICAgICAgY29uc29sZS5sb2coJ+KAoiBEYXRhSXRlbSBjbGFzcywgaW5pdGlhbGl6ZURhdGFJdGVtIGZ1bmN0aW9uJylcclxuICAgICAgfVxyXG5cclxuICAgICAgQGV4ZWN1dGVPbmNlRm9yRWFjaEluc3RhbmNlKClcclxuICAgICAgYXN5bmMgcHVwb2xhdGVVbml0V2l0aEZpbGUoe1xyXG4gICAgICAgIGZpbGVLZXksXHJcbiAgICAgICAgZ2V0RG9jdW1lbnQsIC8vIGZ1bmN0aW9uXHJcbiAgICAgICAgZXh0cmFjdCA9IG51bGwsIC8vIG9iamVjdCB3aXRoIHR3byBwcm9wZXJ0aWVzIC0gZXh0cmFjdDogeyBzb3VyY2VLZXk6ICdrZXkgZnJvbSBzb3VyY2Ugb2JqZWN0JywgZGVzdGluYXRpb25LZXk6ICdrZXkgdG8gXCJ0aGlzXCIgZGVzdGluYXRpb24nIH1cclxuICAgICAgfSkge1xyXG4gICAgICAgIGFzc2VydC5zdHJpY3RFcXVhbChPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc2VsZi5yZXRoaW5rZGJDb25uZWN0aW9uKS5jb25zdHJ1Y3Rvci5uYW1lLCAnVGNwQ29ubmVjdGlvbicpXHJcbiAgICAgICAgbGV0IGZpbGUgPSBhd2FpdCBnZXREb2N1bWVudCh7IGtleTogZmlsZUtleSwgY29ubmVjdGlvbjogc2VsZi5yZXRoaW5rZGJDb25uZWN0aW9uIH0pXHJcbiAgICAgICAgaWYgKGV4dHJhY3QpIHRoaXNbZXh0cmFjdC5kZXN0aW5hdGlvbktleV0gPSBleHRyYWN0LnNvdXJjZUtleSA/IGZpbGVbZXh0cmFjdC5zb3VyY2VLZXldIDogZmlsZVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBUT0RPOiBBZGQgZnVuY3Rpb24gZm9yIGxvYWRpbmcgZmlsZSB1c2luZyB0aGUgZmlsZSBvYmplY3Qgc2V0dGluZ3MsIGkuZS4gbG9hZCBmaWxlcGF0aCBhcyBlczYgbW9kdWxlIG9yIGFzIHJlZ3VsYXIgbW9kdWxlIHdpdGggZGVmYXVsdCBleHBvcnQuXHJcbiAgICB9XHJcblxyXG4gIHJldHVybiBzZWxmXHJcbn1cclxuIl19