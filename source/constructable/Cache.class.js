"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.entityPrototype = exports.Prototype = exports.Reference = exports.Cache = void 0;
var _entity = require("@dependency/entity");
var _multiplePrototypeDelegation = require("@dependency/multiplePrototypeDelegation");




const { class: Cache, reference: Reference, constructablePrototype: Prototype, entityPrototype } = new _entity.Entity.clientInterface({ description: 'Cache' });exports.entityPrototype = entityPrototype;exports.Prototype = Prototype;exports.Reference = Reference;exports.Cache = Cache;

Object.assign(Reference, {
  key: {
    defaultGroupKey: Symbol('Cache defaultGroupKey'),
    list: Symbol('Cache list'),
    getter: Symbol('Cache getter'),
    setter: Symbol('Cache setter'),
    getLength: Symbol('Cache getLength of cached items'),
    initializeGroup: Symbol('Cache initializeGroup') } });











const defaultGroupKey = Reference.key.defaultGroupKey;
Object.assign(entityPrototype, {
  [_entity.Entity.reference.key.concereteBehavior]({ constructorCallback, currentConcereteBehavior }) {
    return new Proxy(constructorCallback, {
      apply(target, thisArg, argumentList) {
        const { data } = argumentList[0];
        let instance = Reflect.apply(...arguments);
        _multiplePrototypeDelegation.MultipleDelegation.addDelegation({ targetObject: instance, delegationList: [currentConcereteBehavior] });
        return instance;
      } });

  },
  [Reference.key.getter](key, groupKey = defaultGroupKey) {var _map;
    if (!key) return _map = this[Reference.key.list][groupKey], [..._map.values()];
    return this[Reference.key.list][groupKey].get(key) || undefined;
  },
  [Reference.key.setter](key, value, groupKey = defaultGroupKey) {
    if (key === undefined || key === null) throw new Error('â€¢ Invalid key argument.');
    this[Reference.key.list][groupKey].set(key, value);
  },
  [Reference.key.getLength](groupKey = defaultGroupKey) {
    return this[Reference.key.list][groupKey].size;
  },
  [Reference.key.initializeGroup](groupKey) {
    if (!this[Reference.key.list][groupKey]) this[Reference.key.list][groupKey] = new Map();
  } });









Cache[_entity.Constructable.reference.initialize.functionality].setter.call(Cache, {

  [_entity.Entity.reference.key.handleDataInstance]({ targetInstance, data }, previousResult) {
    let groupKeyArray = data.groupKeyArray || [];
    targetInstance[Reference.key.list] = {};
    for (let groupKey of groupKeyArray) {
      targetInstance[Reference.key.initializeGroup].call(targetInstance, groupKey);
    }
    targetInstance[Reference.key.initializeGroup].call(targetInstance, defaultGroupKey);
    return targetInstance;
  } });









Cache.clientInterface = Prototype[_entity.Constructable.reference.clientInterface.functionality].switch.call(Cache, {
  implementationKey: _entity.Entity.reference.key.instanceDelegatingToEntityInstancePrototype })(
{
  constructorImplementation: _entity.Entity.reference.key.handleDataInstance });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,