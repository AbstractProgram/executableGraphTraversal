"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.entityPrototype = exports.Prototype = exports.Reference = exports.GraphTraversal = exports.traversalOption = void 0;
var _entity = require("@dependency/entity");
var _ImplementationManagementClass = require("./ImplementationManagement.class.js");
var _multiplePrototypeDelegation = require("@dependency/multiplePrototypeDelegation");







const traversalOption = ['processData', 'handlePropagation', 'traverseNode', 'aggregator', 'traversalInterception', 'evaluatePosition'];exports.traversalOption = traversalOption;




const { class: GraphTraversal, reference: Reference, constructablePrototype: Prototype, entityPrototype } = new _ImplementationManagementClass.ImplementationManagement.clientInterface({ description: 'GraphTraversal' });exports.entityPrototype = entityPrototype;exports.Prototype = Prototype;exports.Reference = Reference;exports.GraphTraversal = GraphTraversal;









Object.assign(Reference, {
  key: {} });










Object.assign(entityPrototype, {

  [_entity.Entity.reference.key.concereteBehavior]({ constructorCallback, currentConcereteBehavior }) {
    return new Proxy(constructorCallback, {
      apply(target, thisArg, [{ data }]) {
        let instance = Reflect.apply(...arguments);
        _multiplePrototypeDelegation.MultipleDelegation.addDelegation({ targetObject: instance, delegationList: [currentConcereteBehavior] });
        return instance;
      } });

  } });









GraphTraversal[_entity.Constructable.reference.initialize.functionality].setter.call(GraphTraversal, {});








GraphTraversal.clientInterface = Prototype[_entity.Constructable.reference.clientInterface.functionality].switch.call(GraphTraversal, {
  implementationKey: _entity.Entity.reference.key.instanceDelegatingToEntityInstancePrototype })(
{
  constructorImplementation: _entity.Entity.reference.key.handleDataInstance });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,