"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.isSelfEdge = isSelfEdge;exports.getResource = getResource;exports.getValue = getValue;exports.getExecution = getExecution;exports.getPipe = getPipe;exports.getFork = getFork;exports.getNext = getNext;exports.getConfigure = getConfigure;exports.getCase = getCase;exports.getSelect = getSelect;exports.getFallback = getFallback;exports.getReference = getReference;exports.getExtend = getExtend;exports.getInsert = getInsert;exports.getSubgraph = getSubgraph;exports.getRerouteTraverseReferenceElement = getRerouteTraverseReferenceElement;exports.getReferenceResolutionElement = getReferenceResolutionElement;exports.getSelectionElement = getSelectionElement;exports.getConditionSwitchElement = getConditionSwitchElement;exports.getValueElement = getValueElement;

var _assert = _interopRequireDefault(require("assert"));
var schemeReference = _interopRequireWildcard(require("../../dataModel/graphSchemeReference.js"));

function isSelfEdge(edge) {
  return edge.source.identity == edge.destination.identity;
}

async function getResource({ nodeID }) {
  let resourceArray = await this.implementation.getNodeConnection.call(this, { direction: 'incoming', nodeID, connectionType: schemeReference.connectionType.resource });
  (0, _assert.default)(
  resourceArray.every(n => schemeReference.resourceProperty.context.includes(n.connection.properties.context)),
  `• Unsupported property value for a RESOURCE connection.`);

  return { resourceArray };
}

async function getValue({ nodeID }) {
  let valueArray = await this.implementation.getNodeConnection.call(this, { direction: 'incoming', nodeID, connectionType: schemeReference.connectionType.value });
  return { valueArray: valueArray };
}

async function getExecution({ nodeID }) {
  let executeArray = await this.implementation.getNodeConnection.call(this, { direction: 'outgoing', nodeID, connectionType: schemeReference.connectionType.execute });
  (0, _assert.default)(
  executeArray.every(n => n.destination.labels.includes(schemeReference.nodeLabel.process)),
  `• Unsupported node type for a EXECUTE connection.`);

  return { executeArray };
}

async function getPipe({ nodeID }) {
  let pipeArray = await this.implementation.getNodeConnection.call(this, { direction: 'outgoing', nodeID, connectionType: schemeReference.connectionType.pipe });
  (0, _assert.default)(
  pipeArray.every(n => n.destination.labels.includes(schemeReference.nodeLabel.process)),
  `• Unsupported node type for a PIPE connection.`);

  return { pipeArray };
}

async function getFork({ nodeID }) {
  let forkArray = await this.implementation.getNodeConnection.call(this, { direction: 'outgoing', nodeID: nodeID, connectionType: schemeReference.connectionType.fork });
  (0, _assert.default)(
  forkArray.every(n => n.destination.labels.includes(schemeReference.nodeLabel.port)),
  `• Unsupported property value for a FORK connection.`);

  return { forkArray };
}

async function getNext({ nodeID }) {
  let nextArray = await this.implementation.getNodeConnection.call(this, { direction: 'outgoing', nodeID: nodeID, connectionType: schemeReference.connectionType.next });
  (0, _assert.default)(
  nextArray.every(n => n.destination.labels.includes(schemeReference.nodeLabel.stage) || n.destination.labels.includes(schemeReference.nodeLabel.reroute)),
  `• Unsupported property value for a NEXT connection.`);

  return { nextArray };
}

async function getConfigure({ nodeID }) {
  let configureArray = await this.implementation.getNodeConnection.call(this, { direction: 'incoming', nodeID: nodeID, connectionType: schemeReference.connectionType.configure });
  (0, _assert.default)(
  configureArray.every(n => n.source.labels.includes(schemeReference.nodeLabel.configuration) || n.source.labels.includes(schemeReference.nodeLabel.reroute)),
  `• Unsupported node type for a CONFIGURE connection.`);

  (0, _assert.default)(
  configureArray.every(n => n.connection.properties.setting),
  `• Missing "setting" property on a CONFIGURE connection.`);


  return { configureArray };
}

async function getCase({ nodeID }) {
  let caseArray = await this.implementation.getNodeConnection.call(this, { direction: 'outgoing', nodeID, connectionType: schemeReference.connectionType.case });

  return { caseArray };
}

async function getSelect({ nodeID }) {
  let selectArray = await this.implementation.getNodeConnection.call(this, { direction: 'outgoing', nodeID, connectionType: schemeReference.connectionType.select });

  return { selectArray };
}

async function getFallback({ nodeID }) {
  let fallbackArray = await this.implementation.getNodeConnection.call(this, { direction: 'outgoing', nodeID, connectionType: schemeReference.connectionType.fallback });

  return { fallbackArray };
}

async function getReference({ nodeID }) {
  let referenceArray = await this.implementation.getNodeConnection.call(this, { direction: 'outgoing', nodeID: nodeID, connectionType: schemeReference.connectionType.reference });

  (0, _assert.default)(
  referenceArray.every(n => n.destination.labels.includes(schemeReference.nodeLabel.stage) || n.destination.labels.includes(schemeReference.nodeLabel.reroute)),
  `• Unsupported node type for a ${schemeReference.connectionType.reference} connection.`);

  return { referenceArray };
}

async function getExtend({ nodeID }) {
  let extendArray = await this.implementation.getNodeConnection.call(this, { direction: 'outgoing', nodeID: nodeID, connectionType: schemeReference.connectionType.extend });
  (0, _assert.default)(
  extendArray.every(n => n.destination.labels.includes(schemeReference.nodeLabel.reroute)),
  `• Unsupported node type for a EXTEND connection.`);

  return { extendArray };
}

async function getInsert({ nodeID }) {
  let insertArray = await this.implementation.getNodeConnection.call(this, { direction: 'incoming', nodeID: nodeID, connectionType: schemeReference.connectionType.insert });
  (0, _assert.default)(
  insertArray.every(n => n.source.labels.includes(schemeReference.nodeLabel.stage)),
  `• Unsupported node type for a INSERT connection.`);

  return { insertArray };
}

async function getSubgraph({ nodeID }) {
  let subgraphArray = await this.implementation.getNodeConnection.call(this, { direction: 'incoming', nodeID: nodeID, connectionType: schemeReference.connectionType.subgraph });
  (0, _assert.default)(
  subgraphArray.every(n => n.source.labels.includes(schemeReference.nodeLabel.stage) || n.source.labels.includes(schemeReference.nodeLabel.reroute)),
  `• Unsupported node type for a SUBGRAPH connection.`);

  return { subgraphArray };
}










async function getRerouteTraverseReferenceElement({ nodeID }) {
  const { extendArray } = await this.getExtend({ nodeID });
  const { insertArray } = await this.getInsert({ nodeID });

  if (extendArray.length > 1) throw new Error(`• Multiple extend relationships are not supported for Reroute node.`);

  return { extend: extendArray.length > 0 ? extendArray[0] : null, insertArray };
}

async function getReferenceResolutionElement({ nodeID }) {
  const { referenceArray } = await this.getReference({ nodeID });

  if (referenceArray.length > 1) throw new Error(`• Multiple reference relationships are not supported for Reroute node.`);

  return { reference: referenceArray.length > 0 ? referenceArray[0] : null };
}

async function getSelectionElement({ nodeID }) {
  const { selectArray } = await this.getSelect({ nodeID });
  const { fallbackArray } = await this.getFallback({ nodeID });

  if (fallbackArray.length > 1) throw new Error(`• Multiple "fallback" relationships are not supported for Selection/Switch node.`);

  return { selectArray: selectArray.length > 0 ? selectArray : null, fallback: fallbackArray.length > 0 ? fallbackArray[0] : null };
}

async function getConditionSwitchElement({ nodeID }) {
  const { caseArray } = await this.getCase({ nodeID });

  return { caseArray: caseArray.length > 0 ? caseArray : null };
}


async function getValueElement({ nodeID }) {

  let value;
  const { valueArray } = await this.getValue({ nodeID });
  if (valueArray.length > 1) throw new Error(`• Multiple VALUE relationships are not supported for Process node.`);else
  if (valueArray.length != 0 && valueArray[0]) return valueArray[0];
}














function reroute() {
  ;`  match (n {key:''})
  create (n)
    -[:CASE {expected: "GET"}]->
    (r:Reroute {name: 'request URL path switch'})
        create (r)-[:REFERENCE {resolutionImplementation: "caseSwitch"}]-> (r)
  create (r)
    <-[:VALUE {implementation: "conditionSubgraph"}]-
    (s:Stage:Process:Function {functionName: "getUrlPathLevel1"})
        create (s)-[:EXECUTE]->(s)
        create (s)-[:RESOURCE {context: "applicationReference"}]->(s)

  match (n {key: ''})
    create (n) -[:VALUE {implementation: "conditionSubgraph"}]-> (n)
    create (n) -[:EXECUTE]-> (n)
    create (n) -[:RESOURCE {context: "applicationReference"}]-> (n)
  set n:Stage:Process:Function; set n.functionName = "getRequestMethod"

`;
}

function port() {
  ;`  create (n)-[:FORK]->(n)
  set n:Port
  set n.handlePropagationImplementation = "chronological"
`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,