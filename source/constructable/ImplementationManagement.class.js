"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.clientInterface = exports.$ = exports.class = void 0;var _skipFirstGeneratorNext2 = _interopRequireDefault(require("@babel/runtime/helpers/skipFirstGeneratorNext"));
var _entity = require("@dependency/entity");
var _multiplePrototypeDelegation = require("@dependency/multiplePrototypeDelegation");
var Context = _interopRequireWildcard(require("./Context.class.js"));var _instancePrototype, _instancePrototype2;




const { class: Class, reference: $ } = new _entity.Entity.clientInterface.constructableInstance({ label: 'ImplementationManagement' });exports.$ = $;exports.class = Class;

Object.assign($, {
  key: {
    implementation: 'implementation',
    list: Symbol('implementation.list'),
    getter: Symbol('implementation.getter'),
    setter: Symbol('implementation.setter'),
    fallback: Symbol('implementation.fallback'),
    fallbackSetter: Symbol('implementation.fallbackSetter') } });




_instancePrototype = Class[$.prototypeDelegation.getter].call(Class, _entity.Entity.$.key.stateInstance).instancePrototype,

Object.assign(_instancePrototype, {

  [_entity.Entity.$.key.concereteBehavior]({ targetInstance }, { concereteBehavior }) {
    _multiplePrototypeDelegation.MultipleDelegation.addDelegation({ targetObject: targetInstance, delegationList: [concereteBehavior] });
    return targetInstance;
  },


  [$.key.setter](implemeantationList, self = this) {var _$$key$list;
    self[_$$key$list = $.key.list] || (self[_$$key$list] = {});
    Object.assign(self[$.key.list], implemeantationList);
  },






  [$.key.getter]({ implementation = null, self = this } = {}) {
    if (implementation) return self[$.key.list][implementation];

    let defaultImplementation = self[$.key.fallback];
    if (defaultImplementation) return self[$.key.list][defaultImplementation];

    let firstItemKey = Object.groupKeys(self[$.key.list])[0];
    return self[$.key.list][firstItemKey];
  },

  [$.key.fallbackSetter](implementationKey, self = this) {
    Object.defineProperty(self, $.key.fallback, {
      value: implementationKey });

  } });


_instancePrototype2 = Class[$.prototypeDelegation.getter].call(Class, _entity.Constructable.$.key.constructableInstance).instancePrototype, (
prototype => {
  prototype[_entity.Entity.$.initialize.setter].call(prototype, {

    [_entity.Entity.$.key.handleDataInstance]: (function () {let _ref = function* ({ targetInstance, callerClass = this }, { implementationList, defaultImplementation }) {let _functionSent = yield;

        let { superCallback } = _functionSent;
        if (superCallback) targetInstance = superCallback.call(callerClass, ...arguments);

        targetInstance[$.key.setter](implementationList);
        if (defaultImplementation) targetInstance[$.key.fallback] = defaultImplementation;

        targetInstance[$.key.implementation] = targetInstance[$.key.getter]();







        let instanceList = targetInstance[_entity.Entity.$.getInstanceOf](Context.class, { recursive: true });
        if (instanceList.length > 0) {
          let { proxy } = new _multiplePrototypeDelegation.MultipleDelegation(instanceList);
          targetInstance.context = proxy;
        }

        return targetInstance;
      },_ref2 = (0, _skipFirstGeneratorNext2.default)(_ref);return new Proxy(_ref, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref2, thisArgument, argumentsList);} });})() });

  prototype[_entity.Entity.$.constructor.setter].call(prototype, {

    [_entity.Entity.$.key.stateInstance]({}, args = {}) {
      let {
        concreteBehaviorList = [],
        callerClass = this } =

      args;
      let instance = callerClass[_entity.Entity.$.constructor.switch].call(callerClass, _entity.Entity.$.key.concereteBehavior)(
      {},
      {
        concreteBehaviorList: [...concreteBehaviorList] });




      callerClass[_entity.Constructable.$.initialize.switch].call(callerClass, _entity.Entity.$.key.handleDataInstance, { recursiveDelegationChainExecution: true })({ targetInstance: instance }, args);

      return instance;
    } });

})(_instancePrototype2);


const clientInterface = Class[_entity.Entity.$.clientInterface.switch].call(Class, _entity.Constructable.$.key.constructableInstance)({ constructorImplementation: _entity.Constructable.$.key.constructableInstance });exports.clientInterface = clientInterface;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,