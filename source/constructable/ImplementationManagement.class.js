"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.entityPrototype = exports.constructablePrototype = exports.Reference = exports.ImplementationManagement = void 0;
var _entity = require("@dependency/entity");




const { class: ImplementationManagement, reference: Reference, constructablePrototype, entityPrototype } = new _entity.Entity.clientInterface({ description: 'ImplementationManagement' });exports.entityPrototype = entityPrototype;exports.constructablePrototype = constructablePrototype;exports.Reference = Reference;exports.ImplementationManagement = ImplementationManagement;









Object.assign(Reference, {
  key: {
    list: Symbol('implementation.list'),
    getter: Symbol('implementation.getter'),
    setter: Symbol('implementation.setter'),
    fallback: Symbol('implementation.fallback'),
    fallbackSetter: Symbol('implementation.fallbackSetter') } });












Object.assign(entityPrototype, {

  [Reference.key.setter](implemeantationList, self = this) {var _Reference$key$list;
    self[_Reference$key$list = Reference.key.list] || (self[_Reference$key$list] = {});
    Object.assign(self[Reference.key.list], implemeantationList);
  },






  [Reference.key.getter]({ implementation = null, self = this } = {}) {
    if (implementation) return self[Reference.key.list][implementation];

    let defaultImplementation = self[Reference.key.fallback];
    if (defaultImplementation) return self[Reference.key.list][defaultImplementation];

    let firstItemKey = Object.groupKeys(self[Reference.key.list])[0];
    return self[Reference.key.list][firstItemKey];
  },

  [Reference.key.fallbackSetter](implementationKey, self = this) {
    Object.defineProperty(self, Reference.key.fallback, {
      value: implementationKey });

  } });









ImplementationManagement[_entity.Constructable.reference.initialize.functionality].setter.call(constructablePrototype, {

  [_entity.Entity.reference.key.handleDataInstance]({ targetInstance, data }, previousResult) {
    let { implementationList, defaultImplementation } = data;
    targetInstance[Reference.key.setter](implementationList);
    if (defaultImplementation) targetInstance[Reference.key.fallback] = defaultImplementation;
    return targetInstance;
  } });










ImplementationManagement.clientInterface = ImplementationManagement[_entity.Constructable.reference.clientInterface.functionality].switch.call(ImplementationManagement, {
  implementationKey: _entity.Entity.reference.key.entityClass })(
{});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,