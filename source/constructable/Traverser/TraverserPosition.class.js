"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.TraverserPosition = void 0;var _assert = _interopRequireDefault(require("assert"));
var _events = _interopRequireDefault(require("events"));
var _removeUndefinedFromObject = require("../../utility/removeUndefinedFromObject.js");
var schemeReference = _interopRequireWildcard(require("../../dataModel/graphSchemeReference.js"));
var stageNode = _interopRequireWildcard(require("./method/stageNode.js"));
var rerouteNode = _interopRequireWildcard(require("./method/rerouteNode.js"));








class TraverserPosition {





















  static getEntrypointNodeType({ node }) {
    for (let nodeLabel of TraverserPosition.entrypointNodeArray) if (node.labels.includes(nodeLabel)) return nodeLabel;

    throw new Error(`• Unsupported entrypoint node type for traversal function - ${node.labels}`);
  }












  constructor({
    node,
    traverser,
    depth = 0,
    path = null,

    eventEmitter = new _events.default(),
    parentTraverserPosition })
  {var _ref, _this$traverser$conte;this.traversalImplementationHierarchy = {};this.evaluationHierarchy = {};
    this.node = node;
    this.traverser = traverser;
    this.path = parentTraverserPosition ? parentTraverserPosition.path : path;
    this.depth = parentTraverserPosition ? parentTraverserPosition.depth + 1 : depth;
    this.eventEmitter = eventEmitter;
    this.emitCompletedTraversal = (...args) => this.eventEmitter.emit('nodeTraversalCompleted', ...args);

    this.traversalImplementationHierarchy = {

      context: (_ref = ((_this$traverser$conte = this.traverser.context) === null || _this$traverser$conte === void 0 ? void 0 : _this$traverser$conte.implementationKey) || {}, (0, _removeUndefinedFromObject.removeUndefinedFromObject)(_ref)),


      parent: parentTraverserPosition ? parentTraverserPosition.getTraversalImplementationKey() || {} : {} };

    this.evaluationHierarchy = {};

    return this;
  }


  initialize() {
    if (!this.aggregator) {
      let Aggregator = this.getImplementationCallback({ key: 'aggregator' })();
      this.aggregator = new Aggregator();
    }
  }

  setEvaluationHierarchy(parameterType, evaluation) {
    if (!this.evaluationHierarchy[parameterType]) this.evaluationHierarchy[parameterType] = {};
    Object.assign(this.evaluationHierarchy[parameterType], evaluation);
  }

  setImplementationHierarchy(parameterType, implementationKey) {
    if (!this.traversalImplementationHierarchy[parameterType]) this.traversalImplementationHierarchy[parameterType] = {};
    Object.assign(this.traversalImplementationHierarchy[parameterType], implementationKey);
  }

  calculateConfig() {
    return {
      evaluation: this.calculateEvaluationHierarchy(),
      implementation: this.getAllImplementation() };

  }

  getEntrypointNodeImplementation({ nodeLabel = this.node.entrypointNodeType, implementationKey } = {}) {
    let implementationPropertyName = `${nodeLabel}_implementation`;
    implementationKey || (implementationKey = this.node.properties[implementationPropertyName] ? this.node.properties[implementationPropertyName] : undefined);
    let nodeImplementationKey = implementationKey ? { [nodeLabel]: implementationKey } : undefined;

    let calculatedImplementationKey = this.getTraversalImplementationKey({ key: nodeLabel, nodeImplementationKey });
    return TraverserPosition.entrypointNodeImplementation[nodeLabel][calculatedImplementationKey];
  }

  getAllImplementation() {
    let implementationKey = this.getTraversalImplementationKey();
    let implementation = {
      processNode: this.traverser.implementation.processNode[implementationKey.processNode],
      portNode: this.traverser.implementation.portNode[implementationKey.portNode],
      traversalInterception: this.traverser.implementation.traversalInterception[implementationKey.traversalInterception],
      aggregator: this.traverser.implementation.aggregator[implementationKey.aggregator] };

    Object.entries(implementation).forEach(([key, value]) => {
      (0, _assert.default)(
      Boolean(value),
      `• All traversal implementation concerete functions must be registered, the implementationKey "${key}" provided doesn't match any of the registered implementaions - ${implementation[key]}`);

    });
    return implementation;
  }

  getImplementationCallback({ key }) {
    return ({ nodeImplementationKey } = {}) => {
      let implementationKey = this.getTraversalImplementationKey({ key: key, nodeImplementationKey });
      let implementation = this.traverser.implementation[key][implementationKey];
      (0, _assert.default)(implementation, `• 'implementation' concerete function must be registered, the implementationKey "${implementationKey}" provided doesn't match any of the registered implementaions.`);
      return implementation;
    };
  }


  getTraversalImplementationKey({ key, nodeImplementationKey } = {}) {
    let implementationKey = this.calculateImplementationHierarchy({ nodeImplementationKey });
    if (key) return implementationKey[key];else
    return implementationKey;
  }

  calculateImplementationHierarchy({ nodeImplementationKey = {} } = {}) {



    let implementationKey = Object.assign(
    {},

    TraverserPosition.defaultTraversalImplementationKey,

    this.traversalImplementationHierarchy.context,

    this.traversalImplementationHierarchy.parent,

    this.traversalImplementationHierarchy.configuration,

    nodeImplementationKey,

    this.traversalImplementationHierarchy.parameter);

    return implementationKey;
  }

  calculateEvaluationHierarchy() {
    this.evaluation = Object.assign({}, TraverserPosition.defaultEvaluationHierarchyKey, this.evaluationHierarchy.configuration, this.evaluationHierarchy.parameter);
    return this.evaluation;
  }



  shouldContinue() {
    switch (this.evaluation.propagation) {
      case schemeReference.evaluationOption.propagation.continue:
        return true;
        break;
      case schemeReference.evaluationOption.propagation.break:
      case schemeReference.evaluationOption.propagation.hult:
        return false;
        break;
      default:
        throw new Error(`• Unknown option for 'evaluator.propagation' = ${this.evaluation.propagation}.`);
        break;}

  }
  shouldIncludeResult() {
    switch (this.evaluation.aggregation) {
      case schemeReference.evaluationOption.aggregation.include:
        return true;
        break;
      case schemeReference.evaluationOption.aggregation.exclude:
      case schemeReference.evaluationOption.aggregation.skip:
        return false;
        break;
      default:
        throw new Error(`• Unknown option for 'evaluator.aggregation' = ${this.evaluation.aggregation}.`);
        break;}

  }
  shouldExecuteProcess() {
    switch (this.evaluation.aggregation) {
      case schemeReference.evaluationOption.aggregation.include:
      case schemeReference.evaluationOption.aggregation.exclude:
        return true;
        break;
      case schemeReference.evaluationOption.aggregation.skip:
        return false;
        break;
      default:
        throw new Error(`• Unknown option for 'evaluator.aggregation' = ${this.evaluation.aggregation}.`);
        break;}

  }}exports.TraverserPosition = TraverserPosition;TraverserPosition.defaultEvaluationHierarchyKey = { propagation: schemeReference.evaluationOption.propagation.continue, aggregation: schemeReference.evaluationOption.aggregation.include };TraverserPosition.defaultTraversalImplementationKey = { processNode: 'returnDataItemKey', portNode: 'nestedNode', aggregator: 'AggregatorArray', traversalInterception: 'processThenTraverse', [schemeReference.nodeLabel.reroute]: 'traverseReference', [schemeReference.nodeLabel.stage]: 'stageNode' };TraverserPosition.entrypointNodeImplementation = { [schemeReference.nodeLabel.reroute]: rerouteNode, [schemeReference.nodeLabel.stage]: stageNode };TraverserPosition.entrypointNodeArray = [schemeReference.nodeLabel.reroute, schemeReference.nodeLabel.stage];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,