"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });var _exportNames = { traverse: true, invokeNextTraversalPromise: true, traverserInstruction: true };exports.invokeNextTraversalPromise = invokeNextTraversalPromise;exports.traverserInstruction = exports.traverse = void 0;var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));var _proxifyMethodDecorator = require("../../utility/proxifyMethodDecorator.js");
var _handleJSNativeDataStructure = require("@dependency/handleJSNativeDataStructure");

var _TraverserPositionClass = require("./TraverserPosition.class.js");


var _iteration = require("./method/iteration.js");Object.keys(_iteration).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _iteration[key];} });});
var _stageNode = require("./method/stageNode.js");Object.keys(_stageNode).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _stageNode[key];} });});
var _rerouteNode = require("./method/rerouteNode.js");Object.keys(_rerouteNode).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _rerouteNode[key];} });});
var _forkEdge = require("./method/forkEdge.js");Object.keys(_forkEdge).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _forkEdge[key];} });});
var _executeEdge = require("./method/executeEdge.js");Object.keys(_executeEdge).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _executeEdge[key];} });});var _traverserInstruction = _interopRequireWildcard(require("./method/traverserInstruction"));exports.traverserInstruction = _traverserInstruction;var _dec, _obj;







const { traverse } = (_dec =


(0, _proxifyMethodDecorator.proxifyMethodDecorator)(async (target, thisArg, argumentsList, targetClass, methodName) => {var _argumentsList$;

  let { nodeInstance, nodeKey, nodeID, traverserPosition } = argumentsList[0];
  if (!nodeInstance) {var _context;
    if (nodeKey) nodeInstance = await (_context = thisArg.graph.database, thisArg.graph.database.implementation.getNodeByKey).call(_context, { key: nodeKey });else

      if (nodeID) nodeInstance = await (_context = thisArg.graph.database, thisArg.graph.database.implementation.getNodeByID).call(_context, { id: nodeID });else

        if (traverserPosition) nodeInstance = traverserPosition.node;else

          throw new Error('â€¢ node identifier or object must be passed in.');
    ['nodeKey', 'nodeID'].forEach(property => delete argumentsList[0][property]);
  }

  nodeInstance.entrypointNodeType = _TraverserPositionClass.TraverserPosition.getEntrypointNodeType({ node: nodeInstance });

  (_argumentsList$ = argumentsList[0]).nodeInstance || (_argumentsList$.nodeInstance = nodeInstance);
  return Reflect.apply(target, thisArg, argumentsList);
}), (_obj = {
  async traverse(
  {
    nodeInstance,
    implementationKey,
    evaluation,
    additionalChildNode,

    traverserPosition },

  { parentTraverserPosition, traverseCallContext } = {})
  {
    this.statistics.traversedNodeList.push(nodeInstance);


    traverserPosition || (traverserPosition = new _TraverserPositionClass.TraverserPosition({ traverser: this, node: nodeInstance, parentTraverserPosition }));

    if (implementationKey) {var _implementationKey;
      traverserPosition.setImplementationHierarchy('parameter', (_implementationKey = implementationKey, (0, _handleJSNativeDataStructure.removeUndefinedFromObject)(_implementationKey)));



    }


    if (evaluation) {
      traverserPosition.setEvaluationHierarchy('parameter', evaluation);

      delete arguments[0].evaluation;
    }


    let { implementationConfiguration, evaluationConfiguration } = await this.traverserInstruction.configurationEvaluation.resolveEvaluationConfiguration.call(this, {
      targetNode: traverserPosition.node });

    traverserPosition.setImplementationHierarchy('configuration', implementationConfiguration);
    traverserPosition.setEvaluationHierarchy('configuration', evaluationConfiguration);


    traverserPosition.initialize();

    let entrypointNodeImplementation = traverserPosition.getEntrypointNodeImplementation();
    return await entrypointNodeImplementation.call(this, { traverserPosition, additionalChildNode }, { traverseCallContext });
  } }, ((0, _applyDecoratedDescriptor2.default)(_obj, "traverse", [_dec], Object.getOwnPropertyDescriptor(_obj, "traverse"), _obj)), _obj));exports.traverse = traverse;



async function invokeNextTraversalPromise() {
  if (this.iteratorObjectList.length == 0) return;

  let iteratorObject;
  do {
    if (this.iteratorObjectList.length == 0) return;
    let iterator = this.iteratorObjectList[this.iteratorObjectList.length - 1];
    iteratorObject = await iterator.next();
    if (iteratorObject.done) this.iteratorObjectList.pop();
  } while (iteratorObject.done);

  let traversalPromise = iteratorObject.value.traversalInvocation();
  return { traversalPromise, node: iteratorObject.value.node };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,