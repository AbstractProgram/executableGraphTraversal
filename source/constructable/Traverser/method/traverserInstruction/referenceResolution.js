"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.resolveReference = resolveReference;exports.selectionReferenceResolution = selectionReferenceResolution;exports.conditionSwitchResolution = conditionSwitchResolution;var _underscore = _interopRequireDefault(require("underscore"));

const emptyStageNode = {
  identity: -1,
  labels: ['Stage'],
  properties: {
    key: null } };




async function resolveReference({ targetNode, traverseCallContext, traverser = this }) {var _context;
  const { reference } = await (_context = traverser.graph.database, traverser.graph.database.getReferenceResolutionElement).call(_context, { nodeID: targetNode.identity });
  if (!reference) return;


  if (traverser.graph.database.isSelfEdge(reference)) {

    let labelIndex = reference.destination.labels.indexOf(targetNode.entrypointNodeType);
    reference.destination.labels[labelIndex] += `-ignore`;
  }

  let resolvedNode;
  switch (reference.connection.properties.resolutionImplementation) {
    case 'selection':
      resolvedNode = await traverser.traverserInstruction.referenceResolution.selectionReferenceResolution.call(traverser, { targetNode: reference.destination, traverseCallContext });
      break;
    case 'node':
    default:
      resolvedNode = reference.destination;
      break;}


  return resolvedNode;
}





async function selectionReferenceResolution({ targetNode, traverseCallContext, traverser = this }) {var _context2;
  let resolvedReferenceNode;
  const { selectArray, fallback: fallbackRelationship } = await (_context2 = traverser.graph.database, traverser.graph.database.getSelectionElement).call(_context2, {
    nodeID: targetNode.identity });


  if (selectArray) {
    selectArray.sort(
    (former, latter) => former.connection.properties.order - latter.connection.properties.order || isNaN(former.connection.properties.order) - isNaN(latter.connection.properties.order));




    let index = 0;
    while (selectArray.length > index && !resolvedReferenceNode) {
      resolvedReferenceNode = await traverser.traverserInstruction.referenceResolution.conditionSwitchResolution.call(traverser, { targetNode: selectArray[index].destination, traverseCallContext });
      index++;
    }
  }


  resolvedReferenceNode || (resolvedReferenceNode = (fallbackRelationship === null || fallbackRelationship === void 0 ? void 0 : fallbackRelationship.destination) || emptyStageNode);
  return resolvedReferenceNode;
}





async function conditionSwitchResolution({ targetNode, traverseCallContext, traverser = this }) {var _context3;
  let matchingNode;
  const { caseArray } = await (_context3 = traverser.graph.database, traverser.graph.database.getConditionSwitchElement).call(_context3, { nodeID: targetNode.identity });
  let value = await traverser.traverserInstruction.valueResolution.resolveValue.call(traverser, { targetNode: targetNode, traverseCallContext, allowSelfEdge: true });


  if (caseArray) {

    let caseRelationship = caseArray.filter(caseRelationship => {var _caseRelationship$con, _caseRelationship$con2, _caseRelationship$con3;

      if (Array.isArray((_caseRelationship$con = caseRelationship.connection.properties) === null || _caseRelationship$con === void 0 ? void 0 : _caseRelationship$con.expected)) return _underscore.default.isEqual((_caseRelationship$con2 = caseRelationship.connection.properties) === null || _caseRelationship$con2 === void 0 ? void 0 : _caseRelationship$con2.expected, value);
      return ((_caseRelationship$con3 = caseRelationship.connection.properties) === null || _caseRelationship$con3 === void 0 ? void 0 : _caseRelationship$con3.expected) == value;
    })[0];
    matchingNode = caseRelationship === null || caseRelationship === void 0 ? void 0 : caseRelationship.destination;
  }
  return matchingNode || null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,