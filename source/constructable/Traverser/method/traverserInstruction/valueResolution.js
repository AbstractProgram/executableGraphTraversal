"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.resolveValue = resolveValue;exports.conditionSubgraphValueResolution = conditionSubgraphValueResolution;exports.conditionSubgraphWithNonBooleanValueResolution = conditionSubgraphWithNonBooleanValueResolution;var _assert = _interopRequireDefault(require("assert"));



async function resolveValue({ targetNode, traverseCallContext, allowSelfEdge = false, traverser = this }) {var _context;
  const value = await (_context = traverser.graph.database, traverser.graph.database.getValueElement).call(_context, { nodeID: targetNode.identity });
  if (!value) return;

  let resolvedValue;

  switch (value.connection.properties.implementation) {

    case 'conditionSubgraph':
      if (!allowSelfEdge)
      (0, _assert.default)(!traverser.graph.database.isSelfEdge(value), `â€¢ Self-edge for VALUE connection with "conditionSubgraph" implementation, currently not supported, as it causes infinite loop.`);
      resolvedValue = await traverser.traverserInstruction.valueResolution.conditionSubgraphValueResolution.call(traverser, { value, traverseCallContext });
      break;
    case 'properties':
      resolvedValue = value.source.properties;
      break;
    case 'node':
      resolvedValue = value.source;
      break;
    case 'valueProperty':
    default:
      resolvedValue = value.source.properties.value;
      break;}

  return resolvedValue;
}













async function conditionSubgraphValueResolution({ value, traverseCallContext, traverser = this }) {
  let resolvedValue;


  let resultValueArray = await traverser.traverse.call(traverser,





  {
    nodeInstance: value.source,
    implementationKey: {
      processNode: 'executeFunctionReference',
      traversalInterception: 'traverseThenProcessWithLogicalOperator',
      aggregator: 'ConditionAggregator' } },


  {
    traverseCallContext: {
      targetNode: traverseCallContext && traverseCallContext.targetNode || value.destination } });




  if (resultValueArray.length > 1) resolvedValue = resultValueArray.every(item => Boolean(item));else
  if (resultValueArray.length != 0) resolvedValue = resultValueArray[0];
  return resolvedValue;
}


async function conditionSubgraphWithNonBooleanValueResolution({ value, graph, traverseCallContext }) {}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,