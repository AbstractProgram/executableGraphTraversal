"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.traversalIteration = traversalIteration;exports.traverseIterationRecursiveCall = traverseIterationRecursiveCall;exports.traverseGroupIterationRecursiveCall = traverseGroupIterationRecursiveCall;var _handleEventLoop = require("@dependency/handleEventLoop");












async function* traversalIteration({ nodeIteratorFeed, nestedTraversalCallParameter, traverser = this }) {
  let iteratorObject = await nodeIteratorFeed.next();
  while (!iteratorObject.done) {
    yield {
      node: iteratorObject.value.node,

      traversalInvocation: (nextFunction) =>
      traverser.traverse.call(traverser,
      { nodeInstance: iteratorObject.value.node, additionalChildNode: nestedTraversalCallParameter.additionalChildNode },
      { parentTraverserPosition: nestedTraversalCallParameter.traverserPosition, traverseCallContext: nestedTraversalCallParameter.traverseCallContext }) };


    iteratorObject = await nodeIteratorFeed.next();
  }
}









async function* traverseIterationRecursiveCall({ traversalIterator, traverser = this }) {

  let iteratorObject = await traversalIterator.next();

  while (!iteratorObject.done) {
    let traversalPromise = iteratorObject.value.traversalInvocation();
    yield { traversalPromise };
    iteratorObject = await traversalIterator.next();
  }
}







async function* traverseGroupIterationRecursiveCall({
  groupIterator,
  additionalChildNode,
  traverseCallContext,






  traverserPosition,
  processDataCallback })
{


  for await (let { group } of groupIterator) {
    let handlePropagationImplementation = handlePropagation[group.config.handlePropagationImplementationKey || 'chronological'];





    let invokedPromiseIterator = await this.traverseIterationRecursiveCall.call(this, { traversalIterator: group.traversalIterator });
    let traversalResult = await handlePropagationImplementation({ invokedPromiseIterator, emit: traverserPosition.emitCompletedTraversal });

    yield {
      group: {
        result: traversalResult,
        config: {
          portNode: group.config.forkEdge.destination } } };



  }
}













const handlePropagation = {





  chronological: async function ({ invokedPromiseIterator, emit }) {
    let nodeResultList = [];
    for await (let { traversalPromise } of invokedPromiseIterator) {
      let nextResult = await traversalPromise;
      emit(nextResult);
      nodeResultList.push(nextResult);
    }
    return nodeResultList;
  },

  chronological_implementationUsingWhileLoop: async function ({ invokedPromiseIterator, emit }) {
    let nodeResultList = [];

    let iteratorObject = await invokedPromiseIterator.next();
    while (!iteratorObject.done) {
      let nextResult = await iteratorObject.value.traversalPromise;
      emit(nextResult);
      nodeResultList.push(nextResult);
      iteratorObject = await invokedPromiseIterator.next();
    }

    return nodeResultList;
  },




  raceFirstPromise: async function ({ invokedPromiseIterator, emit }) {
    let traversalPromiseArray = [];

    let iteratorObject = await invokedPromiseIterator.next();
    while (!iteratorObject.done) {
      let traversalPromise = iteratorObject.value.traversalPromise;
      traversalPromiseArray.push(traversalPromise);
      iteratorObject = await invokedPromiseIterator.next();
    }

    let nodeResolvedResult = await (0, _handleEventLoop.promiseProperRace)(traversalPromiseArray).
    then(resolvedPromiseArray => {
      return resolvedPromiseArray[0];
    }).
    catch(error => {

      console.error(`üîÄ‚ö†Ô∏è promiseProperRace rejected because: ${error}`);
    });

    if (nodeResolvedResult) {
      emit(nodeResolvedResult);
      return [nodeResolvedResult];
    } else return [];
  },




  allPromise: async function ({ invokedPromiseIterator, emit }) {
    let traversalPromiseArray = [];
    let resolvedOrderedNodeResolvedResult = [];

    let iteratorObject = await invokedPromiseIterator.next();
    while (!iteratorObject.done) {
      let traversalPromise = iteratorObject.value.traversalPromise.then(result => {
        emit(result);
        resolvedOrderedNodeResolvedResult.push(result);
      });
      traversalPromiseArray.push(traversalPromise);
      iteratorObject = await invokedPromiseIterator.next();
    }


    let promiseResolvedResultArray = await Promise.all(traversalPromiseArray).catch(error => {
      if (process.env.SZN_DEBUG == 'true') console.error(`üîÄ‚ö†Ô∏è \`Promise.all\` for nodeConnectionArray rejected because: ${error}`);else
      console.log(error);
    });


    return resolvedOrderedNodeResolvedResult;





  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,