"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.GraphControllerFunction = GraphControllerFunction;var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));
var _events = _interopRequireDefault(require("events"));
var _assert = _interopRequireDefault(require("assert"));
var _classMixin = require("@dependency/classMixin");
var _createInstanceStaticMethod = _interopRequireDefault(require("../utility/createInstanceStaticMethod.js"));
var _addStaticSubclassToClassArray = _interopRequireDefault(require("@dependency/commonPattern/source/addStaticSubclassToClassArray.staticMethod"));
var _prototypeChainDebug = require("@dependency/prototypeChainDebug");
var _decoratorUtility = require("@dependency/commonPattern/source/decoratorUtility.js");
var _extendedSubclassPattern = require("@dependency/commonPattern/source/extendedSubclassPattern.js");
var _superclassInstanceContextPattern = require("@dependency/commonPattern/source/superclassInstanceContextPattern.js");

function GraphControllerFunction({
  Superclass = _events.default,
  methodInstanceName,
  mixin } =

{}) {var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2;






  let self = (_dec =
  (0, _decoratorUtility.add)({ to: 'static' }, {
    createInstance: _createInstanceStaticMethod.default,
    addStaticSubclassToClassArray: _addStaticSubclassToClassArray.default }), _dec2 =

  (0, _decoratorUtility.conditional)({ decorator: _prototypeChainDebug.classDecorator, condition: process.env.SZN_DEBUG }), _dec3 =

  _extendedSubclassPattern.extendedSubclassPattern.Superclass(), _dec4 =

  (0, _decoratorUtility.conditional)({ decorator: _extendedSubclassPattern.extendedSubclassPattern.Subclass(), condition: methodInstanceName && Superclass && Superclass.addSubclass != undefined }), _dec5 =
  (0, _decoratorUtility.conditional)({ condition: mixin, decorator: (0, _classMixin.decorator)({ mixin }) }), _dec6 =

  (0, _superclassInstanceContextPattern.superclassInstanceContextPattern)(), _dec7 =































































































  (0, _superclassInstanceContextPattern.cacheInstance)({
    cacheArrayName: 'dataItem',
    keyArgumentName: 'dataItemKey' }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = _dec6(_class = (_class2 = class GraphController extends Superclass {ownConstructor({ additionalDelegatedChain = {} }) {additionalDelegatedChain.plugin;additionalDelegatedChain.context;additionalDelegatedChain.cache;return proxiedInterface;}constructor({}) {super();return this;}interceptMethod({ thisArg, implementationType, nodeInstance, argumentsList, methodName }) {let implementationFunction = this.getPlugin({ plugin: 'graphTraversalImplementation', implementation: implementationType });let implementationObject = implementationFunction({ thisArg: nodeInstance });return implementationObject[methodName].apply(thisArg, argumentsList);}async traverseGraph({ nodeKey }) {}static async traverseGraph({ nodeKey }) {(0, _assert.default)(nodeKey, `• ${nodeKey} Key should be present. The passed value is either undefined, null, or empty string.`);let nodeInstance = await this.createNodeInstance({ nodeKey });return await nodeInstance.traverseGraph(arguments);}async initializeDataItem({ dataItemKey }) {(0, _assert.default)(dataItemKey, `• Missing "dataItem key" - for dataItemType "reference" a key must exist in "node.dataItem".`);let dataItemInstance = await this.createDataItemInstance({ dataItemKey });await dataItemInstance.initializeDataItem(arguments);return dataItemInstance;}async createNodeInstance({ nodeKey, additionalChildNestedUnit = [], nodeConnectionKey = null }) {let nodeSubclass = this.getSubclass({ subclassName: 'ImplementationNode' }) || this.getSubclass({ subclassName: 'Node' });return await self.createNodeInstance({ nodeKey, additionalChildNestedUnit, nodeConnectionKey, nodeSubclass });}static async createNodeInstance({ nodeKey, additionalChildNestedUnit = [], nodeConnectionKey = null, nodeSubclass }) {console.log(new nodeSubclass());let instance = await Reflect.construct(nodeSubclass, [nodeKey]);return instance;}async

    createDataItemInstance({ dataItemKey }) {
      let dataItemSubclass = this.getSubclass({ subclassName: 'ImplementationDataItem' }) || this.getSubclass({ subclassName: 'DataItem' });
      return await self.createDataItemInstance({ dataItemKey, dataItemSubclass });
    }
    static async createDataItemInstance({ dataItemKey, dataItemSubclass }) {

      let instance = await Reflect.construct(dataItemSubclass, [dataItemKey]);


      if (!('jsonData' in instance)) {
        let getDocumentQuery = instance.constructor.getDocumentQuery;
        let jsonData = await getDocumentQuery({ key: dataItemKey });
        (0, _assert.default)(jsonData, `• "${dataItemKey}" nestedUnit document must be present in the database, the requested key does not exist in database. The passed value is either undefined, null, or empty string.`);
        await instance.populateInstancePropertyFromJson_this({ jsonData });
      }

      return instance;
    }}, ((0, _applyDecoratedDescriptor2.default)(_class2.prototype, "createDataItemInstance", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "createDataItemInstance"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class) || _class) || _class);




  return self;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,