"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.clientInterface = exports.$ = exports.class = void 0;var _multiplePrototypeDelegation = require("@dependency/multiplePrototypeDelegation");
var _entity = require("@dependency/entity");

var Database = _interopRequireWildcard(require("../Database"));
var Context = _interopRequireWildcard(require("../Context.class.js"));

var implementation = _interopRequireWildcard(require("@dependency/graphTraversal-implementation"));var _instancePrototype, _instancePrototype2;
let defaultImplementationParameter = {
  implementationList: {
    default: {
      traversalInterception: implementation.traversal.traversalInterception,
      aggregator: implementation.traversal.aggregator,
      processNode: implementation.traversal.processNode,
      portNode: implementation.traversal.portNode } },


  defaultImplementation: 'default' };










const { class: Class, reference: $ } = new _entity.Entity.clientInterface.constructableInstance({ label: 'Graph' });exports.$ = $;exports.class = Class;

Object.assign($, {
  key: {} });


_instancePrototype = Class[$.prototypeDelegation.getter].call(Class, _entity.Entity.$.key.stateInstance).instancePrototype, Object.assign(_instancePrototype, require('./prototype.js'));

_instancePrototype2 = Class[$.prototypeDelegation.getter].call(Class, _entity.Constructable.$.key.constructableInstance).instancePrototype, (
prototype => {
  prototype[_entity.Entity.$.initialize.setter].call(prototype, {
    [_entity.Entity.$.key.concereteBehavior]({ targetInstance }, { concereteBehaviorList } = {}) {} });


  prototype[_entity.Entity.$.constructor.setter].call(prototype, {















    [_entity.Entity.$.key.stateInstance](
    {},
    {


      database = new Database.clientInterface({
        implementationList: {
          boltCypher: implementation.database.boltCypherModelAdapterFunction({}) },

        defaultImplementation: 'boltCypher' }),

      configuredTraverser,

      concreteBehaviorList = [],
      callerClass = this,
      mode = 'applicationInMemory' || 'databaseInMemory' } =





    {})
    {
      let instance = callerClass[_entity.Entity.$.constructor.switch].call(callerClass, _entity.Entity.$.key.concereteBehavior)(
      {},
      {
        concreteBehaviorList: [...concreteBehaviorList, database] });




      instance.database = database;





      if (configuredTraverser)
      configuredTraverser = configuredTraverser.clientInterface({
        parameter: [defaultImplementationParameter] });



      instance.configuredTraverser = configuredTraverser.clientInterface({ parameter: [{ graph: instance }] });


      if (!configuredTraverser.class[_entity.Entity.$.parameter][0].implementationList) Object.assing(configuredTraverser.class[_entity.Entity.$.parameter][0], defaultImplementationParameter);






      let instanceList = instance[_entity.Entity.$.getInstanceOf](Context.class, { recursive: true });
      if (instanceList.length > 0) {
        let { proxy } = new _multiplePrototypeDelegation.MultipleDelegation(instanceList);
        instance.context = proxy;
      }

      instance.statistics = {
        traverserArray: [] };


      return instance;
    } });

})(_instancePrototype2);

const clientInterface = Class[_entity.Entity.$.clientInterface.switch].call(Class, _entity.Entity.$.key.stateInstance)({ constructorImplementation: _entity.Entity.$.key.stateInstance });exports.clientInterface = clientInterface;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,