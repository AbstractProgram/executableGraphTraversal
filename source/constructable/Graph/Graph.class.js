"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.initialEntityPrototype = exports.Prototype = exports.Reference = exports.Graph = void 0;var _entity = require("@dependency/entity");
var _TraversalClass = require("../Traversal.class.js");
var _DatabaseClass = require("../Database.class.js");
var _ContextClass = require("../Context.class.js");
var _ImplementationManagementClass = require("../ImplementationManagement.class.js");
var entityPrototype = _interopRequireWildcard(require("./prototype.js"));
var implementation = _interopRequireWildcard(require("@dependency/graphTraversal-implementation"));
var schemeReference = _interopRequireWildcard(require("../../graphModel/graphSchemeReference.js"));












const { class: Graph, reference: Reference, constructablePrototype: Prototype, entityPrototype: initialEntityPrototype } = new _entity.Entity.clientInterface({ description: 'Graph' });exports.initialEntityPrototype = initialEntityPrototype;exports.Prototype = Prototype;exports.Reference = Reference;exports.Graph = Graph;

Object.assign(Reference, {
  key: {
    constructor: Symbol('Graph:key.constructor') } });











Object.assign(initialEntityPrototype, entityPrototype);








Prototype[_entity.Constructable.reference.initialize.functionality].setter.call(Prototype, {
  [_entity.Entity.reference.key.concereteBehavior]({ targetInstance, concereteBehaviorList } = {}, previousResult) {} });









Prototype[_entity.Constructable.reference.constructor.functionality].setter.call(Prototype, {







  [Reference.key.constructor]({


    database,
    traversal,

    concreteBehaviorList = [],
    data,
    callerClass = this,
    mode = 'applicationInMemory' || 'databaseInMemory' })





  {
    database || (database = new _DatabaseClass.Database.clientInterface({
      implementationList: {
        boltCypher: implementation.database.boltCypherModelAdapterFunction({ schemeReference }) },

      defaultImplementation: 'boltCypher' }));

    traversal || (traversal = new _TraversalClass.Traversal.clientInterface({
      implementationList: {
        default: {
          traverseNode: implementation.traversal.traverseNode,
          handlePropagation: implementation.traversal.handlePropagation,
          traversalInterception: implementation.traversal.traversalInterception,
          aggregator: implementation.traversal.aggregator,
          processData: implementation.traversal.processData } },


      defaultImplementation: 'default' }));




    let instance = _entity.Constructable[_entity.Constructable.reference.constructor.functionality].switch.call(callerClass, { implementationKey: _entity.Entity.reference.key.concereteBehavior })({
      concreteBehaviorList: [...concreteBehaviorList, database, traversal],
      data });


    let concereteDatabase = instance[_entity.Entity.reference.getInstanceOf](_DatabaseClass.Database);
    instance.database = concereteDatabase[_DatabaseClass.Database.reference.key.getter]();
    let concreteTraversal = instance[_entity.Entity.reference.getInstanceOf](_TraversalClass.Traversal);
    instance.traversal = concreteTraversal[_ImplementationManagementClass.ImplementationManagement.reference.key.getter]();
    let context = instance[_entity.Entity.reference.getInstanceOf](_ContextClass.Context);
    instance.context = context ? context[_ContextClass.Context.reference.key.getter]() : {};





    return instance;
  } });









Graph.clientInterface = Prototype[_entity.Constructable.reference.clientInterface.functionality].switch.call(Graph, {
  implementationKey: _entity.Entity.reference.key.instanceDelegatingToEntityInstancePrototype })(
{
  constructorImplementation: Reference.key.constructor,
  clientInterfaceInterceptCallback: false });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,