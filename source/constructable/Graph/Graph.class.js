"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.clientInterface = exports.$ = exports.class = void 0;var _multiplePrototypeDelegation = require("@dependency/multiplePrototypeDelegation");
var _entity = require("@dependency/entity");
var Traversal = _interopRequireWildcard(require("../Traversal.class.js"));
var Database = _interopRequireWildcard(require("../Database.class.js"));
var Context = _interopRequireWildcard(require("../Context.class.js"));
var ImplementationManagement = _interopRequireWildcard(require("../ImplementationManagement.class.js"));

var implementation = _interopRequireWildcard(require("@dependency/graphTraversal-implementation"));
var schemeReference = _interopRequireWildcard(require("../../dataModel/graphSchemeReference.js"));var _instancePrototype, _instancePrototype2;









const { class: Class, reference: $ } = new _entity.Entity.clientInterface.constructableInstance({ label: 'Graph' });exports.$ = $;exports.class = Class;

Object.assign($, {
  key: {} });


_instancePrototype = Class[$.prototypeDelegation.getter].call(Class, _entity.Entity.$.key.stateInstance).instancePrototype, Object.assign(_instancePrototype, require('./prototype.js'));

_instancePrototype2 = Class[$.prototypeDelegation.getter].call(Class, _entity.Constructable.$.key.constructableInstance).instancePrototype, (
prototype => {
  prototype[_entity.Entity.$.initialize.setter].call(prototype, {
    [_entity.Entity.$.key.concereteBehavior]({ targetInstance }, { concereteBehaviorList } = {}) {} });


  prototype[_entity.Entity.$.constructor.setter].call(prototype, {















    [_entity.Entity.$.key.stateInstance](
    {},
    {


      database,
      traversal,

      concreteBehaviorList = [],
      data,
      callerClass = this,
      mode = 'applicationInMemory' || 'databaseInMemory' } =





    {})
    {
      database || (database = new Database.clientInterface({
        implementationList: {
          boltCypher: implementation.database.boltCypherModelAdapterFunction({ schemeReference }) },

        defaultImplementation: 'boltCypher' }));


      traversal || (traversal = new Traversal.clientInterface({
        implementationList: {
          default: {
            traversalInterception: implementation.traversal.traversalInterception,
            aggregator: implementation.traversal.aggregator,
            processNode: implementation.traversal.processNode,
            portNode: implementation.traversal.portNode } },


        defaultImplementation: 'default' }));


      let instance = callerClass[_entity.Entity.$.constructor.switch].call(callerClass, _entity.Entity.$.key.concereteBehavior)(
      {},
      {
        concreteBehaviorList: [...concreteBehaviorList, database, traversal] });





      let concereteDatabase = instance[_entity.Entity.$.getInstanceOf](Database.class);
      instance.database = concereteDatabase[Database.$.key.getter]();

      let concreteTraversal = instance[_entity.Entity.$.getInstanceOf](Traversal.class);
      instance.traversal = concreteTraversal[ImplementationManagement.$.key.getter]();






      let instanceList = instance[_entity.Entity.$.getInstanceOf](Context.class, { recursive: true });
      let { proxy } = new _multiplePrototypeDelegation.MultipleDelegation(instanceList);
      instance.context = proxy;

      return instance;
    } });

})(_instancePrototype2);

const clientInterface = Class[_entity.Entity.$.clientInterface.switch].call(Class, _entity.Entity.$.key.stateInstance)({ constructorImplementation: _entity.Entity.$.key.stateInstance });exports.clientInterface = clientInterface;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,