"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.recursiveIteration = recursiveIteration;exports.stageNode = void 0;var _events = _interopRequireDefault(require("events"));






const { stageNode } = {

















  async stageNode(
  {
    graphInstance = this,
    nodeInstance,
    traversalConfig,
    traversalDepth = 0,
    path = null,
    additionalChildNode = [],

    eventEmitter = new _events.default(),
    aggregator } =
  {},
  { parentTraversalArg = null, traverseCallContext = {} } = {})
  {var _ref;
    let { implementation } = traversalConfig.calculateConfig({ graphInstance });

    aggregator || (aggregator = new (implementation.aggregator.bind(nodeInstance))());





    const forkIteratorCallback = () =>
    graphInstance.forkEdge.call(graphInstance, { stageNode: nodeInstance, getImplementation: traversalConfig.getImplementationCallback({ key: 'portNode', graphInstance }), additionalChildNode });


    const processDataCallback = ({ nextProcessData, additionalParameter }) =>
    graphInstance.executeEdge.call(graphInstance,
    { stageNode: nodeInstance, nextProcessData, traversalConfig, aggregator, getImplementation: traversalConfig.getImplementationCallback({ key: 'processNode', graphInstance }), graphInstance },
    { additionalParameter, traverseCallContext });



    let traversalInterceptionImplementation = implementation.traversalInterception || (targetFunction => new Proxy(targetFunction, {}));
    let proxifiedRecursiveIteration = (_ref = graphInstance.recursiveIteration.bind(graphInstance), traversalInterceptionImplementation.call(graphInstance, _ref));
    let result = await proxifiedRecursiveIteration({
      forkIteratorCallback,
      processDataCallback,
      aggregator,
      nodeInstance,
      traversalDepth,
      eventEmitter,
      traversalConfig,
      additionalChildNode,
      parentTraversalArg: arguments,
      traverseCallContext });


    return result;
  } };exports.stageNode = stageNode;







async function* recursiveIteration({
  forkIteratorCallback,
  processDataCallback,
  aggregator,
  graphInstance = this,
  recursiveCallback = graphInstance.traverse.bind(graphInstance),
  traversalDepth,
  eventEmitter,
  traversalConfig,
  additionalChildNode,
  parentTraversalArg,
  traverseCallContext })


{
  if (!traversalConfig.shouldContinue()) return;
  let traversalIteratorFeed = forkIteratorCallback();
  let eventEmitterCallback = (...args) => eventEmitter.emit('nodeTraversalCompleted', ...args);
  traversalDepth += 1;
  for await (let traversalIteration of traversalIteratorFeed) {
    let n = { iterator: traversalIteration.nextIterator, result: await traversalIteration.nextIterator.next({ eventEmitterCallback: eventEmitterCallback }) };
    while (!n.result.done) {
      let nextNode = n.result.value.node;

      let nextCallArgument = [Object.assign({ nodeInstance: nextNode, traversalDepth, additionalChildNode }), { parentTraversalArg, traverseCallContext }];
      let promise = recursiveCallback(...nextCallArgument);
      n.result = await n.iterator.next({ promise });
    }

    yield {
      config: {
        port: traversalIteration.fork.destination },

      result: n.result.value };

  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,