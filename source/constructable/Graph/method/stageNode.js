"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.stageNode = void 0;var _events = _interopRequireDefault(require("events"));







const { stageNode } = {



















  async stageNode(
  {
    graphInstance = this,
    nodeInstance,
    traversalConfig,
    traversalDepth = 0,
    path = null,
    additionalChildNode = [],

    eventEmitter = new _events.default(),
    aggregator } =
  {},
  { parentTraversalArg = null, traverseCallContext = {} } = {})
  {var _ref;
    let { implementation } = traversalConfig.calculateConfig({ graphInstance });
    let traversalInterceptionImplementation = implementation.traversalInterception || (targetFunction => new Proxy(targetFunction, {}));
    aggregator || (aggregator = new (implementation.aggregator.bind(nodeInstance))());


    const processDataCallback = ({ nextProcessData, additionalParameter }) =>
    graphInstance.executeEdge.call(graphInstance,
    {
      stageNode: nodeInstance,
      nextProcessData,
      traversalConfig,
      aggregator,
      getImplementation: (implementationKey) =>
      traversalConfig.getImplementationCallback({ key: 'processNode', graphInstance })({
        nodeImplementationKey: implementationKey ? { processNode: implementationKey } : undefined }),

      graphInstance },

    { additionalParameter, traverseCallContext });






    let groupIterator = graphInstance.forkEdge.call(graphInstance, {
      stageNode: nodeInstance,
      getImplementation: (implementationKey) =>
      traversalConfig.getImplementationCallback({ key: 'portNode', graphInstance })({ nodeImplementationKey: implementationKey ? { portNode: implementationKey } : undefined }),
      additionalChildNode });



    let proxifiedRecursiveIteration = (_ref = graphInstance.traverseGroupIterationRecursiveCall.bind(graphInstance), traversalInterceptionImplementation.call(graphInstance, _ref));
    let result = await proxifiedRecursiveIteration({
      groupIterator,
      processDataCallback,
      aggregator,
      nodeInstance,
      traversalDepth,
      eventEmitter,
      traversalConfig,
      additionalChildNode,
      parentTraversalArg: arguments,
      traverseCallContext });


    return result;
  } };exports.stageNode = stageNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,