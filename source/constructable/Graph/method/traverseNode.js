"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.traverseNode = traverseNode;var _assert = _interopRequireDefault(require("assert"));





async function* traverseNode({ node, additionalChildNode, implementation, handlePropagationImplementation, graphInstance = this }) {
  let traversalIteratorFeed = await implementation.call(node, { node, additionalChildNode, graphInstance });
  async function* trapAsyncIterator(iterator) {
    for await (let traversalIteration of iterator) {
      let _handlePropagationImplementation;
      if (traversalIteration.traversalConfig.handlePropagationImplementation) {
        _handlePropagationImplementation = graphInstance.traversal.handlePropagation[traversalIteration.traversalConfig.handlePropagationImplementation];
        (0, _assert.default)(_handlePropagationImplementation, `â€¢ "${traversalIteration.traversalConfig.handlePropagationImplementation}" implementation isn't registered in traversal concrete instance.`);
      } else _handlePropagationImplementation = handlePropagationImplementation;
      let nextIterator = graphInstance.handlePropagation.call(graphInstance, { nodeIteratorFeed: traversalIteration.nextIterator, implementation: _handlePropagationImplementation.bind(node) });
      yield { nextIterator, fork: traversalIteration.fork };
    }
  }
  yield* trapAsyncIterator(traversalIteratorFeed);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC90cmF2ZXJzZU5vZGUuanMiXSwibmFtZXMiOlsidHJhdmVyc2VOb2RlIiwibm9kZSIsImFkZGl0aW9uYWxDaGlsZE5vZGUiLCJpbXBsZW1lbnRhdGlvbiIsImhhbmRsZVByb3BhZ2F0aW9uSW1wbGVtZW50YXRpb24iLCJncmFwaEluc3RhbmNlIiwidHJhdmVyc2FsSXRlcmF0b3JGZWVkIiwidHJhcEFzeW5jSXRlcmF0b3IiLCJpdGVyYXRvciIsInRyYXZlcnNhbEl0ZXJhdGlvbiIsIl9oYW5kbGVQcm9wYWdhdGlvbkltcGxlbWVudGF0aW9uIiwidHJhdmVyc2FsQ29uZmlnIiwidHJhdmVyc2FsIiwiaGFuZGxlUHJvcGFnYXRpb24iLCJuZXh0SXRlcmF0b3IiLCJub2RlSXRlcmF0b3JGZWVkIiwiZm9yayJdLCJtYXBwaW5ncyI6Im9NQUFBOzs7Ozs7QUFNTyxnQkFBZ0JBLFlBQWhCLENBQTZCLEVBQUVDLElBQUYsRUFBUUMsbUJBQVIsRUFBNkJDLGNBQTdCLEVBQTZDQywrQkFBN0MsRUFBOEVDLGFBQWEsR0FBRyxJQUE5RixFQUE3QixFQUFtSTtBQUN4SSxNQUFJQyxxQkFBcUIsR0FBRyxNQUFZSCxjQUFOLE1BQUFGLElBQUksRUFBaUIsRUFBRUEsSUFBRixFQUFRQyxtQkFBUixFQUE2QkcsYUFBN0IsRUFBakIsQ0FBdEM7QUFDQSxrQkFBZ0JFLGlCQUFoQixDQUFrQ0MsUUFBbEMsRUFBNEM7QUFDMUMsZUFBVyxJQUFJQyxrQkFBZixJQUFxQ0QsUUFBckMsRUFBK0M7QUFDN0MsVUFBSUUsZ0NBQUo7QUFDQSxVQUFJRCxrQkFBa0IsQ0FBQ0UsZUFBbkIsQ0FBbUNQLCtCQUF2QyxFQUF3RTtBQUN0RU0sUUFBQUEsZ0NBQWdDLEdBQUdMLGFBQWEsQ0FBQ08sU0FBZCxDQUF3QkMsaUJBQXhCLENBQTBDSixrQkFBa0IsQ0FBQ0UsZUFBbkIsQ0FBbUNQLCtCQUE3RSxDQUFuQztBQUNBLDZCQUFPTSxnQ0FBUCxFQUEwQyxNQUFLRCxrQkFBa0IsQ0FBQ0UsZUFBbkIsQ0FBbUNQLCtCQUFnQyxtRUFBbEg7QUFDRCxPQUhELE1BR09NLGdDQUFnQyxHQUFHTiwrQkFBbkM7QUFDUCxVQUFJVSxZQUFZLEdBQWtCVCxhQUFhLENBQUNRLGlCQUE3QixNQUFBUixhQUFhLEVBQWtDLEVBQUVVLGdCQUFnQixFQUFFTixrQkFBa0IsQ0FBQ0ssWUFBdkMsRUFBcURYLGNBQWMsRUFBUU8sZ0NBQVIsTUFBRVQsSUFBRixDQUFuRSxFQUFsQyxDQUFoQztBQUNBLFlBQU0sRUFBRWEsWUFBRixFQUFnQkUsSUFBSSxFQUFFUCxrQkFBa0IsQ0FBQ08sSUFBekMsRUFBTjtBQUNEO0FBQ0Y7QUFDRCxTQUFPVCxpQkFBaUIsQ0FBQ0QscUJBQUQsQ0FBeEI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0J1xuXG4vKipcbiAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdG8gZmluZCAmIHlpZWxkIG5leHQgbm9kZXMuXG4gKiBAeWllbGQgbm9kZSBmZWVkXG4gKiovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24qIHRyYXZlcnNlTm9kZSh7IG5vZGUsIGFkZGl0aW9uYWxDaGlsZE5vZGUsIGltcGxlbWVudGF0aW9uLCBoYW5kbGVQcm9wYWdhdGlvbkltcGxlbWVudGF0aW9uLCBncmFwaEluc3RhbmNlID0gdGhpcyB9KSB7XG4gIGxldCB0cmF2ZXJzYWxJdGVyYXRvckZlZWQgPSBhd2FpdCBub2RlOjppbXBsZW1lbnRhdGlvbih7IG5vZGUsIGFkZGl0aW9uYWxDaGlsZE5vZGUsIGdyYXBoSW5zdGFuY2UgfSlcbiAgYXN5bmMgZnVuY3Rpb24qIHRyYXBBc3luY0l0ZXJhdG9yKGl0ZXJhdG9yKSB7XG4gICAgZm9yIGF3YWl0IChsZXQgdHJhdmVyc2FsSXRlcmF0aW9uIG9mIGl0ZXJhdG9yKSB7XG4gICAgICBsZXQgX2hhbmRsZVByb3BhZ2F0aW9uSW1wbGVtZW50YXRpb25cbiAgICAgIGlmICh0cmF2ZXJzYWxJdGVyYXRpb24udHJhdmVyc2FsQ29uZmlnLmhhbmRsZVByb3BhZ2F0aW9uSW1wbGVtZW50YXRpb24pIHtcbiAgICAgICAgX2hhbmRsZVByb3BhZ2F0aW9uSW1wbGVtZW50YXRpb24gPSBncmFwaEluc3RhbmNlLnRyYXZlcnNhbC5oYW5kbGVQcm9wYWdhdGlvblt0cmF2ZXJzYWxJdGVyYXRpb24udHJhdmVyc2FsQ29uZmlnLmhhbmRsZVByb3BhZ2F0aW9uSW1wbGVtZW50YXRpb25dXG4gICAgICAgIGFzc2VydChfaGFuZGxlUHJvcGFnYXRpb25JbXBsZW1lbnRhdGlvbiwgYOKAoiBcIiR7dHJhdmVyc2FsSXRlcmF0aW9uLnRyYXZlcnNhbENvbmZpZy5oYW5kbGVQcm9wYWdhdGlvbkltcGxlbWVudGF0aW9ufVwiIGltcGxlbWVudGF0aW9uIGlzbid0IHJlZ2lzdGVyZWQgaW4gdHJhdmVyc2FsIGNvbmNyZXRlIGluc3RhbmNlLmApXG4gICAgICB9IGVsc2UgX2hhbmRsZVByb3BhZ2F0aW9uSW1wbGVtZW50YXRpb24gPSBoYW5kbGVQcm9wYWdhdGlvbkltcGxlbWVudGF0aW9uXG4gICAgICBsZXQgbmV4dEl0ZXJhdG9yID0gZ3JhcGhJbnN0YW5jZTo6Z3JhcGhJbnN0YW5jZS5oYW5kbGVQcm9wYWdhdGlvbih7IG5vZGVJdGVyYXRvckZlZWQ6IHRyYXZlcnNhbEl0ZXJhdGlvbi5uZXh0SXRlcmF0b3IsIGltcGxlbWVudGF0aW9uOiBub2RlOjpfaGFuZGxlUHJvcGFnYXRpb25JbXBsZW1lbnRhdGlvbiB9KVxuICAgICAgeWllbGQgeyBuZXh0SXRlcmF0b3IsIGZvcms6IHRyYXZlcnNhbEl0ZXJhdGlvbi5mb3JrIH1cbiAgICB9XG4gIH1cbiAgeWllbGQqIHRyYXBBc3luY0l0ZXJhdG9yKHRyYXZlcnNhbEl0ZXJhdG9yRmVlZClcbn1cbiJdfQ==