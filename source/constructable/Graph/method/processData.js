"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.processData = processData;

async function processData({ node, nextProcessData, aggregator, traversalConfig, getImplementation, graphInstance }, { additionalParameter, traverseCallContext }) {
  if (!traversalConfig.shouldExecuteProcess()) return null;

  let execute;
  const { executeArray } = await graphInstance.databaseWrapper.getExecution({ concreteDatabase: graphInstance.database, nodeID: node.identity });
  if (executeArray.length > 1) throw new Error(`â€¢ Multiple execute relationships are not supported in Stage node.`);else

    if (executeArray.length == 0) return null;else
    execute = executeArray[0];


  let nodeImplementationKey;
  if (execute.connection.properties.processDataImplementation) nodeImplementationKey = { processData: execute.connection.properties.processDataImplementation };
  let implementation = getImplementation({ nodeImplementationKey });


  let result = await implementation.call(node, { processNode: execute.destination, stageNode: node, graphInstance, nextProcessData }, { additionalParameter, traverseCallContext });

  if (traversalConfig.shouldIncludeResult()) aggregator.add(result);
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC9wcm9jZXNzRGF0YS5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzRGF0YSIsIm5vZGUiLCJuZXh0UHJvY2Vzc0RhdGEiLCJhZ2dyZWdhdG9yIiwidHJhdmVyc2FsQ29uZmlnIiwiZ2V0SW1wbGVtZW50YXRpb24iLCJncmFwaEluc3RhbmNlIiwiYWRkaXRpb25hbFBhcmFtZXRlciIsInRyYXZlcnNlQ2FsbENvbnRleHQiLCJzaG91bGRFeGVjdXRlUHJvY2VzcyIsImV4ZWN1dGUiLCJleGVjdXRlQXJyYXkiLCJkYXRhYmFzZVdyYXBwZXIiLCJnZXRFeGVjdXRpb24iLCJjb25jcmV0ZURhdGFiYXNlIiwiZGF0YWJhc2UiLCJub2RlSUQiLCJpZGVudGl0eSIsImxlbmd0aCIsIkVycm9yIiwibm9kZUltcGxlbWVudGF0aW9uS2V5IiwiY29ubmVjdGlvbiIsInByb3BlcnRpZXMiLCJwcm9jZXNzRGF0YUltcGxlbWVudGF0aW9uIiwiaW1wbGVtZW50YXRpb24iLCJyZXN1bHQiLCJwcm9jZXNzTm9kZSIsImRlc3RpbmF0aW9uIiwic3RhZ2VOb2RlIiwic2hvdWxkSW5jbHVkZVJlc3VsdCIsImFkZCJdLCJtYXBwaW5ncyI6Ijs7QUFFTyxlQUFlQSxXQUFmLENBQTJCLEVBQUVDLElBQUYsRUFBUUMsZUFBUixFQUF5QkMsVUFBekIsRUFBcUNDLGVBQXJDLEVBQXNEQyxpQkFBdEQsRUFBeUVDLGFBQXpFLEVBQTNCLEVBQXFILEVBQUVDLG1CQUFGLEVBQXVCQyxtQkFBdkIsRUFBckgsRUFBbUs7QUFDeEssTUFBSSxDQUFDSixlQUFlLENBQUNLLG9CQUFoQixFQUFMLEVBQTZDLE9BQU8sSUFBUDs7QUFFN0MsTUFBSUMsT0FBSjtBQUNBLFFBQU0sRUFBRUMsWUFBRixLQUFtQixNQUFNTCxhQUFhLENBQUNNLGVBQWQsQ0FBOEJDLFlBQTlCLENBQTJDLEVBQUVDLGdCQUFnQixFQUFFUixhQUFhLENBQUNTLFFBQWxDLEVBQTRDQyxNQUFNLEVBQUVmLElBQUksQ0FBQ2dCLFFBQXpELEVBQTNDLENBQS9CO0FBQ0EsTUFBSU4sWUFBWSxDQUFDTyxNQUFiLEdBQXNCLENBQTFCLEVBQTZCLE1BQU0sSUFBSUMsS0FBSixDQUFXLG1FQUFYLENBQU4sQ0FBN0I7O0FBRUssUUFBSVIsWUFBWSxDQUFDTyxNQUFiLElBQXVCLENBQTNCLEVBQThCLE9BQU8sSUFBUCxDQUE5QjtBQUNBUixJQUFBQSxPQUFPLEdBQUdDLFlBQVksQ0FBQyxDQUFELENBQXRCOzs7QUFHTCxNQUFJUyxxQkFBSjtBQUNBLE1BQUlWLE9BQU8sQ0FBQ1csVUFBUixDQUFtQkMsVUFBbkIsQ0FBOEJDLHlCQUFsQyxFQUE2REgscUJBQXFCLEdBQUcsRUFBRXBCLFdBQVcsRUFBRVUsT0FBTyxDQUFDVyxVQUFSLENBQW1CQyxVQUFuQixDQUE4QkMseUJBQTdDLEVBQXhCO0FBQzdELE1BQUlDLGNBQWMsR0FBR25CLGlCQUFpQixDQUFDLEVBQUVlLHFCQUFGLEVBQUQsQ0FBdEM7OztBQUdBLE1BQUlLLE1BQU0sR0FBRyxNQUFZRCxjQUFOLE1BQUF2QixJQUFJLEVBQWlCLEVBQUV5QixXQUFXLEVBQUVoQixPQUFPLENBQUNpQixXQUF2QixFQUFvQ0MsU0FBUyxFQUFFM0IsSUFBL0MsRUFBcURLLGFBQXJELEVBQW9FSixlQUFwRSxFQUFqQixFQUF3RyxFQUFFSyxtQkFBRixFQUF1QkMsbUJBQXZCLEVBQXhHLENBQXZCOztBQUVBLE1BQUlKLGVBQWUsQ0FBQ3lCLG1CQUFoQixFQUFKLEVBQTJDMUIsVUFBVSxDQUFDMkIsR0FBWCxDQUFlTCxNQUFmO0FBQzNDLFNBQU9BLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0J1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0RhdGEoeyBub2RlLCBuZXh0UHJvY2Vzc0RhdGEsIGFnZ3JlZ2F0b3IsIHRyYXZlcnNhbENvbmZpZywgZ2V0SW1wbGVtZW50YXRpb24sIGdyYXBoSW5zdGFuY2UgfSwgeyBhZGRpdGlvbmFsUGFyYW1ldGVyLCB0cmF2ZXJzZUNhbGxDb250ZXh0IH0pIHtcbiAgaWYgKCF0cmF2ZXJzYWxDb25maWcuc2hvdWxkRXhlY3V0ZVByb2Nlc3MoKSkgcmV0dXJuIG51bGxcblxuICBsZXQgZXhlY3V0ZVxuICBjb25zdCB7IGV4ZWN1dGVBcnJheSB9ID0gYXdhaXQgZ3JhcGhJbnN0YW5jZS5kYXRhYmFzZVdyYXBwZXIuZ2V0RXhlY3V0aW9uKHsgY29uY3JldGVEYXRhYmFzZTogZ3JhcGhJbnN0YW5jZS5kYXRhYmFzZSwgbm9kZUlEOiBub2RlLmlkZW50aXR5IH0pXG4gIGlmIChleGVjdXRlQXJyYXkubGVuZ3RoID4gMSkgdGhyb3cgbmV3IEVycm9yKGDigKIgTXVsdGlwbGUgZXhlY3V0ZSByZWxhdGlvbnNoaXBzIGFyZSBub3Qgc3VwcG9ydGVkIGluIFN0YWdlIG5vZGUuYClcbiAgLy8gc2tpcCBpZiBubyBleGVjdXRlIGNvbm5lY3Rpb25cbiAgZWxzZSBpZiAoZXhlY3V0ZUFycmF5Lmxlbmd0aCA9PSAwKSByZXR1cm4gbnVsbFxuICBlbHNlIGV4ZWN1dGUgPSBleGVjdXRlQXJyYXlbMF1cblxuICAvLyBub2RlL2VkZ2UgcHJvcGVydGllcyBpbXBsZW1lbnRhdGlvbiBoaWVyYXJjaHlcbiAgbGV0IG5vZGVJbXBsZW1lbnRhdGlvbktleSAvLyB0cmF2ZXJzYWwgaW1wbGVtZW50YXRpbyBrZXlcbiAgaWYgKGV4ZWN1dGUuY29ubmVjdGlvbi5wcm9wZXJ0aWVzLnByb2Nlc3NEYXRhSW1wbGVtZW50YXRpb24pIG5vZGVJbXBsZW1lbnRhdGlvbktleSA9IHsgcHJvY2Vzc0RhdGE6IGV4ZWN1dGUuY29ubmVjdGlvbi5wcm9wZXJ0aWVzLnByb2Nlc3NEYXRhSW1wbGVtZW50YXRpb24gfVxuICBsZXQgaW1wbGVtZW50YXRpb24gPSBnZXRJbXBsZW1lbnRhdGlvbih7IG5vZGVJbXBsZW1lbnRhdGlvbktleSB9KSAvLyBjYWxjdWxhdGUgYW5kIHBpY2sgY29ycmVjdCBpbXBsZW1lbnRhdGlvbiBhY2NvcmRpbmcgdG8gcGFyYW1ldGVyIGhpZXJhcmNoeS5cblxuICAvLyBFeGVjdXRlIG5vZGUgZGF0YUl0ZW1cbiAgbGV0IHJlc3VsdCA9IGF3YWl0IG5vZGU6OmltcGxlbWVudGF0aW9uKHsgcHJvY2Vzc05vZGU6IGV4ZWN1dGUuZGVzdGluYXRpb24sIHN0YWdlTm9kZTogbm9kZSwgZ3JhcGhJbnN0YW5jZSwgbmV4dFByb2Nlc3NEYXRhIH0sIHsgYWRkaXRpb25hbFBhcmFtZXRlciwgdHJhdmVyc2VDYWxsQ29udGV4dCB9KVxuXG4gIGlmICh0cmF2ZXJzYWxDb25maWcuc2hvdWxkSW5jbHVkZVJlc3VsdCgpKSBhZ2dyZWdhdG9yLmFkZChyZXN1bHQpXG4gIHJldHVybiByZXN1bHRcbn1cbiJdfQ==