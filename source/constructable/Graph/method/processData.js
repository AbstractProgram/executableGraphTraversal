"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.processData = processData;

async function processData({ node, nextProcessData, aggregator, traversalConfig, getImplementation, graphInstance }, { additionalParameter, traverseCallContext }) {
  if (!traversalConfig.shouldExecuteProcess()) return null;

  let execute;
  const { executeArray } = await graphInstance.databaseWrapper.getExecution({ concreteDatabase: graphInstance.database, nodeID: node.identity });
  if (executeArray.length > 1) throw new Error(`â€¢ Multiple execute relationships are not supported in Stage node.`);else

    if (executeArray.length == 0) return null;else
    execute = executeArray[0];


  let nodeImplementationKey;
  if (execute.connection.properties.processDataImplementation) nodeImplementationKey = { processData: execute.connection.properties.processDataImplementation };
  let implementation = getImplementation({ nodeImplementationKey });


  let result = await implementation.call(node,
  { processNode: execute.destination, stageNode: node, node: execute.destination, graphInstance, nextProcessData },
  { additionalParameter, traverseCallContext });


  if (traversalConfig.shouldIncludeResult()) aggregator.add(result);
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC9wcm9jZXNzRGF0YS5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzRGF0YSIsIm5vZGUiLCJuZXh0UHJvY2Vzc0RhdGEiLCJhZ2dyZWdhdG9yIiwidHJhdmVyc2FsQ29uZmlnIiwiZ2V0SW1wbGVtZW50YXRpb24iLCJncmFwaEluc3RhbmNlIiwiYWRkaXRpb25hbFBhcmFtZXRlciIsInRyYXZlcnNlQ2FsbENvbnRleHQiLCJzaG91bGRFeGVjdXRlUHJvY2VzcyIsImV4ZWN1dGUiLCJleGVjdXRlQXJyYXkiLCJkYXRhYmFzZVdyYXBwZXIiLCJnZXRFeGVjdXRpb24iLCJjb25jcmV0ZURhdGFiYXNlIiwiZGF0YWJhc2UiLCJub2RlSUQiLCJpZGVudGl0eSIsImxlbmd0aCIsIkVycm9yIiwibm9kZUltcGxlbWVudGF0aW9uS2V5IiwiY29ubmVjdGlvbiIsInByb3BlcnRpZXMiLCJwcm9jZXNzRGF0YUltcGxlbWVudGF0aW9uIiwiaW1wbGVtZW50YXRpb24iLCJyZXN1bHQiLCJwcm9jZXNzTm9kZSIsImRlc3RpbmF0aW9uIiwic3RhZ2VOb2RlIiwic2hvdWxkSW5jbHVkZVJlc3VsdCIsImFkZCJdLCJtYXBwaW5ncyI6Ijs7QUFFTyxlQUFlQSxXQUFmLENBQTJCLEVBQUVDLElBQUYsRUFBUUMsZUFBUixFQUF5QkMsVUFBekIsRUFBcUNDLGVBQXJDLEVBQXNEQyxpQkFBdEQsRUFBeUVDLGFBQXpFLEVBQTNCLEVBQXFILEVBQUVDLG1CQUFGLEVBQXVCQyxtQkFBdkIsRUFBckgsRUFBbUs7QUFDeEssTUFBSSxDQUFDSixlQUFlLENBQUNLLG9CQUFoQixFQUFMLEVBQTZDLE9BQU8sSUFBUDs7QUFFN0MsTUFBSUMsT0FBSjtBQUNBLFFBQU0sRUFBRUMsWUFBRixLQUFtQixNQUFNTCxhQUFhLENBQUNNLGVBQWQsQ0FBOEJDLFlBQTlCLENBQTJDLEVBQUVDLGdCQUFnQixFQUFFUixhQUFhLENBQUNTLFFBQWxDLEVBQTRDQyxNQUFNLEVBQUVmLElBQUksQ0FBQ2dCLFFBQXpELEVBQTNDLENBQS9CO0FBQ0EsTUFBSU4sWUFBWSxDQUFDTyxNQUFiLEdBQXNCLENBQTFCLEVBQTZCLE1BQU0sSUFBSUMsS0FBSixDQUFXLG1FQUFYLENBQU4sQ0FBN0I7O0FBRUssUUFBSVIsWUFBWSxDQUFDTyxNQUFiLElBQXVCLENBQTNCLEVBQThCLE9BQU8sSUFBUCxDQUE5QjtBQUNBUixJQUFBQSxPQUFPLEdBQUdDLFlBQVksQ0FBQyxDQUFELENBQXRCOzs7QUFHTCxNQUFJUyxxQkFBSjtBQUNBLE1BQUlWLE9BQU8sQ0FBQ1csVUFBUixDQUFtQkMsVUFBbkIsQ0FBOEJDLHlCQUFsQyxFQUE2REgscUJBQXFCLEdBQUcsRUFBRXBCLFdBQVcsRUFBRVUsT0FBTyxDQUFDVyxVQUFSLENBQW1CQyxVQUFuQixDQUE4QkMseUJBQTdDLEVBQXhCO0FBQzdELE1BQUlDLGNBQWMsR0FBR25CLGlCQUFpQixDQUFDLEVBQUVlLHFCQUFGLEVBQUQsQ0FBdEM7OztBQUdBLE1BQUlLLE1BQU0sR0FBRyxNQUFZRCxjQUFOLE1BQUF2QixJQUFJO0FBQ3JCLElBQUV5QixXQUFXLEVBQUVoQixPQUFPLENBQUNpQixXQUF2QixFQUFvQ0MsU0FBUyxFQUFFM0IsSUFBL0MsRUFBcURBLElBQUksRUFBRVMsT0FBTyxDQUFDaUIsV0FBbkUsRUFBOEdyQixhQUE5RyxFQUE2SEosZUFBN0gsRUFEcUI7QUFFckIsSUFBRUssbUJBQUYsRUFBdUJDLG1CQUF2QixFQUZxQixDQUF2Qjs7O0FBS0EsTUFBSUosZUFBZSxDQUFDeUIsbUJBQWhCLEVBQUosRUFBMkMxQixVQUFVLENBQUMyQixHQUFYLENBQWVMLE1BQWY7QUFDM0MsU0FBT0EsTUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzRGF0YSh7IG5vZGUsIG5leHRQcm9jZXNzRGF0YSwgYWdncmVnYXRvciwgdHJhdmVyc2FsQ29uZmlnLCBnZXRJbXBsZW1lbnRhdGlvbiwgZ3JhcGhJbnN0YW5jZSB9LCB7IGFkZGl0aW9uYWxQYXJhbWV0ZXIsIHRyYXZlcnNlQ2FsbENvbnRleHQgfSkge1xuICBpZiAoIXRyYXZlcnNhbENvbmZpZy5zaG91bGRFeGVjdXRlUHJvY2VzcygpKSByZXR1cm4gbnVsbFxuXG4gIGxldCBleGVjdXRlXG4gIGNvbnN0IHsgZXhlY3V0ZUFycmF5IH0gPSBhd2FpdCBncmFwaEluc3RhbmNlLmRhdGFiYXNlV3JhcHBlci5nZXRFeGVjdXRpb24oeyBjb25jcmV0ZURhdGFiYXNlOiBncmFwaEluc3RhbmNlLmRhdGFiYXNlLCBub2RlSUQ6IG5vZGUuaWRlbnRpdHkgfSlcbiAgaWYgKGV4ZWN1dGVBcnJheS5sZW5ndGggPiAxKSB0aHJvdyBuZXcgRXJyb3IoYOKAoiBNdWx0aXBsZSBleGVjdXRlIHJlbGF0aW9uc2hpcHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gU3RhZ2Ugbm9kZS5gKVxuICAvLyBza2lwIGlmIG5vIGV4ZWN1dGUgY29ubmVjdGlvblxuICBlbHNlIGlmIChleGVjdXRlQXJyYXkubGVuZ3RoID09IDApIHJldHVybiBudWxsXG4gIGVsc2UgZXhlY3V0ZSA9IGV4ZWN1dGVBcnJheVswXVxuXG4gIC8vIG5vZGUvZWRnZSBwcm9wZXJ0aWVzIGltcGxlbWVudGF0aW9uIGhpZXJhcmNoeVxuICBsZXQgbm9kZUltcGxlbWVudGF0aW9uS2V5IC8vIHRyYXZlcnNhbCBpbXBsZW1lbnRhdGlvIGtleVxuICBpZiAoZXhlY3V0ZS5jb25uZWN0aW9uLnByb3BlcnRpZXMucHJvY2Vzc0RhdGFJbXBsZW1lbnRhdGlvbikgbm9kZUltcGxlbWVudGF0aW9uS2V5ID0geyBwcm9jZXNzRGF0YTogZXhlY3V0ZS5jb25uZWN0aW9uLnByb3BlcnRpZXMucHJvY2Vzc0RhdGFJbXBsZW1lbnRhdGlvbiB9XG4gIGxldCBpbXBsZW1lbnRhdGlvbiA9IGdldEltcGxlbWVudGF0aW9uKHsgbm9kZUltcGxlbWVudGF0aW9uS2V5IH0pIC8vIGNhbGN1bGF0ZSBhbmQgcGljayBjb3JyZWN0IGltcGxlbWVudGF0aW9uIGFjY29yZGluZyB0byBwYXJhbWV0ZXIgaGllcmFyY2h5LlxuXG4gIC8vIEV4ZWN1dGUgbm9kZSBkYXRhSXRlbVxuICBsZXQgcmVzdWx0ID0gYXdhaXQgbm9kZTo6aW1wbGVtZW50YXRpb24oXG4gICAgeyBwcm9jZXNzTm9kZTogZXhlY3V0ZS5kZXN0aW5hdGlvbiwgc3RhZ2VOb2RlOiBub2RlLCBub2RlOiBleGVjdXRlLmRlc3RpbmF0aW9uIC8qKiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5ICovLCBncmFwaEluc3RhbmNlLCBuZXh0UHJvY2Vzc0RhdGEgfSxcbiAgICB7IGFkZGl0aW9uYWxQYXJhbWV0ZXIsIHRyYXZlcnNlQ2FsbENvbnRleHQgfSxcbiAgKVxuXG4gIGlmICh0cmF2ZXJzYWxDb25maWcuc2hvdWxkSW5jbHVkZVJlc3VsdCgpKSBhZ2dyZWdhdG9yLmFkZChyZXN1bHQpXG4gIHJldHVybiByZXN1bHRcbn1cbiJdfQ==