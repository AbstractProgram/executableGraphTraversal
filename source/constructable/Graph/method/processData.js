"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.processData = processData;

async function processData({ node, nextProcessData, aggregator, traversalConfig, getImplementation, graphInstance }, additionalParameter) {
  if (!traversalConfig.shouldExecuteProcess()) return null;

  let execute;
  const { executeArray } = await graphInstance.databaseWrapper.getExecution({ concreteDatabase: graphInstance.database, nodeID: node.identity });
  if (executeArray.length > 1) throw new Error(`â€¢ Multiple execute relationships are not supported in Stage node.`);else

    if (executeArray.length == 0) return null;else
    execute = executeArray[0];


  let nodeTraversalImplementationKey;
  if (execute.connection.properties.processDataImplementation) nodeTraversalImplementationKey = { processData: execute.connection.properties.processDataImplementation };
  let implementation = getImplementation({ nodeTraversalImplementationKey });


  let result = await implementation.call(node,
  { processNode: execute.destination, stageNode: node, node: execute.destination, graphInstance, nextProcessData },
  additionalParameter);


  if (traversalConfig.shouldIncludeResult()) aggregator.add(result);
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC9wcm9jZXNzRGF0YS5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzRGF0YSIsIm5vZGUiLCJuZXh0UHJvY2Vzc0RhdGEiLCJhZ2dyZWdhdG9yIiwidHJhdmVyc2FsQ29uZmlnIiwiZ2V0SW1wbGVtZW50YXRpb24iLCJncmFwaEluc3RhbmNlIiwiYWRkaXRpb25hbFBhcmFtZXRlciIsInNob3VsZEV4ZWN1dGVQcm9jZXNzIiwiZXhlY3V0ZSIsImV4ZWN1dGVBcnJheSIsImRhdGFiYXNlV3JhcHBlciIsImdldEV4ZWN1dGlvbiIsImNvbmNyZXRlRGF0YWJhc2UiLCJkYXRhYmFzZSIsIm5vZGVJRCIsImlkZW50aXR5IiwibGVuZ3RoIiwiRXJyb3IiLCJub2RlVHJhdmVyc2FsSW1wbGVtZW50YXRpb25LZXkiLCJjb25uZWN0aW9uIiwicHJvcGVydGllcyIsInByb2Nlc3NEYXRhSW1wbGVtZW50YXRpb24iLCJpbXBsZW1lbnRhdGlvbiIsInJlc3VsdCIsInByb2Nlc3NOb2RlIiwiZGVzdGluYXRpb24iLCJzdGFnZU5vZGUiLCJzaG91bGRJbmNsdWRlUmVzdWx0IiwiYWRkIl0sIm1hcHBpbmdzIjoiOztBQUVPLGVBQWVBLFdBQWYsQ0FBMkIsRUFBRUMsSUFBRixFQUFRQyxlQUFSLEVBQXlCQyxVQUF6QixFQUFxQ0MsZUFBckMsRUFBc0RDLGlCQUF0RCxFQUF5RUMsYUFBekUsRUFBM0IsRUFBcUhDLG1CQUFySCxFQUEwSTtBQUMvSSxNQUFJLENBQUNILGVBQWUsQ0FBQ0ksb0JBQWhCLEVBQUwsRUFBNkMsT0FBTyxJQUFQOztBQUU3QyxNQUFJQyxPQUFKO0FBQ0EsUUFBTSxFQUFFQyxZQUFGLEtBQW1CLE1BQU1KLGFBQWEsQ0FBQ0ssZUFBZCxDQUE4QkMsWUFBOUIsQ0FBMkMsRUFBRUMsZ0JBQWdCLEVBQUVQLGFBQWEsQ0FBQ1EsUUFBbEMsRUFBNENDLE1BQU0sRUFBRWQsSUFBSSxDQUFDZSxRQUF6RCxFQUEzQyxDQUEvQjtBQUNBLE1BQUlOLFlBQVksQ0FBQ08sTUFBYixHQUFzQixDQUExQixFQUE2QixNQUFNLElBQUlDLEtBQUosQ0FBVyxtRUFBWCxDQUFOLENBQTdCOztBQUVLLFFBQUlSLFlBQVksQ0FBQ08sTUFBYixJQUF1QixDQUEzQixFQUE4QixPQUFPLElBQVAsQ0FBOUI7QUFDQVIsSUFBQUEsT0FBTyxHQUFHQyxZQUFZLENBQUMsQ0FBRCxDQUF0Qjs7O0FBR0wsTUFBSVMsOEJBQUo7QUFDQSxNQUFJVixPQUFPLENBQUNXLFVBQVIsQ0FBbUJDLFVBQW5CLENBQThCQyx5QkFBbEMsRUFBNkRILDhCQUE4QixHQUFHLEVBQUVuQixXQUFXLEVBQUVTLE9BQU8sQ0FBQ1csVUFBUixDQUFtQkMsVUFBbkIsQ0FBOEJDLHlCQUE3QyxFQUFqQztBQUM3RCxNQUFJQyxjQUFjLEdBQUdsQixpQkFBaUIsQ0FBQyxFQUFFYyw4QkFBRixFQUFELENBQXRDOzs7QUFHQSxNQUFJSyxNQUFNLEdBQUcsTUFBWUQsY0FBTixNQUFBdEIsSUFBSTtBQUNyQixJQUFFd0IsV0FBVyxFQUFFaEIsT0FBTyxDQUFDaUIsV0FBdkIsRUFBb0NDLFNBQVMsRUFBRTFCLElBQS9DLEVBQXFEQSxJQUFJLEVBQUVRLE9BQU8sQ0FBQ2lCLFdBQW5FLEVBQThHcEIsYUFBOUcsRUFBNkhKLGVBQTdILEVBRHFCO0FBRXJCSyxFQUFBQSxtQkFGcUIsQ0FBdkI7OztBQUtBLE1BQUlILGVBQWUsQ0FBQ3dCLG1CQUFoQixFQUFKLEVBQTJDekIsVUFBVSxDQUFDMEIsR0FBWCxDQUFlTCxNQUFmO0FBQzNDLFNBQU9BLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0J1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0RhdGEoeyBub2RlLCBuZXh0UHJvY2Vzc0RhdGEsIGFnZ3JlZ2F0b3IsIHRyYXZlcnNhbENvbmZpZywgZ2V0SW1wbGVtZW50YXRpb24sIGdyYXBoSW5zdGFuY2UgfSwgYWRkaXRpb25hbFBhcmFtZXRlcikge1xuICBpZiAoIXRyYXZlcnNhbENvbmZpZy5zaG91bGRFeGVjdXRlUHJvY2VzcygpKSByZXR1cm4gbnVsbFxuXG4gIGxldCBleGVjdXRlXG4gIGNvbnN0IHsgZXhlY3V0ZUFycmF5IH0gPSBhd2FpdCBncmFwaEluc3RhbmNlLmRhdGFiYXNlV3JhcHBlci5nZXRFeGVjdXRpb24oeyBjb25jcmV0ZURhdGFiYXNlOiBncmFwaEluc3RhbmNlLmRhdGFiYXNlLCBub2RlSUQ6IG5vZGUuaWRlbnRpdHkgfSlcbiAgaWYgKGV4ZWN1dGVBcnJheS5sZW5ndGggPiAxKSB0aHJvdyBuZXcgRXJyb3IoYOKAoiBNdWx0aXBsZSBleGVjdXRlIHJlbGF0aW9uc2hpcHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gU3RhZ2Ugbm9kZS5gKVxuICAvLyBza2lwIGlmIG5vIGV4ZWN1dGUgY29ubmVjdGlvblxuICBlbHNlIGlmIChleGVjdXRlQXJyYXkubGVuZ3RoID09IDApIHJldHVybiBudWxsXG4gIGVsc2UgZXhlY3V0ZSA9IGV4ZWN1dGVBcnJheVswXVxuXG4gIC8vIG5vZGUvZWRnZSBwcm9wZXJ0aWVzIGltcGxlbWVudGF0aW9uIGhpZXJhcmNoeVxuICBsZXQgbm9kZVRyYXZlcnNhbEltcGxlbWVudGF0aW9uS2V5XG4gIGlmIChleGVjdXRlLmNvbm5lY3Rpb24ucHJvcGVydGllcy5wcm9jZXNzRGF0YUltcGxlbWVudGF0aW9uKSBub2RlVHJhdmVyc2FsSW1wbGVtZW50YXRpb25LZXkgPSB7IHByb2Nlc3NEYXRhOiBleGVjdXRlLmNvbm5lY3Rpb24ucHJvcGVydGllcy5wcm9jZXNzRGF0YUltcGxlbWVudGF0aW9uIH1cbiAgbGV0IGltcGxlbWVudGF0aW9uID0gZ2V0SW1wbGVtZW50YXRpb24oeyBub2RlVHJhdmVyc2FsSW1wbGVtZW50YXRpb25LZXkgfSkgLy8gY2FsY3VsYXRlIGFuZCBwaWNrIGNvcnJlY3QgaW1wbGVtZW50YXRpb24gYWNjb3JkaW5nIHRvIHBhcmFtZXRlciBoaWVyYXJjaHkuXG5cbiAgLy8gRXhlY3V0ZSBub2RlIGRhdGFJdGVtXG4gIGxldCByZXN1bHQgPSBhd2FpdCBub2RlOjppbXBsZW1lbnRhdGlvbihcbiAgICB7IHByb2Nlc3NOb2RlOiBleGVjdXRlLmRlc3RpbmF0aW9uLCBzdGFnZU5vZGU6IG5vZGUsIG5vZGU6IGV4ZWN1dGUuZGVzdGluYXRpb24gLyoqIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgKi8sIGdyYXBoSW5zdGFuY2UsIG5leHRQcm9jZXNzRGF0YSB9LFxuICAgIGFkZGl0aW9uYWxQYXJhbWV0ZXIsXG4gIClcblxuICBpZiAodHJhdmVyc2FsQ29uZmlnLnNob3VsZEluY2x1ZGVSZXN1bHQoKSkgYWdncmVnYXRvci5hZGQocmVzdWx0KVxuICByZXR1cm4gcmVzdWx0XG59XG4iXX0=