"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.returnReference = returnReference;exports.traverseReference = traverseReference;var schemeReference = _interopRequireWildcard(require("../../../dataModel/graphSchemeReference.js"));
var _concreteDatabaseWrapper = require("../../../dataModel/concreteDatabaseWrapper.js");




async function returnReference(
{ graphInstance, nodeInstance, traversalConfig, traversalDepth, path, additionalChildNode, eventEmitter, aggregator },
{ parentTraversalArg, traverseCallContext })
{
  const { reference } = await graphInstance.databaseWrapper.getRerouteReturnReferenceElement({ concreteDatabase: graphInstance.database, nodeID: nodeInstance.identity });
  let resolvedNode = await resolveReference({ reference, graphInstance, traverseCallContext });
  if (resolvedNode)

    while (resolvedNode && resolvedNode.labels.includes(schemeReference.nodeLabel.reroute))
    resolvedNode = await graphInstance.traverse(
    {
      nodeInstance: resolvedNode,
      implementationKey: {
        [schemeReference.nodeLabel.reroute]: 'returnReference' } },


    {
      traverseCallContext });



  return resolvedNode;
}


async function traverseReference(
{ graphInstance, nodeInstance, traversalConfig, traversalDepth, path, additionalChildNode, eventEmitter, aggregator },
{ parentTraversalArg, traverseCallContext })
{
  const { reference, extend, insertArray } = await graphInstance.databaseWrapper.getRerouteTraverseReferenceElement({ concreteDatabase: graphInstance.database, nodeID: nodeInstance.identity });


  let referencedNode;
  if (reference) referencedNode = await resolveReference({ reference, graphInstance, traverseCallContext });else

    if (extend) referencedNode = extend.destination;else
    return;


  let insertAdditionalNode = insertArray.
  sort((former, latter) => former.connection.properties.order - latter.connection.properties.order).
  map(insert => {var _insert$connection$pr, _insert$connection$pr2;return {
      node: insert.source,
      placement: {

        position: (_insert$connection$pr = insert.connection.properties) === null || _insert$connection$pr === void 0 ? void 0 : _insert$connection$pr.placement[0],
        connectionKey: (_insert$connection$pr2 = insert.connection.properties) === null || _insert$connection$pr2 === void 0 ? void 0 : _insert$connection$pr2.placement[1] } };});


  additionalChildNode = [...(additionalChildNode || []), ...insertAdditionalNode];


  arguments[0].traversalConfig = traversalConfig;
  arguments[0].nodeInstance = referencedNode;
  arguments[0].additionalChildNode = additionalChildNode;

  return await graphInstance.traverse(...arguments);
}


async function resolveReference({ reference, graphInstance, traverseCallContext }) {

  if ((0, _concreteDatabaseWrapper.isSelfEdge)(reference)) {

    let labelIndex = reference.destination.labels.indexOf(schemeReference.nodeLabel.reroute);
    reference.destination.labels[labelIndex] += `-ignore`;
  }

  let resolvedNode;
  switch (reference.connection.properties.resolutionImplementation) {
    case 'caseSwitch':
      resolvedNode = await switchResolution({ graphInstance, reference, traverseCallContext });
      break;
    case 'node':
    default:
      resolvedNode = reference.destination;
      break;}


  return resolvedNode;
}

async function switchResolution({ graphInstance, reference, traverseCallContext }) {
  let referencedNode;


  let resultNodeArray = await graphInstance.traverse(





  {
    nodeInstance: reference.destination,
    implementationKey: {
      processNode: 'switchCase',
      traversalInterception: 'traverseThenProcessWithLogicalOperator',
      aggregator: 'ConditionAggregator' } },


  {
    traverseCallContext: {
      targetNode: traverseCallContext.targetNode || reference.source } });




  if (resultNodeArray.length > 1) throw new Error('â€¢ REFERENCE relationship that returns multiple nodes is not supported.');else
  if (resultNodeArray.length != 0) referencedNode = resultNodeArray[0];
  return referencedNode;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,