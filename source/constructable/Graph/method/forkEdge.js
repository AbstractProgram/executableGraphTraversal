"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.forkEdge = forkEdge;var _assert = _interopRequireDefault(require("assert"));







async function* forkEdge({ stageNode, additionalChildNode, getImplementation, graphInstance = this }) {
  const { forkArray } = await graphInstance.databaseWrapper.getFork({ concreteDatabase: graphInstance.database, nodeID: stageNode.identity });
  if (forkArray.length == 0) return;

  forkArray.sort((former, latter) => former.connection.properties.order - latter.connection.properties.order);

  for (let fork of forkArray) {
    (0, _assert.default)(fork.destination.labels.includes(graphInstance.schemeReference.nodeLabel.port), `â€¢ "${fork.destination.labels}" Unsupported node type for a FORK connection.`);


    let nodeImplementationKey;
    if (fork.connection.properties.implementation) nodeImplementationKey = { portNode: fork.connection.properties.implementation };
    let implementation = getImplementation({ nodeImplementationKey });

    let nextIterator = implementation.call(graphInstance, { forkEdge: fork, additionalChildNode, graphInstance });


    yield { nextIterator, fork };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC9mb3JrRWRnZS5qcyJdLCJuYW1lcyI6WyJmb3JrRWRnZSIsInN0YWdlTm9kZSIsImFkZGl0aW9uYWxDaGlsZE5vZGUiLCJnZXRJbXBsZW1lbnRhdGlvbiIsImdyYXBoSW5zdGFuY2UiLCJmb3JrQXJyYXkiLCJkYXRhYmFzZVdyYXBwZXIiLCJnZXRGb3JrIiwiY29uY3JldGVEYXRhYmFzZSIsImRhdGFiYXNlIiwibm9kZUlEIiwiaWRlbnRpdHkiLCJsZW5ndGgiLCJzb3J0IiwiZm9ybWVyIiwibGF0dGVyIiwiY29ubmVjdGlvbiIsInByb3BlcnRpZXMiLCJvcmRlciIsImZvcmsiLCJkZXN0aW5hdGlvbiIsImxhYmVscyIsImluY2x1ZGVzIiwic2NoZW1lUmVmZXJlbmNlIiwibm9kZUxhYmVsIiwicG9ydCIsIm5vZGVJbXBsZW1lbnRhdGlvbktleSIsImltcGxlbWVudGF0aW9uIiwicG9ydE5vZGUiLCJuZXh0SXRlcmF0b3IiXSwibWFwcGluZ3MiOiI0TEFBQTs7Ozs7Ozs7QUFRTyxnQkFBZ0JBLFFBQWhCLENBQXlCLEVBQUVDLFNBQUYsRUFBYUMsbUJBQWIsRUFBa0NDLGlCQUFsQyxFQUFxREMsYUFBYSxHQUFHLElBQXJFLEVBQXpCLEVBQXNHO0FBQzNHLFFBQU0sRUFBRUMsU0FBRixLQUFnQixNQUFNRCxhQUFhLENBQUNFLGVBQWQsQ0FBOEJDLE9BQTlCLENBQXNDLEVBQUVDLGdCQUFnQixFQUFFSixhQUFhLENBQUNLLFFBQWxDLEVBQTRDQyxNQUFNLEVBQUVULFNBQVMsQ0FBQ1UsUUFBOUQsRUFBdEMsQ0FBNUI7QUFDQSxNQUFJTixTQUFTLENBQUNPLE1BQVYsSUFBb0IsQ0FBeEIsRUFBMkI7O0FBRTNCUCxFQUFBQSxTQUFTLENBQUNRLElBQVYsQ0FBZSxDQUFDQyxNQUFELEVBQVNDLE1BQVQsS0FBb0JELE1BQU0sQ0FBQ0UsVUFBUCxDQUFrQkMsVUFBbEIsQ0FBNkJDLEtBQTdCLEdBQXFDSCxNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLFVBQWxCLENBQTZCQyxLQUFyRzs7QUFFQSxPQUFLLElBQUlDLElBQVQsSUFBaUJkLFNBQWpCLEVBQTRCO0FBQzFCLHlCQUFPYyxJQUFJLENBQUNDLFdBQUwsQ0FBaUJDLE1BQWpCLENBQXdCQyxRQUF4QixDQUFpQ2xCLGFBQWEsQ0FBQ21CLGVBQWQsQ0FBOEJDLFNBQTlCLENBQXdDQyxJQUF6RSxDQUFQLEVBQXdGLE1BQUtOLElBQUksQ0FBQ0MsV0FBTCxDQUFpQkMsTUFBTyxnREFBckg7OztBQUdBLFFBQUlLLHFCQUFKO0FBQ0EsUUFBSVAsSUFBSSxDQUFDSCxVQUFMLENBQWdCQyxVQUFoQixDQUEyQlUsY0FBL0IsRUFBK0NELHFCQUFxQixHQUFHLEVBQUVFLFFBQVEsRUFBRVQsSUFBSSxDQUFDSCxVQUFMLENBQWdCQyxVQUFoQixDQUEyQlUsY0FBdkMsRUFBeEI7QUFDL0MsUUFBSUEsY0FBYyxHQUFHeEIsaUJBQWlCLENBQUMsRUFBRXVCLHFCQUFGLEVBQUQsQ0FBdEM7O0FBRUEsUUFBSUcsWUFBWSxHQUFrQkYsY0FBZixNQUFBdkIsYUFBYSxFQUFpQixFQUFFSixRQUFRLEVBQUVtQixJQUFaLEVBQWtCakIsbUJBQWxCLEVBQXVDRSxhQUF2QyxFQUFqQixDQUFoQzs7O0FBR0EsVUFBTSxFQUFFeUIsWUFBRixFQUFnQlYsSUFBaEIsRUFBTjtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCdcblxuLyoqXG4gKiBUaGUgcHVycG9zZSBvZiB0aGlzIGZ1bmN0aW9uIGlzIHRvIGZpbmQgJiB5aWVsZCBuZXh0IG5vZGVzLlxuICogQGRlc2NyaXB0aW9uIGxvb3BzIHRocm91Z2ggYWxsIHRoZSBgbm9kZSBwb3J0c2AgYW5kIGluaXRpYWxpemVzIGVhY2ggb25lIHRvIGV4ZWN1dGUgdGhlIGBub2RlIGNvbm5lY3Rpb25zYCBzcGVjaWZpYyBmb3IgaXQuXG4gKiBAcmV0dXJuIHtPYmplY3R9IG5vZGUgZmVlZCAtIG5lc3RlZCBvYmplY3QgY29udGFpbmluZyBGb3JrL1BvcnQgaXRlcmF0b3Igd2l0aCBuZXN0ZWQgTmV4dC9TdGFnZSBpdGVyYXRvciBmb3IgZWFjaC5cbiAqIFRPRE86IGFkZCBhYmlsaXR5IHRvIHBhc3MgdHJhdmVyc2FsIGNvbmZpZ3VyYXRpb24gdG8gYSBncm91cCBvZiBjb25uZWN0aW9ucy4gRWFjaCBwb3J0IGhvbGRzIHRyYXZlcnNhbCBjb2ZpZ3MgdGhhdCBzaG91bGQgYWZmZWN0IGFsbCBjb25uZWN0aW9uIGNvbm5lY3RlZCB0byB0aGlzIHBvcnQuXG4gKiovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24qIGZvcmtFZGdlKHsgc3RhZ2VOb2RlLCBhZGRpdGlvbmFsQ2hpbGROb2RlLCBnZXRJbXBsZW1lbnRhdGlvbiwgZ3JhcGhJbnN0YW5jZSA9IHRoaXMgfSkge1xuICBjb25zdCB7IGZvcmtBcnJheSB9ID0gYXdhaXQgZ3JhcGhJbnN0YW5jZS5kYXRhYmFzZVdyYXBwZXIuZ2V0Rm9yayh7IGNvbmNyZXRlRGF0YWJhc2U6IGdyYXBoSW5zdGFuY2UuZGF0YWJhc2UsIG5vZGVJRDogc3RhZ2VOb2RlLmlkZW50aXR5IH0pXG4gIGlmIChmb3JrQXJyYXkubGVuZ3RoID09IDApIHJldHVyblxuICAvLyBCdWxrIGFjdGlvbnMgb24gZm9ya3MgLSBzb3J0IGZvcmtzXG4gIGZvcmtBcnJheS5zb3J0KChmb3JtZXIsIGxhdHRlcikgPT4gZm9ybWVyLmNvbm5lY3Rpb24ucHJvcGVydGllcy5vcmRlciAtIGxhdHRlci5jb25uZWN0aW9uLnByb3BlcnRpZXMub3JkZXIpIC8vIHVzaW5nIGBvcmRlcmAgcHJvcGVydHlcblxuICBmb3IgKGxldCBmb3JrIG9mIGZvcmtBcnJheSkge1xuICAgIGFzc2VydChmb3JrLmRlc3RpbmF0aW9uLmxhYmVscy5pbmNsdWRlcyhncmFwaEluc3RhbmNlLnNjaGVtZVJlZmVyZW5jZS5ub2RlTGFiZWwucG9ydCksIGDigKIgXCIke2ZvcmsuZGVzdGluYXRpb24ubGFiZWxzfVwiIFVuc3VwcG9ydGVkIG5vZGUgdHlwZSBmb3IgYSBGT1JLIGNvbm5lY3Rpb24uYCkgLy8gdmVyaWZ5IG5vZGUgdHlwZVxuXG4gICAgLy8gbm9kZS9lZGdlIHByb3BlcnRpZXMgaW1wbGVtZW50YXRpb24gaGllcmFyY2h5XG4gICAgbGV0IG5vZGVJbXBsZW1lbnRhdGlvbktleSAvLyB0cmF2ZXJzYWwgaW1wbGVtZW50YXRpbyBrZXlcbiAgICBpZiAoZm9yay5jb25uZWN0aW9uLnByb3BlcnRpZXMuaW1wbGVtZW50YXRpb24pIG5vZGVJbXBsZW1lbnRhdGlvbktleSA9IHsgcG9ydE5vZGU6IGZvcmsuY29ubmVjdGlvbi5wcm9wZXJ0aWVzLmltcGxlbWVudGF0aW9uIH1cbiAgICBsZXQgaW1wbGVtZW50YXRpb24gPSBnZXRJbXBsZW1lbnRhdGlvbih7IG5vZGVJbXBsZW1lbnRhdGlvbktleSB9KSAvLyBjYWxjdWxhdGUgYW5kIHBpY2sgY29ycmVjdCBpbXBsZW1lbnRhdGlvbiBhY2NvcmRpbmcgdG8gcGFyYW1ldGVyIGhpZXJhcmNoeS5cblxuICAgIGxldCBuZXh0SXRlcmF0b3IgPSBncmFwaEluc3RhbmNlOjppbXBsZW1lbnRhdGlvbih7IGZvcmtFZGdlOiBmb3JrLCBhZGRpdGlvbmFsQ2hpbGROb2RlLCBncmFwaEluc3RhbmNlIH0pXG5cbiAgICAvLyBpdGVyYXRvciBvZiBOZXh0IG5vZGVzXG4gICAgeWllbGQgeyBuZXh0SXRlcmF0b3IsIGZvcmsgfVxuICB9XG59XG4iXX0=