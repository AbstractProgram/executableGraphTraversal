"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.forkEdge = forkEdge;var _skipFirstGeneratorNext2 = _interopRequireDefault(require("@babel/runtime/helpers/skipFirstGeneratorNext"));var _assert = _interopRequireDefault(require("assert"));
var _promiseProperRace = _interopRequireDefault(require("@dependency/promiseProperRace"));








async function* forkEdge({ stageNode, additionalChildNode, getImplementation, graph = this }) {
  const { forkArray } = await graph.databaseWrapper.getFork({ concreteDatabase: graph.database, nodeID: stageNode.identity });
  if (forkArray.length == 0) return;

  forkArray.sort((former, latter) => former.connection.properties.order - latter.connection.properties.order || isNaN(former.connection.properties.order) - isNaN(latter.connection.properties.order));

  for (let forkEdge of forkArray) {
    (0, _assert.default)(forkEdge.destination.labels.includes(graph.schemeReference.nodeLabel.port), `‚Ä¢ "${forkEdge.destination.labels}" Unsupported node type for a FORK connection.`);


    let implementation = getImplementation(forkEdge.destination.properties.implementation);
    let nodeIteratorFeed = implementation.call(graph, { forkEdge, additionalChildNode, graph });

    let traversalIterator = traversalIterator2WayCommunication({
      nodeIteratorFeed,
      implementation: handlePropagation[forkEdge.connection.properties.handlePropagationImplementation || 'chronological'] });


    yield {
      group: {
        traversalIterator,

        config: {
          forkEdge } } };



  }
}let _original_traversalIterator2WayCommunication = async function*










traversalIterator2WayCommunication({ nodeIteratorFeed, implementation }) {let _functionSent = yield;
  let { eventEmitterCallback } = _functionSent;

  let traversalIteratorFeed = implementation({ nodeIteratorFeed, emit: eventEmitterCallback });

  let iteratorObject = await traversalIteratorFeed.next();
  while (!iteratorObject.done) {
    _functionSent = yield { node: iteratorObject.value.node };
    iteratorObject = await traversalIteratorFeed.next({ traversalPromise: _functionSent.traversalPromise });
  }
  return iteratorObject.value;
},_modified_traversalIterator2WayCommunication = (0, _skipFirstGeneratorNext2.default)(_original_traversalIterator2WayCommunication);let traversalIterator2WayCommunication;traversalIterator2WayCommunication = new Proxy(_original_traversalIterator2WayCommunication, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_modified_traversalIterator2WayCommunication, thisArgument, argumentsList);} });











const handlePropagation = {



  chronological: (function () {let _ref = async function* ({ nodeIteratorFeed, emit }) {let _functionSent2 = yield;
      let nodeResultList = [];
      for await (let { node } of nodeIteratorFeed) {
        _functionSent2 = yield { node };
        let nextResult = await _functionSent2.traversalPromise;
        emit(nextResult);
        nodeResultList.push(nextResult);
      }
      return nodeResultList;
    },_ref2 = (0, _skipFirstGeneratorNext2.default)(_ref);return new Proxy(_ref, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref2, thisArgument, argumentsList);} });})(),

  chronological_implementationUsingWhileLoop: (function () {let _ref4 = async function* ({ nodeIteratorFeed, emit }) {let _functionSent3 = yield;
      let nodeResultList = [];

      let iteratorObject = await nodeIteratorFeed.next();
      while (!iteratorObject.done) {
        _functionSent3 = yield { node: iteratorObject.value.node };
        let nextResult = await _functionSent3.traversalPromise;
        emit(nextResult);
        nodeResultList.push(nextResult);
        iteratorObject = await nodeIteratorFeed.next();
      }

      return nodeResultList;
    },_ref5 = (0, _skipFirstGeneratorNext2.default)(_ref4);return new Proxy(_ref4, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref5, thisArgument, argumentsList);} });})(),




  raceFirstPromise: (function () {let _ref7 = async function* ({ nodeIteratorFeed, emit }) {let _functionSent4 = yield;
      let nodePromiseArray = [];

      let iteratorObject = await nodeIteratorFeed.next();
      while (!iteratorObject.done) {
        _functionSent4 = yield { node: iteratorObject.value.node };
        let traversalPromise = _functionSent4.traversalPromise;
        nodePromiseArray.push(traversalPromise);
        iteratorObject = await nodeIteratorFeed.next();
      }

      let nodeResolvedResult = await (0, _promiseProperRace.default)(nodePromiseArray).
      then(resolvedPromiseArray => {
        return resolvedPromiseArray[0];
      }).
      catch(error => {

        console.error(`üîÄ‚ö†Ô∏è promiseProperRace rejected because: ${error}`);
      });

      if (nodeResolvedResult) {
        emit(nodeResolvedResult);
        return [nodeResolvedResult];
      } else return [];
    },_ref8 = (0, _skipFirstGeneratorNext2.default)(_ref7);return new Proxy(_ref7, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref8, thisArgument, argumentsList);} });})(),




  allPromise: (function () {let _ref10 = async function* ({ nodeIteratorFeed, emit }) {let _functionSent5 = yield;
      let nodePromiseArray = [];
      let resolvedOrderedNodeResolvedResult = [];

      let iteratorObject = await nodeIteratorFeed.next();
      while (!iteratorObject.done) {
        _functionSent5 = yield { node: iteratorObject.value.node };
        let traversalPromise = _functionSent5.traversalPromise.then(result => {
          emit(result);
          resolvedOrderedNodeResolvedResult.push(result);
        });
        nodePromiseArray.push(traversalPromise);
        iteratorObject = await nodeIteratorFeed.next();
      }


      let nodeResolvedResultArray = await Promise.all(nodePromiseArray).catch(error => {
        if (process.env.SZN_DEBUG == 'true') console.error(`üîÄ‚ö†Ô∏è \`Promise.all\` for nodeConnectionArray rejected because: ${error}`);else
        console.log(error);
      });


      return resolvedOrderedNodeResolvedResult;





    },_ref11 = (0, _skipFirstGeneratorNext2.default)(_ref10);return new Proxy(_ref10, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref11, thisArgument, argumentsList);} });})() };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC9mb3JrRWRnZS5qcyJdLCJuYW1lcyI6WyJmb3JrRWRnZSIsInN0YWdlTm9kZSIsImFkZGl0aW9uYWxDaGlsZE5vZGUiLCJnZXRJbXBsZW1lbnRhdGlvbiIsImdyYXBoIiwiZm9ya0FycmF5IiwiZGF0YWJhc2VXcmFwcGVyIiwiZ2V0Rm9yayIsImNvbmNyZXRlRGF0YWJhc2UiLCJkYXRhYmFzZSIsIm5vZGVJRCIsImlkZW50aXR5IiwibGVuZ3RoIiwic29ydCIsImZvcm1lciIsImxhdHRlciIsImNvbm5lY3Rpb24iLCJwcm9wZXJ0aWVzIiwib3JkZXIiLCJpc05hTiIsImRlc3RpbmF0aW9uIiwibGFiZWxzIiwiaW5jbHVkZXMiLCJzY2hlbWVSZWZlcmVuY2UiLCJub2RlTGFiZWwiLCJwb3J0IiwiaW1wbGVtZW50YXRpb24iLCJub2RlSXRlcmF0b3JGZWVkIiwidHJhdmVyc2FsSXRlcmF0b3IiLCJ0cmF2ZXJzYWxJdGVyYXRvcjJXYXlDb21tdW5pY2F0aW9uIiwiaGFuZGxlUHJvcGFnYXRpb24iLCJoYW5kbGVQcm9wYWdhdGlvbkltcGxlbWVudGF0aW9uIiwiZ3JvdXAiLCJjb25maWciLCJldmVudEVtaXR0ZXJDYWxsYmFjayIsInRyYXZlcnNhbEl0ZXJhdG9yRmVlZCIsImVtaXQiLCJpdGVyYXRvck9iamVjdCIsIm5leHQiLCJkb25lIiwibm9kZSIsInZhbHVlIiwidHJhdmVyc2FsUHJvbWlzZSIsImNocm9ub2xvZ2ljYWwiLCJub2RlUmVzdWx0TGlzdCIsIm5leHRSZXN1bHQiLCJwdXNoIiwiY2hyb25vbG9naWNhbF9pbXBsZW1lbnRhdGlvblVzaW5nV2hpbGVMb29wIiwicmFjZUZpcnN0UHJvbWlzZSIsIm5vZGVQcm9taXNlQXJyYXkiLCJub2RlUmVzb2x2ZWRSZXN1bHQiLCJ0aGVuIiwicmVzb2x2ZWRQcm9taXNlQXJyYXkiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsImFsbFByb21pc2UiLCJyZXNvbHZlZE9yZGVyZWROb2RlUmVzb2x2ZWRSZXN1bHQiLCJyZXN1bHQiLCJub2RlUmVzb2x2ZWRSZXN1bHRBcnJheSIsIlByb21pc2UiLCJhbGwiLCJwcm9jZXNzIiwiZW52IiwiU1pOX0RFQlVHIiwibG9nIl0sIm1hcHBpbmdzIjoiNFNBQUE7QUFDQTs7Ozs7Ozs7O0FBU08sZ0JBQWdCQSxRQUFoQixDQUF5QixFQUFFQyxTQUFGLEVBQWFDLG1CQUFiLEVBQWtDQyxpQkFBbEMsRUFBcURDLEtBQUssR0FBRyxJQUE3RCxFQUF6QixFQUE4RjtBQUNuRyxRQUFNLEVBQUVDLFNBQUYsS0FBZ0IsTUFBTUQsS0FBSyxDQUFDRSxlQUFOLENBQXNCQyxPQUF0QixDQUE4QixFQUFFQyxnQkFBZ0IsRUFBRUosS0FBSyxDQUFDSyxRQUExQixFQUFvQ0MsTUFBTSxFQUFFVCxTQUFTLENBQUNVLFFBQXRELEVBQTlCLENBQTVCO0FBQ0EsTUFBSU4sU0FBUyxDQUFDTyxNQUFWLElBQW9CLENBQXhCLEVBQTJCOztBQUUzQlAsRUFBQUEsU0FBUyxDQUFDUSxJQUFWLENBQWUsQ0FBQ0MsTUFBRCxFQUFTQyxNQUFULEtBQW9CRCxNQUFNLENBQUNFLFVBQVAsQ0FBa0JDLFVBQWxCLENBQTZCQyxLQUE3QixHQUFxQ0gsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxVQUFsQixDQUE2QkMsS0FBbEUsSUFBMkVDLEtBQUssQ0FBQ0wsTUFBTSxDQUFDRSxVQUFQLENBQWtCQyxVQUFsQixDQUE2QkMsS0FBOUIsQ0FBTCxHQUE0Q0MsS0FBSyxDQUFDSixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLFVBQWxCLENBQTZCQyxLQUE5QixDQUEvSjs7QUFFQSxPQUFLLElBQUlsQixRQUFULElBQXFCSyxTQUFyQixFQUFnQztBQUM5Qix5QkFBT0wsUUFBUSxDQUFDb0IsV0FBVCxDQUFxQkMsTUFBckIsQ0FBNEJDLFFBQTVCLENBQXFDbEIsS0FBSyxDQUFDbUIsZUFBTixDQUFzQkMsU0FBdEIsQ0FBZ0NDLElBQXJFLENB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RUFBeEM7O0FBRUEsVUFBSXBCLGNBQWMsR0FBRyxNQUFNVixnQkFBZ0IsQ0FBQ1csSUFBakIsRUFBM0I7QUFDQSxhQUFPLENBQUNELGNBQWMsQ0FBQ0UsSUFBdkIsRUFBNkI7QUFDM0IsK0JBQU0sRUFBRUMsSUFBSSxFQUFFSCxjQUFjLENBQUNJLEtBQWYsQ0FBcUJELElBQTdCLEVBQU47QUFDQSxZQUFJRSxnQkFBZ0IsR0FBRyxlQUFjQSxnQkFBZCxDQUErQlMsSUFBL0IsQ0FBb0NPLE1BQU0sSUFBSTtBQUNuRXRCLFVBQUFBLElBQUksQ0FBQ3NCLE1BQUQsQ0FBSjtBQUNBRCxVQUFBQSxpQ0FBaUMsQ0FBQ1gsSUFBbEMsQ0FBdUNZLE1BQXZDO0FBQ0QsU0FIc0IsQ0FBdkI7QUFJQVQsUUFBQUEsZ0JBQWdCLENBQUNILElBQWpCLENBQXNCSixnQkFBdEI7QUFDQUwsUUFBQUEsY0FBYyxHQUFHLE1BQU1WLGdCQUFnQixDQUFDVyxJQUFqQixFQUF2QjtBQUNEOzs7QUFHRCxVQUFJcUIsdUJBQXVCLEdBQUcsTUFBTUMsT0FBTyxDQUFDQyxHQUFSLENBQVlaLGdCQUFaLEVBQThCSSxLQUE5QixDQUFvQ0MsS0FBSyxJQUFJO0FBQy9FLFlBQUlRLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUFaLElBQXlCLE1BQTdCLEVBQXFDVCxPQUFPLENBQUNELEtBQVIsQ0FBZSxrRUFBaUVBLEtBQU0sRUFBdEYsRUFBckM7QUFDS0MsUUFBQUEsT0FBTyxDQUFDVSxHQUFSLENBQVlYLEtBQVo7QUFDTixPQUhtQyxDQUFwQzs7O0FBTUEsYUFBT0csaUNBQVA7Ozs7OztBQU1ELEtBNUJTLGtNQTlEYyxFQUExQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0J1xuaW1wb3J0IHByb21pc2VQcm9wZXJSYWNlIGZyb20gJ0BkZXBlbmRlbmN5L3Byb21pc2VQcm9wZXJSYWNlJ1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBsb29wcyB0aHJvdWdoIGFsbCB0aGUgYG5vZGUgcG9ydHNgIGFuZCBpbml0aWFsaXplcyBlYWNoIG9uZSB0byBleGVjdXRlIHRoZSBgbm9kZSBjb25uZWN0aW9uc2Agc3BlY2lmaWMgZm9yIGl0LlxuICogQHlpZWxkICB7aXRlcmF0b3IgZmVlZCBvZiBvYmplY3R9IG5vZGVzIGdyb3VwIG9iamVjdCAtIG5lc3RlZCBvYmplY3QgY29udGFpbmluZyBGb3JrL1BvcnQgaXRlcmF0b3Igd2l0aCBuZXN0ZWQgTmV4dC9TdGFnZSBpdGVyYXRvciBmb3IgZWFjaC5cbiAqIFRPRE86IGFkZCBhYmlsaXR5IHRvIHBhc3MgdHJhdmVyc2FsIGNvbmZpZ3VyYXRpb24gdG8gYSBncm91cCBvZiBjb25uZWN0aW9ucy4gRWFjaCBwb3J0IGhvbGRzIHRyYXZlcnNhbCBjb2ZpZ3MgdGhhdCBzaG91bGQgYWZmZWN0IGFsbCBjb25uZWN0aW9uIGNvbm5lY3RlZCB0byB0aGlzIHBvcnQuXG4gKiBPUlxuICogQHJldHVybiB7dW5kZWZpbmVkfSBpbiBjYXNlIG5vIGZvcmtzLlxuICoqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBmb3JrRWRnZSh7IHN0YWdlTm9kZSwgYWRkaXRpb25hbENoaWxkTm9kZSwgZ2V0SW1wbGVtZW50YXRpb24sIGdyYXBoID0gdGhpcyB9KSB7XG4gIGNvbnN0IHsgZm9ya0FycmF5IH0gPSBhd2FpdCBncmFwaC5kYXRhYmFzZVdyYXBwZXIuZ2V0Rm9yayh7IGNvbmNyZXRlRGF0YWJhc2U6IGdyYXBoLmRhdGFiYXNlLCBub2RlSUQ6IHN0YWdlTm9kZS5pZGVudGl0eSB9KVxuICBpZiAoZm9ya0FycmF5Lmxlbmd0aCA9PSAwKSByZXR1cm5cbiAgLy8gQnVsayBhY3Rpb25zIG9uIGZvcmtzIC0gc29ydCBmb3Jrc1xuICBmb3JrQXJyYXkuc29ydCgoZm9ybWVyLCBsYXR0ZXIpID0+IGZvcm1lci5jb25uZWN0aW9uLnByb3BlcnRpZXMub3JkZXIgLSBsYXR0ZXIuY29ubmVjdGlvbi5wcm9wZXJ0aWVzLm9yZGVyIHx8IGlzTmFOKGZvcm1lci5jb25uZWN0aW9uLnByb3BlcnRpZXMub3JkZXIpIC0gaXNOYU4obGF0dGVyLmNvbm5lY3Rpb24ucHJvcGVydGllcy5vcmRlcikpIC8vIHVzaW5nIGBvcmRlcmAgcHJvcGVydHlcblxuICBmb3IgKGxldCBmb3JrRWRnZSBvZiBmb3JrQXJyYXkpIHtcbiAgICBhc3NlcnQoZm9ya0VkZ2UuZGVzdGluYXRpb24ubGFiZWxzLmluY2x1ZGVzKGdyYXBoLnNjaGVtZVJlZmVyZW5jZS5ub2RlTGFiZWwucG9ydCksIGDigKIgXCIke2ZvcmtFZGdlLmRlc3RpbmF0aW9uLmxhYmVsc31cIiBVbnN1cHBvcnRlZCBub2RlIHR5cGUgZm9yIGEgRk9SSyBjb25uZWN0aW9uLmApIC8vIHZlcmlmeSBub2RlIHR5cGVcblxuICAgIC8vIHRoZSBmaXJzdCBpdGVyYXRvciBvYmplY3QgY2FsbCBpcyB1c2VkIHRvIGluaXRpYWxpemUgdGhlIGZ1bmN0aW9uLCBpbiBhZGRpdGlvbiB0byB0aGUgaXRlcmF0b3IgZnVuY3Rpb24gY2FsbC5cbiAgICBsZXQgaW1wbGVtZW50YXRpb24gPSBnZXRJbXBsZW1lbnRhdGlvbihmb3JrRWRnZS5kZXN0aW5hdGlvbi5wcm9wZXJ0aWVzLmltcGxlbWVudGF0aW9uKSAvLyBUcmF2ZXJzYWwgaW1wbGVtZW50YXRpb24gLSBub2RlL2VkZ2UgcHJvcGVydGllcyBpbXBsZW1lbnRhdGlvbiBoaWVyYXJjaHkgLSBjYWxjdWxhdGUgYW5kIHBpY2sgY29ycmVjdCBpbXBsZW1lbnRhdGlvbiBhY2NvcmRpbmcgdG8gcGFyYW1ldGVyIGhpZXJhcmNoeS5cbiAgICBsZXQgbm9kZUl0ZXJhdG9yRmVlZCA9IGdyYXBoOjppbXBsZW1lbnRhdGlvbih7IGZvcmtFZGdlLCBhZGRpdGlvbmFsQ2hpbGROb2RlLCBncmFwaCB9KVxuXG4gICAgbGV0IHRyYXZlcnNhbEl0ZXJhdG9yID0gdHJhdmVyc2FsSXRlcmF0b3IyV2F5Q29tbXVuaWNhdGlvbih7XG4gICAgICBub2RlSXRlcmF0b3JGZWVkLFxuICAgICAgaW1wbGVtZW50YXRpb246IGhhbmRsZVByb3BhZ2F0aW9uW2ZvcmtFZGdlLmNvbm5lY3Rpb24ucHJvcGVydGllcy5oYW5kbGVQcm9wYWdhdGlvbkltcGxlbWVudGF0aW9uIHx8ICdjaHJvbm9sb2dpY2FsJ10sXG4gICAgfSlcblxuICAgIHlpZWxkIHtcbiAgICAgIGdyb3VwOiB7XG4gICAgICAgIHRyYXZlcnNhbEl0ZXJhdG9yLCAvLyBuZXh0IG5vZGVzIGl0ZXJhdG9yIHdpdGggcmVjZWl2aW5nIHByb21pc2Ugb2Ygbm9kZSB0cmF2ZXJzYWxcbiAgICAgICAgLy8gbm9kZXMgZ3JvdXAgaW5mb3JtYXRpb25cbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgZm9ya0VkZ2UsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH1cbiAgfVxufVxuXG4vKiogQXN5bmMgZ2VuZXJhdG9yIHRyYXAgKGFsbCBwb3J0IHByb3BhZ2F0aW9uIGhhbmRsZXJzIHBhc3MgdGhyb3VnaCB0aGlzIHRyYXApIHdoaWNoIHZlcmlmaWVzIHRoYXQgYWxsIHBvcnQgaW1wbGVtZW50YXRpb25zIGZvbGxvdyBhIDIgd2F5IGl0ZXJhdG9yIGNvbW11bmljYXRpb24uXG4gKiBAcmVjZWl2ZSBbZnVuY3Rpb24uc2VudF0gT2JqZWN0IHsgZXZlbnRFbWl0dGVyQ2FsbGJhY2s6IDxmdW5jdGlvbiBlbWl0dGluZyBhIHRyYXZlcnNhbCBjb21wbGV0ZSBldmVudD4gfSAtIGR1cmluZyBpdGVyYXRvciBpbml0aWFsaXphdGlvbi5cbiAqXG4gKiBJdGVyYXRpb24gMiB3YXkgY29tbXVuaWNhdGlvbjpcbiAqIDEuIEB5aWVsZCBvYmplY3QgeyBub2RlOiA8bm9kZSBkYXRhPiB9XG4gKiAyLiBAcmVjaWV2ZSBbZnVuY3Rpb24uc2VudF0gb2JqZWN0IHsgdHJhdmVyc2FsUHJvbWlzZSB9XG4gKlxuICogQHJldHVybiB7QXJyYXl9IHJlc3VsdHMgYXJyYXlcbiAqL1xuYXN5bmMgZnVuY3Rpb24qIHRyYXZlcnNhbEl0ZXJhdG9yMldheUNvbW11bmljYXRpb24oeyBub2RlSXRlcmF0b3JGZWVkLCBpbXBsZW1lbnRhdGlvbiB9KSB7XG4gIGxldCB7IGV2ZW50RW1pdHRlckNhbGxiYWNrIH0gPSBmdW5jdGlvbi5zZW50XG5cbiAgbGV0IHRyYXZlcnNhbEl0ZXJhdG9yRmVlZCA9IGltcGxlbWVudGF0aW9uKHsgbm9kZUl0ZXJhdG9yRmVlZCwgZW1pdDogZXZlbnRFbWl0dGVyQ2FsbGJhY2sgfSkgLy8gcGFzcyBpdGVyYXRvciB0byBpbXBsZW1lbnRhdGlvbiBhbmQgcHJvcGFnYXRlIGJhY2sgKHRocm91Z2ggcmV0dXJuIHN0YXRlbWVudCkgdGhlIHJlc3VsdHMgb2YgdGhlIG5vZGUgcHJvbWlzZXMgYWZ0ZXIgY29tcGxldGlvblxuXG4gIGxldCBpdGVyYXRvck9iamVjdCA9IGF3YWl0IHRyYXZlcnNhbEl0ZXJhdG9yRmVlZC5uZXh0KClcbiAgd2hpbGUgKCFpdGVyYXRvck9iamVjdC5kb25lKSB7XG4gICAgeWllbGQgeyBub2RlOiBpdGVyYXRvck9iamVjdC52YWx1ZS5ub2RlIH1cbiAgICBpdGVyYXRvck9iamVjdCA9IGF3YWl0IHRyYXZlcnNhbEl0ZXJhdG9yRmVlZC5uZXh0KHsgdHJhdmVyc2FsUHJvbWlzZTogZnVuY3Rpb24uc2VudC50cmF2ZXJzYWxQcm9taXNlIH0pXG4gIH1cbiAgcmV0dXJuIGl0ZXJhdG9yT2JqZWN0LnZhbHVlXG59XG5cbi8qKlxuICogTWV0aG9kcyBjb250cm9sbGluZyB0aGUgaXRlcmF0aW9uIG92ZXIgbm9kZXMgYW5kIGV4ZWN1dGlvbiBhcnJhbmdlbWVudC5cbiAqIFByb3BhZ2F0aW9uIENvbnRyb2wgaW1wbGVtZW50YXRpb24gLSBIYW5kbGVzIHRoZSBncmFwaCB0cmF2ZXJzYWwgcHJvcGFnYXRpb24gb3JkZXIgb2YgTmV4dCBub2RlczogXG4gICAgLSBQYXJhbGxlbFxuICAgIC0gQ2hyb25vbG9naWNhbFxuICAgIC0gUmFjZSBmaXJzdFxuICAgIC0gZXRjLi4uXG4gKiBAcGFyYW0gbm9kZUl0ZXJhdG9yRmVlZCBpdGVyYXRvciBvZiBvYmplY3Qge25vZGU6PG5vZGUgZGF0YT59XG4gKiBAcGFyYW0gZW1pdCBldmVudCBlbWl0dGVyIGNhbGxiYWNrIHVzZWQgdG8gaW5kaWNhdGUgaW1tZWRpYXRlIHJlc29sdXRpb24gb2Ygbm9kZSB0cmF2ZXJzYWwgcHJvbWlzZSAoaS5lLiB3aGVuIHRoZSBub2RlIGNvbXBsZXRlcyBpdCdzIHRyYXZlcnNhbCkuXG4gKi9cbmNvbnN0IGhhbmRsZVByb3BhZ2F0aW9uID0ge1xuICAvKipcbiAgICogU2VxdWVudGlhbCBub2RlIGV4ZWN1dGlvbiAtIGF3YWl0IGVhY2ggbm9kZSB0aWxsIGl0IGZpbmlzaGVzIGV4ZWN1dGlvbi5cbiAgICoqL1xuICBjaHJvbm9sb2dpY2FsOiBhc3luYyBmdW5jdGlvbiooeyBub2RlSXRlcmF0b3JGZWVkLCBlbWl0IH0pIHtcbiAgICBsZXQgbm9kZVJlc3VsdExpc3QgPSBbXVxuICAgIGZvciBhd2FpdCAobGV0IHsgbm9kZSB9IG9mIG5vZGVJdGVyYXRvckZlZWQpIHtcbiAgICAgIHlpZWxkIHsgbm9kZSB9XG4gICAgICBsZXQgbmV4dFJlc3VsdCA9IGF3YWl0IGZ1bmN0aW9uLnNlbnQudHJhdmVyc2FsUHJvbWlzZVxuICAgICAgZW1pdChuZXh0UmVzdWx0KSAvLyBlbWl0IGZvciBpbW1lZGlhdGUgY29uc3VtcHRpb25cbiAgICAgIG5vZGVSZXN1bHRMaXN0LnB1c2gobmV4dFJlc3VsdClcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVSZXN1bHRMaXN0XG4gIH0sXG4gIC8vIE5vdGU6IGtlcHQgZm9yIGZ1dHVyZSByZWZlcmVuY2UuIEltcGxlbWVudGF0aW9uIHVzaW5nIHdoaWxlIGxvb3AgaW5zdGVhZCBvZiBgZm9yIGF3YWl0YCwgYXMgaXQgYWxsb3dzIGZvciBwYXNzaW5nIGluaXRpYWwgY29uZmlnIHZhbHVlIGZvciB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uICh0aGF0IHdpbGwgdXNlIGZ1bmN0aW9uLnNlbnQgdG8gY2F0Y2ggaXQuKVxuICBjaHJvbm9sb2dpY2FsX2ltcGxlbWVudGF0aW9uVXNpbmdXaGlsZUxvb3A6IGFzeW5jIGZ1bmN0aW9uKih7IG5vZGVJdGVyYXRvckZlZWQsIGVtaXQgfSkge1xuICAgIGxldCBub2RlUmVzdWx0TGlzdCA9IFtdXG5cbiAgICBsZXQgaXRlcmF0b3JPYmplY3QgPSBhd2FpdCBub2RlSXRlcmF0b3JGZWVkLm5leHQoKSAvLyBpbml0aWFsaXplIGdlbmVyYXRvciBmdW5jdGlvbiBleGVjdXRpb24gYW5kIHBhc3MgZXhlY3V0aW9uIGNvbmZpZ3VyYXRpb25zLlxuICAgIHdoaWxlICghaXRlcmF0b3JPYmplY3QuZG9uZSkge1xuICAgICAgeWllbGQgeyBub2RlOiBpdGVyYXRvck9iamVjdC52YWx1ZS5ub2RlIH1cbiAgICAgIGxldCBuZXh0UmVzdWx0ID0gYXdhaXQgZnVuY3Rpb24uc2VudC50cmF2ZXJzYWxQcm9taXNlXG4gICAgICBlbWl0KG5leHRSZXN1bHQpIC8vIGVtaXQgZm9yIGltbWVkaWF0ZSBjb25zdW1wdGlvblxuICAgICAgbm9kZVJlc3VsdExpc3QucHVzaChuZXh0UmVzdWx0KVxuICAgICAgaXRlcmF0b3JPYmplY3QgPSBhd2FpdCBub2RlSXRlcmF0b3JGZWVkLm5leHQoKVxuICAgIH1cblxuICAgIHJldHVybiBub2RlUmVzdWx0TGlzdFxuICB9LFxuXG4gIC8qKlxuICAgKiBSYWNlIHByb21pc2Ugb2Ygbm9kZXMgLSBmaXJzdCB0byByZXNvbHZlIGlzIHRoZSBvbmUgdG8gYmUgcmV0dXJuZWRcbiAgICovXG4gIHJhY2VGaXJzdFByb21pc2U6IGFzeW5jIGZ1bmN0aW9uKih7IG5vZGVJdGVyYXRvckZlZWQsIGVtaXQgfSkge1xuICAgIGxldCBub2RlUHJvbWlzZUFycmF5ID0gW11cblxuICAgIGxldCBpdGVyYXRvck9iamVjdCA9IGF3YWl0IG5vZGVJdGVyYXRvckZlZWQubmV4dCgpIC8vIGluaXRpYWxpemUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGV4ZWN1dGlvbiBhbmQgcGFzcyBleGVjdXRpb24gY29uZmlndXJhdGlvbnMuXG4gICAgd2hpbGUgKCFpdGVyYXRvck9iamVjdC5kb25lKSB7XG4gICAgICB5aWVsZCB7IG5vZGU6IGl0ZXJhdG9yT2JqZWN0LnZhbHVlLm5vZGUgfVxuICAgICAgbGV0IHRyYXZlcnNhbFByb21pc2UgPSBmdW5jdGlvbi5zZW50LnRyYXZlcnNhbFByb21pc2VcbiAgICAgIG5vZGVQcm9taXNlQXJyYXkucHVzaCh0cmF2ZXJzYWxQcm9taXNlKVxuICAgICAgaXRlcmF0b3JPYmplY3QgPSBhd2FpdCBub2RlSXRlcmF0b3JGZWVkLm5leHQoKVxuICAgIH1cblxuICAgIGxldCBub2RlUmVzb2x2ZWRSZXN1bHQgPSBhd2FpdCBwcm9taXNlUHJvcGVyUmFjZShub2RlUHJvbWlzZUFycmF5KVxuICAgICAgLnRoZW4ocmVzb2x2ZWRQcm9taXNlQXJyYXkgPT4ge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZWRQcm9taXNlQXJyYXlbMF0gLy8gYXMgb25seSBvbmUgcHJvbWlzZSBpcyByZXR1cm4gaW4gdGhlIGFycmF5IC0gdGhlIGZpcnN0IHByb21pc2UgdG8gYmUgcmVzb2x2ZWQuXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgLy8gVE9ETzogY2F0Y2ggYWxsIGVycm9yIGFuZCBvdXRwdXQgdGhlbSBmb3IgZWFjaCByZWplY3RlZCBwcm9taXNlLiAoZWRpdCBwcm9taXNlUHJvcGVyUmFjZSBtb2R1bGUpXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYPCflIDimqDvuI8gcHJvbWlzZVByb3BlclJhY2UgcmVqZWN0ZWQgYmVjYXVzZTogJHtlcnJvcn1gKVxuICAgICAgfSlcblxuICAgIGlmIChub2RlUmVzb2x2ZWRSZXN1bHQpIHtcbiAgICAgIGVtaXQobm9kZVJlc29sdmVkUmVzdWx0KSAvLyBlbWl0dGluZyByZXN1bHQgaXMgbm90IGltbWVkaWF0ZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgdGhlIG9iamVjdGl2ZSBpcyB0byBnZXQgYSBzaW5nbGUgcmVzb2x2ZWQgcHJvbWlzZSwgYW5kIFwicHJvbWlzZVByb3BlclJhY2VcIiBtYXliZSBkb2Vzbid0IGhhdmUgdGhlIGFiaWxpdHkgdG8gc3RvcCB1bmNvbXBsZXRlZCBwcm9taXNlcy5cbiAgICAgIHJldHVybiBbbm9kZVJlc29sdmVkUmVzdWx0XSAvLyByZXR1cm5lZCByZXN1bHRzIG11c3QgYmUgd3JhcHBlZCBpbiBhcnJheSBzbyBpdCBjb3VsZCBiZSBmb3J3YXJkZWQgdGhyb3VnaCB5ZWlsZCogZ2VuZXJhdG9yLlxuICAgIH0gZWxzZSByZXR1cm4gW11cbiAgfSxcblxuICAvKipcbiAgICogSW5zdXJlcyBhbGwgbm9kZUNvbm5lY3Rpb24gcHJvbWlzZXMgcmVzb2x2ZXMuXG4gICAqKi9cbiAgYWxsUHJvbWlzZTogYXN5bmMgZnVuY3Rpb24qKHsgbm9kZUl0ZXJhdG9yRmVlZCwgZW1pdCB9KSB7XG4gICAgbGV0IG5vZGVQcm9taXNlQXJyYXkgPSBbXSAvLyBvcmRlciBvZiBjYWxsIGluaXRpYWxpemF0aW9uXG4gICAgbGV0IHJlc29sdmVkT3JkZXJlZE5vZGVSZXNvbHZlZFJlc3VsdCA9IFtdIC8vIG9yZGVyIG9mIGNvbXBsZXRpb25cblxuICAgIGxldCBpdGVyYXRvck9iamVjdCA9IGF3YWl0IG5vZGVJdGVyYXRvckZlZWQubmV4dCgpIC8vIGluaXRpYWxpemUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGV4ZWN1dGlvbiBhbmQgcGFzcyBleGVjdXRpb24gY29uZmlndXJhdGlvbnMuXG4gICAgd2hpbGUgKCFpdGVyYXRvck9iamVjdC5kb25lKSB7XG4gICAgICB5aWVsZCB7IG5vZGU6IGl0ZXJhdG9yT2JqZWN0LnZhbHVlLm5vZGUgfVxuICAgICAgbGV0IHRyYXZlcnNhbFByb21pc2UgPSBmdW5jdGlvbi5zZW50LnRyYXZlcnNhbFByb21pc2UudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBlbWl0KHJlc3VsdCkgLy8gZW1pdCByZXN1bHQgZm9yIGltbWVkaWF0ZSB1c2FnZSBieSBsaXNudGVyc1xuICAgICAgICByZXNvbHZlZE9yZGVyZWROb2RlUmVzb2x2ZWRSZXN1bHQucHVzaChyZXN1bHQpIC8vIGFycmF5IG9mIG5vZGUgcHJvY2VzcyByZXN1bHRzLlxuICAgICAgfSkgLy8gYXJyYW5nZSBwcm9taXNlcyBhY2NvcmRpbmcgdG8gcmVzb2x1dGlvbiBvcmRlci5cbiAgICAgIG5vZGVQcm9taXNlQXJyYXkucHVzaCh0cmF2ZXJzYWxQcm9taXNlKSAvLyBwcm9taXNlcyBhcmUgaW4gdGhlIHNhbWUgYXJyYW5nbWVudCBvZiBjb25uZWN0aW9uIGl0ZXJhdGlvbi5cbiAgICAgIGl0ZXJhdG9yT2JqZWN0ID0gYXdhaXQgbm9kZUl0ZXJhdG9yRmVlZC5uZXh0KClcbiAgICB9XG5cbiAgICAvLyByZXNvbHZlIGFsbCBwcm9taXNlc1xuICAgIGxldCBub2RlUmVzb2x2ZWRSZXN1bHRBcnJheSA9IGF3YWl0IFByb21pc2UuYWxsKG5vZGVQcm9taXNlQXJyYXkpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5TWk5fREVCVUcgPT0gJ3RydWUnKSBjb25zb2xlLmVycm9yKGDwn5SA4pqg77iPIFxcYFByb21pc2UuYWxsXFxgIGZvciBub2RlQ29ubmVjdGlvbkFycmF5IHJlamVjdGVkIGJlY2F1c2U6ICR7ZXJyb3J9YClcbiAgICAgIGVsc2UgY29uc29sZS5sb2coZXJyb3IpXG4gICAgfSlcblxuICAgIC8vIG9yZGVyZWQgcmVzdWx0cyBhY2NvcmRpbmcgdG8gcHJvbWlzZSBjb21wbGV0aW9uLlxuICAgIHJldHVybiByZXNvbHZlZE9yZGVyZWROb2RlUmVzb2x2ZWRSZXN1bHQgLy8gcmV0dXJuIGZvciBhbGwgcmVzb2x2ZWQgcmVzdWx0c1xuXG4gICAgLy8gUHJlc2VydmVzIHRoZSBvcmRlciBvZiBub2RlcyBvcmlnaW5hbCBpbiBjb25uZWN0aW9uIGFycmF5LCBpLmUuIGRvZXMgbm90IG9yZGVyIHRoZSBub2RlIHJlc3VsdHMgYWNjb3JkaW5nIHRvIHRoZSBleGVjdXRpb24gY29tcGxldGlvbiwgcmF0aGVyIGFjY29yZGluZyB0byB0aGUgZmlyc3QgdmlzaXRlZCBkdXJpbmcgdHJhdmVyc2FsLlxuICAgIC8vIGZvciAobGV0IG5leHRSZXN1bHQgb2Ygbm9kZVJlc29sdmVkUmVzdWx0QXJyYXkpIHtcbiAgICAvLyAgIGVtaXQobmV4dFJlc3VsdClcbiAgICAvLyB9XG4gIH0sXG59XG4iXX0=