"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.forkEdge = forkEdge;var _skipFirstGeneratorNext2 = _interopRequireDefault(require("@babel/runtime/helpers/skipFirstGeneratorNext"));var _assert = _interopRequireDefault(require("assert"));
var _promiseProperRace = _interopRequireDefault(require("@dependency/promiseProperRace"));








async function* forkEdge({ stageNode, additionalChildNode, getImplementation, graphInstance = this }) {
  const { forkArray } = await graphInstance.databaseWrapper.getFork({ concreteDatabase: graphInstance.database, nodeID: stageNode.identity });
  if (forkArray.length == 0) return;

  forkArray.sort((former, latter) => former.connection.properties.order - latter.connection.properties.order);

  for (let forkEdge of forkArray) {
    (0, _assert.default)(forkEdge.destination.labels.includes(graphInstance.schemeReference.nodeLabel.port), `‚Ä¢ "${forkEdge.destination.labels}" Unsupported node type for a FORK connection.`);


    let implementation = getImplementation(forkEdge.destination.properties.implementation);
    let nodeIteratorFeed = implementation.call(graphInstance, { forkEdge, additionalChildNode, graphInstance });

    let traversalIterator = traversalIterator2WayCommunication({
      nodeIteratorFeed,
      implementation: handlePropagation[forkEdge.connection.properties.handlePropagationImplementation || 'chronological'] });


    yield {
      group: {
        traversalIterator,

        config: {
          forkEdge } } };



  }
}let _original_traversalIterator2WayCommunication = async function*










traversalIterator2WayCommunication({ nodeIteratorFeed, implementation }) {let _functionSent = yield;
  let { eventEmitterCallback } = _functionSent;

  let traversalIteratorFeed = implementation({ nodeIteratorFeed, emit: eventEmitterCallback });

  let iteratorObject = await traversalIteratorFeed.next();
  while (!iteratorObject.done) {
    _functionSent = yield { node: iteratorObject.value.node };
    iteratorObject = await traversalIteratorFeed.next({ traversalPromise: _functionSent.traversalPromise });
  }
  return iteratorObject.value;
},_modified_traversalIterator2WayCommunication = (0, _skipFirstGeneratorNext2.default)(_original_traversalIterator2WayCommunication);let traversalIterator2WayCommunication;traversalIterator2WayCommunication = new Proxy(_original_traversalIterator2WayCommunication, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_modified_traversalIterator2WayCommunication, thisArgument, argumentsList);} });











const handlePropagation = {



  chronological: (function () {let _ref = async function* ({ nodeIteratorFeed, emit }) {let _functionSent2 = yield;
      let nodeResultList = [];
      for await (let { node } of nodeIteratorFeed) {
        _functionSent2 = yield { node };
        let nextResult = await _functionSent2.traversalPromise;
        emit(nextResult);
        nodeResultList.push(nextResult);
      }
      return nodeResultList;
    },_ref2 = (0, _skipFirstGeneratorNext2.default)(_ref);return new Proxy(_ref, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref2, thisArgument, argumentsList);} });})(),

  chronological_implementationUsingWhileLoop: (function () {let _ref4 = async function* ({ nodeIteratorFeed, emit }) {let _functionSent3 = yield;
      let nodeResultList = [];

      let iteratorObject = await nodeIteratorFeed.next();
      while (!iteratorObject.done) {
        _functionSent3 = yield { node: iteratorObject.value.node };
        let nextResult = await _functionSent3.traversalPromise;
        emit(nextResult);
        nodeResultList.push(nextResult);
        iteratorObject = await nodeIteratorFeed.next();
      }

      return nodeResultList;
    },_ref5 = (0, _skipFirstGeneratorNext2.default)(_ref4);return new Proxy(_ref4, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref5, thisArgument, argumentsList);} });})(),




  raceFirstPromise: (function () {let _ref7 = async function* ({ nodeIteratorFeed, emit }) {let _functionSent4 = yield;
      let nodePromiseArray = [];

      let iteratorObject = await nodeIteratorFeed.next();
      while (!iteratorObject.done) {
        _functionSent4 = yield { node: iteratorObject.value.node };
        let traversalPromise = _functionSent4.traversalPromise;
        nodePromiseArray.push(traversalPromise);
        iteratorObject = await nodeIteratorFeed.next();
      }

      let nodeResolvedResult = await (0, _promiseProperRace.default)(nodePromiseArray).
      then(resolvedPromiseArray => {
        return resolvedPromiseArray[0];
      }).
      catch(error => {

        console.error(`üîÄ‚ö†Ô∏è promiseProperRace rejected because: ${error}`);
      });

      if (nodeResolvedResult) {
        emit(nodeResolvedResult);
        return [nodeResolvedResult];
      } else return [];
    },_ref8 = (0, _skipFirstGeneratorNext2.default)(_ref7);return new Proxy(_ref7, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref8, thisArgument, argumentsList);} });})(),




  allPromise: (function () {let _ref10 = async function* ({ nodeIteratorFeed, emit }) {let _functionSent5 = yield;
      let nodePromiseArray = [];
      let resolvedOrderedNodeResolvedResult = [];

      let iteratorObject = await nodeIteratorFeed.next();
      while (!iteratorObject.done) {
        _functionSent5 = yield { node: iteratorObject.value.node };
        let traversalPromise = _functionSent5.traversalPromise.then(result => {
          emit(result);
          resolvedOrderedNodeResolvedResult.push(result);
        });
        nodePromiseArray.push(traversalPromise);
        iteratorObject = await nodeIteratorFeed.next();
      }


      let nodeResolvedResultArray = await Promise.all(nodePromiseArray).catch(error => {
        if (process.env.SZN_DEBUG == 'true') console.error(`üîÄ‚ö†Ô∏è \`Promise.all\` for nodeConnectionArray rejected because: ${error}`);else
        console.log(error);
      });


      return resolvedOrderedNodeResolvedResult;





    },_ref11 = (0, _skipFirstGeneratorNext2.default)(_ref10);return new Proxy(_ref10, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref11, thisArgument, argumentsList);} });})() };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,