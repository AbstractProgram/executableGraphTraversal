"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.executeEdge = executeEdge;


async function executeEdge({ stageNode, nextProcessData, getImplementation, graph = this }, { additionalParameter, traverseCallContext }) {
  let execute;
  const { executeArray } = await graph.databaseWrapper.getExecution({ concreteDatabase: graph.database, nodeID: stageNode.identity });
  if (executeArray.length > 1) throw new Error(`â€¢ Multiple execute relationships are not supported in Stage node.`);else

    if (executeArray.length == 0) return null;else
    execute = executeArray[0];


  let implementation = getImplementation(execute.connection.properties.implementation);
  let processResult = await implementation.call(graph, { processNode: execute.destination, stageNode, nextProcessData }, { additionalParameter, traverseCallContext });


  processResult = graph.traverserInstruction.pipeProcess.pipeProcessing({ targetNode: execute.destination, processResult, graph });

  return processResult;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC9leGVjdXRlRWRnZS5qcyJdLCJuYW1lcyI6WyJleGVjdXRlRWRnZSIsInN0YWdlTm9kZSIsIm5leHRQcm9jZXNzRGF0YSIsImdldEltcGxlbWVudGF0aW9uIiwiZ3JhcGgiLCJhZGRpdGlvbmFsUGFyYW1ldGVyIiwidHJhdmVyc2VDYWxsQ29udGV4dCIsImV4ZWN1dGUiLCJleGVjdXRlQXJyYXkiLCJkYXRhYmFzZVdyYXBwZXIiLCJnZXRFeGVjdXRpb24iLCJjb25jcmV0ZURhdGFiYXNlIiwiZGF0YWJhc2UiLCJub2RlSUQiLCJpZGVudGl0eSIsImxlbmd0aCIsIkVycm9yIiwiaW1wbGVtZW50YXRpb24iLCJjb25uZWN0aW9uIiwicHJvcGVydGllcyIsInByb2Nlc3NSZXN1bHQiLCJwcm9jZXNzTm9kZSIsImRlc3RpbmF0aW9uIiwidHJhdmVyc2VySW5zdHJ1Y3Rpb24iLCJwaXBlUHJvY2VzcyIsInBpcGVQcm9jZXNzaW5nIiwidGFyZ2V0Tm9kZSJdLCJtYXBwaW5ncyI6Ijs7O0FBR08sZUFBZUEsV0FBZixDQUEyQixFQUFFQyxTQUFGLEVBQWFDLGVBQWIsRUFBOEJDLGlCQUE5QixFQUFpREMsS0FBSyxHQUFHLElBQXpELEVBQTNCLEVBQTRGLEVBQUVDLG1CQUFGLEVBQXVCQyxtQkFBdkIsRUFBNUYsRUFBMEk7QUFDL0ksTUFBSUMsT0FBSjtBQUNBLFFBQU0sRUFBRUMsWUFBRixLQUFtQixNQUFNSixLQUFLLENBQUNLLGVBQU4sQ0FBc0JDLFlBQXRCLENBQW1DLEVBQUVDLGdCQUFnQixFQUFFUCxLQUFLLENBQUNRLFFBQTFCLEVBQW9DQyxNQUFNLEVBQUVaLFNBQVMsQ0FBQ2EsUUFBdEQsRUFBbkMsQ0FBL0I7QUFDQSxNQUFJTixZQUFZLENBQUNPLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkIsTUFBTSxJQUFJQyxLQUFKLENBQVcsbUVBQVgsQ0FBTixDQUE3Qjs7QUFFSyxRQUFJUixZQUFZLENBQUNPLE1BQWIsSUFBdUIsQ0FBM0IsRUFBOEIsT0FBTyxJQUFQLENBQTlCO0FBQ0FSLElBQUFBLE9BQU8sR0FBR0MsWUFBWSxDQUFDLENBQUQsQ0FBdEI7OztBQUdMLE1BQUlTLGNBQWMsR0FBR2QsaUJBQWlCLENBQUNJLE9BQU8sQ0FBQ1csVUFBUixDQUFtQkMsVUFBbkIsQ0FBOEJGLGNBQS9CLENBQXRDO0FBQ0EsTUFBSUcsYUFBYSxHQUFHLE1BQWFILGNBQVAsTUFBQWIsS0FBSyxFQUFpQixFQUFFaUIsV0FBVyxFQUFFZCxPQUFPLENBQUNlLFdBQXZCLEVBQW9DckIsU0FBcEMsRUFBK0NDLGVBQS9DLEVBQWpCLEVBQW1GLEVBQUVHLG1CQUFGLEVBQXVCQyxtQkFBdkIsRUFBbkYsQ0FBL0I7OztBQUdBYyxFQUFBQSxhQUFhLEdBQUdoQixLQUFLLENBQUNtQixvQkFBTixDQUEyQkMsV0FBM0IsQ0FBdUNDLGNBQXZDLENBQXNELEVBQUVDLFVBQVUsRUFBRW5CLE9BQU8sQ0FBQ2UsV0FBdEIsRUFBbUNGLGFBQW5DLEVBQWtEaEIsS0FBbEQsRUFBdEQsQ0FBaEI7O0FBRUEsU0FBT2dCLGFBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0J1xuXG4vLyBSZXNwb25zaWJsZSBmb3IgcHJvY2Vzc2luZyBkYXRhLlxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVFZGdlKHsgc3RhZ2VOb2RlLCBuZXh0UHJvY2Vzc0RhdGEsIGdldEltcGxlbWVudGF0aW9uLCBncmFwaCA9IHRoaXMgfSwgeyBhZGRpdGlvbmFsUGFyYW1ldGVyLCB0cmF2ZXJzZUNhbGxDb250ZXh0IH0pIHtcbiAgbGV0IGV4ZWN1dGVcbiAgY29uc3QgeyBleGVjdXRlQXJyYXkgfSA9IGF3YWl0IGdyYXBoLmRhdGFiYXNlV3JhcHBlci5nZXRFeGVjdXRpb24oeyBjb25jcmV0ZURhdGFiYXNlOiBncmFwaC5kYXRhYmFzZSwgbm9kZUlEOiBzdGFnZU5vZGUuaWRlbnRpdHkgfSlcbiAgaWYgKGV4ZWN1dGVBcnJheS5sZW5ndGggPiAxKSB0aHJvdyBuZXcgRXJyb3IoYOKAoiBNdWx0aXBsZSBleGVjdXRlIHJlbGF0aW9uc2hpcHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gU3RhZ2Ugbm9kZS5gKVxuICAvLyBza2lwIGlmIG5vIGV4ZWN1dGUgY29ubmVjdGlvblxuICBlbHNlIGlmIChleGVjdXRlQXJyYXkubGVuZ3RoID09IDApIHJldHVybiBudWxsXG4gIGVsc2UgZXhlY3V0ZSA9IGV4ZWN1dGVBcnJheVswXVxuXG4gIC8vIEV4ZWN1dGUgbm9kZSBkYXRhSXRlbVxuICBsZXQgaW1wbGVtZW50YXRpb24gPSBnZXRJbXBsZW1lbnRhdGlvbihleGVjdXRlLmNvbm5lY3Rpb24ucHJvcGVydGllcy5pbXBsZW1lbnRhdGlvbikgLy8gbm9kZS9lZGdlIHByb3BlcnRpZXMgaW1wbGVtZW50YXRpb24gaGllcmFyY2h5IC0gY2FsY3VsYXRlIGFuZCBwaWNrIGNvcnJlY3QgaW1wbGVtZW50YXRpb24gYWNjb3JkaW5nIHRvIHBhcmFtZXRlciBoaWVyYXJjaHkuXG4gIGxldCBwcm9jZXNzUmVzdWx0ID0gYXdhaXQgZ3JhcGg6OmltcGxlbWVudGF0aW9uKHsgcHJvY2Vzc05vZGU6IGV4ZWN1dGUuZGVzdGluYXRpb24sIHN0YWdlTm9kZSwgbmV4dFByb2Nlc3NEYXRhIH0sIHsgYWRkaXRpb25hbFBhcmFtZXRlciwgdHJhdmVyc2VDYWxsQ29udGV4dCB9KVxuXG4gIC8vIGZ1cnRoZXIgcHJvY2Vzc2luZyBmcm9tIHBpcGUgcHJvY2VzcyBub2RlczpcbiAgcHJvY2Vzc1Jlc3VsdCA9IGdyYXBoLnRyYXZlcnNlckluc3RydWN0aW9uLnBpcGVQcm9jZXNzLnBpcGVQcm9jZXNzaW5nKHsgdGFyZ2V0Tm9kZTogZXhlY3V0ZS5kZXN0aW5hdGlvbiwgcHJvY2Vzc1Jlc3VsdCwgZ3JhcGggfSlcblxuICByZXR1cm4gcHJvY2Vzc1Jlc3VsdFxufVxuIl19