"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.executeEdge = executeEdge;


async function executeEdge({ stageNode, nextProcessData, aggregator, traversalConfig, getImplementation, graphInstance }, { additionalParameter, traverseCallContext }) {
  if (!traversalConfig.shouldExecuteProcess()) return null;

  let execute;
  const { executeArray } = await graphInstance.databaseWrapper.getExecution({ concreteDatabase: graphInstance.database, nodeID: stageNode.identity });
  if (executeArray.length > 1) throw new Error(`â€¢ Multiple execute relationships are not supported in Stage node.`);else

    if (executeArray.length == 0) return null;else
    execute = executeArray[0];


  let implementation = getImplementation(execute.connection.properties.implementation);
  let result = await implementation.call(stageNode, { processNode: execute.destination, stageNode, graphInstance, nextProcessData }, { additionalParameter, traverseCallContext });

  if (traversalConfig.shouldIncludeResult()) aggregator.add(result);
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC9leGVjdXRlRWRnZS5qcyJdLCJuYW1lcyI6WyJleGVjdXRlRWRnZSIsInN0YWdlTm9kZSIsIm5leHRQcm9jZXNzRGF0YSIsImFnZ3JlZ2F0b3IiLCJ0cmF2ZXJzYWxDb25maWciLCJnZXRJbXBsZW1lbnRhdGlvbiIsImdyYXBoSW5zdGFuY2UiLCJhZGRpdGlvbmFsUGFyYW1ldGVyIiwidHJhdmVyc2VDYWxsQ29udGV4dCIsInNob3VsZEV4ZWN1dGVQcm9jZXNzIiwiZXhlY3V0ZSIsImV4ZWN1dGVBcnJheSIsImRhdGFiYXNlV3JhcHBlciIsImdldEV4ZWN1dGlvbiIsImNvbmNyZXRlRGF0YWJhc2UiLCJkYXRhYmFzZSIsIm5vZGVJRCIsImlkZW50aXR5IiwibGVuZ3RoIiwiRXJyb3IiLCJpbXBsZW1lbnRhdGlvbiIsImNvbm5lY3Rpb24iLCJwcm9wZXJ0aWVzIiwicmVzdWx0IiwicHJvY2Vzc05vZGUiLCJkZXN0aW5hdGlvbiIsInNob3VsZEluY2x1ZGVSZXN1bHQiLCJhZGQiXSwibWFwcGluZ3MiOiI7OztBQUdPLGVBQWVBLFdBQWYsQ0FBMkIsRUFBRUMsU0FBRixFQUFhQyxlQUFiLEVBQThCQyxVQUE5QixFQUEwQ0MsZUFBMUMsRUFBMkRDLGlCQUEzRCxFQUE4RUMsYUFBOUUsRUFBM0IsRUFBMEgsRUFBRUMsbUJBQUYsRUFBdUJDLG1CQUF2QixFQUExSCxFQUF3SztBQUM3SyxNQUFJLENBQUNKLGVBQWUsQ0FBQ0ssb0JBQWhCLEVBQUwsRUFBNkMsT0FBTyxJQUFQOztBQUU3QyxNQUFJQyxPQUFKO0FBQ0EsUUFBTSxFQUFFQyxZQUFGLEtBQW1CLE1BQU1MLGFBQWEsQ0FBQ00sZUFBZCxDQUE4QkMsWUFBOUIsQ0FBMkMsRUFBRUMsZ0JBQWdCLEVBQUVSLGFBQWEsQ0FBQ1MsUUFBbEMsRUFBNENDLE1BQU0sRUFBRWYsU0FBUyxDQUFDZ0IsUUFBOUQsRUFBM0MsQ0FBL0I7QUFDQSxNQUFJTixZQUFZLENBQUNPLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkIsTUFBTSxJQUFJQyxLQUFKLENBQVcsbUVBQVgsQ0FBTixDQUE3Qjs7QUFFSyxRQUFJUixZQUFZLENBQUNPLE1BQWIsSUFBdUIsQ0FBM0IsRUFBOEIsT0FBTyxJQUFQLENBQTlCO0FBQ0FSLElBQUFBLE9BQU8sR0FBR0MsWUFBWSxDQUFDLENBQUQsQ0FBdEI7OztBQUdMLE1BQUlTLGNBQWMsR0FBR2YsaUJBQWlCLENBQUNLLE9BQU8sQ0FBQ1csVUFBUixDQUFtQkMsVUFBbkIsQ0FBOEJGLGNBQS9CLENBQXRDO0FBQ0EsTUFBSUcsTUFBTSxHQUFHLE1BQWlCSCxjQUFYLE1BQUFuQixTQUFTLEVBQWlCLEVBQUV1QixXQUFXLEVBQUVkLE9BQU8sQ0FBQ2UsV0FBdkIsRUFBb0N4QixTQUFwQyxFQUErQ0ssYUFBL0MsRUFBOERKLGVBQTlELEVBQWpCLEVBQWtHLEVBQUVLLG1CQUFGLEVBQXVCQyxtQkFBdkIsRUFBbEcsQ0FBNUI7O0FBRUEsTUFBSUosZUFBZSxDQUFDc0IsbUJBQWhCLEVBQUosRUFBMkN2QixVQUFVLENBQUN3QixHQUFYLENBQWVKLE1BQWY7QUFDM0MsU0FBT0EsTUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnXG5cbi8vIFJlc3BvbnNpYmxlIGZvciBwcm9jZXNzaW5nIGRhdGEuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUVkZ2UoeyBzdGFnZU5vZGUsIG5leHRQcm9jZXNzRGF0YSwgYWdncmVnYXRvciwgdHJhdmVyc2FsQ29uZmlnLCBnZXRJbXBsZW1lbnRhdGlvbiwgZ3JhcGhJbnN0YW5jZSB9LCB7IGFkZGl0aW9uYWxQYXJhbWV0ZXIsIHRyYXZlcnNlQ2FsbENvbnRleHQgfSkge1xuICBpZiAoIXRyYXZlcnNhbENvbmZpZy5zaG91bGRFeGVjdXRlUHJvY2VzcygpKSByZXR1cm4gbnVsbFxuXG4gIGxldCBleGVjdXRlXG4gIGNvbnN0IHsgZXhlY3V0ZUFycmF5IH0gPSBhd2FpdCBncmFwaEluc3RhbmNlLmRhdGFiYXNlV3JhcHBlci5nZXRFeGVjdXRpb24oeyBjb25jcmV0ZURhdGFiYXNlOiBncmFwaEluc3RhbmNlLmRhdGFiYXNlLCBub2RlSUQ6IHN0YWdlTm9kZS5pZGVudGl0eSB9KVxuICBpZiAoZXhlY3V0ZUFycmF5Lmxlbmd0aCA+IDEpIHRocm93IG5ldyBFcnJvcihg4oCiIE11bHRpcGxlIGV4ZWN1dGUgcmVsYXRpb25zaGlwcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBTdGFnZSBub2RlLmApXG4gIC8vIHNraXAgaWYgbm8gZXhlY3V0ZSBjb25uZWN0aW9uXG4gIGVsc2UgaWYgKGV4ZWN1dGVBcnJheS5sZW5ndGggPT0gMCkgcmV0dXJuIG51bGxcbiAgZWxzZSBleGVjdXRlID0gZXhlY3V0ZUFycmF5WzBdXG5cbiAgLy8gRXhlY3V0ZSBub2RlIGRhdGFJdGVtXG4gIGxldCBpbXBsZW1lbnRhdGlvbiA9IGdldEltcGxlbWVudGF0aW9uKGV4ZWN1dGUuY29ubmVjdGlvbi5wcm9wZXJ0aWVzLmltcGxlbWVudGF0aW9uKSAvLyBub2RlL2VkZ2UgcHJvcGVydGllcyBpbXBsZW1lbnRhdGlvbiBoaWVyYXJjaHkgLSBjYWxjdWxhdGUgYW5kIHBpY2sgY29ycmVjdCBpbXBsZW1lbnRhdGlvbiBhY2NvcmRpbmcgdG8gcGFyYW1ldGVyIGhpZXJhcmNoeS5cbiAgbGV0IHJlc3VsdCA9IGF3YWl0IHN0YWdlTm9kZTo6aW1wbGVtZW50YXRpb24oeyBwcm9jZXNzTm9kZTogZXhlY3V0ZS5kZXN0aW5hdGlvbiwgc3RhZ2VOb2RlLCBncmFwaEluc3RhbmNlLCBuZXh0UHJvY2Vzc0RhdGEgfSwgeyBhZGRpdGlvbmFsUGFyYW1ldGVyLCB0cmF2ZXJzZUNhbGxDb250ZXh0IH0pXG5cbiAgaWYgKHRyYXZlcnNhbENvbmZpZy5zaG91bGRJbmNsdWRlUmVzdWx0KCkpIGFnZ3JlZ2F0b3IuYWRkKHJlc3VsdClcbiAgcmV0dXJuIHJlc3VsdFxufVxuIl19