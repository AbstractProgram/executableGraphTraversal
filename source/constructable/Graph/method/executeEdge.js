"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.executeEdge = executeEdge;


async function executeEdge({ stageNode, nextProcessData, getImplementation, graph = this }, { additionalParameter, traverseCallContext }) {
  let execute;
  const { executeArray } = await graph.databaseWrapper.getExecution({ concreteDatabase: graph.database, nodeID: stageNode.identity });
  if (executeArray.length > 1) throw new Error(`â€¢ Multiple execute relationships are not supported in Stage node.`);else

    if (executeArray.length == 0) return null;else
    execute = executeArray[0];


  let implementation = getImplementation(execute.connection.properties.implementation);
  let processResult = await implementation.call(graph, { processNode: execute.destination, stageNode, nextProcessData }, { additionalParameter, traverseCallContext });


  processResult = await graph.traverserInstruction.pipeProcess.pipeProcessing({ targetNode: execute.destination, processResult, graph });

  return processResult;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC9leGVjdXRlRWRnZS5qcyJdLCJuYW1lcyI6WyJleGVjdXRlRWRnZSIsInN0YWdlTm9kZSIsIm5leHRQcm9jZXNzRGF0YSIsImdldEltcGxlbWVudGF0aW9uIiwiZ3JhcGgiLCJhZGRpdGlvbmFsUGFyYW1ldGVyIiwidHJhdmVyc2VDYWxsQ29udGV4dCIsImV4ZWN1dGUiLCJleGVjdXRlQXJyYXkiLCJkYXRhYmFzZVdyYXBwZXIiLCJnZXRFeGVjdXRpb24iLCJjb25jcmV0ZURhdGFiYXNlIiwiZGF0YWJhc2UiLCJub2RlSUQiLCJpZGVudGl0eSIsImxlbmd0aCIsIkVycm9yIiwiaW1wbGVtZW50YXRpb24iLCJjb25uZWN0aW9uIiwicHJvcGVydGllcyIsInByb2Nlc3NSZXN1bHQiLCJwcm9jZXNzTm9kZSIsImRlc3RpbmF0aW9uIiwidHJhdmVyc2VySW5zdHJ1Y3Rpb24iLCJwaXBlUHJvY2VzcyIsInBpcGVQcm9jZXNzaW5nIiwidGFyZ2V0Tm9kZSJdLCJtYXBwaW5ncyI6Ijs7O0FBR08sZUFBZUEsV0FBZixDQUEyQixFQUFFQyxTQUFGLEVBQWFDLGVBQWIsRUFBOEJDLGlCQUE5QixFQUFpREMsS0FBSyxHQUFHLElBQXpELEVBQTNCLEVBQTRGLEVBQUVDLG1CQUFGLEVBQXVCQyxtQkFBdkIsRUFBNUYsRUFBMEk7QUFDL0ksTUFBSUMsT0FBSjtBQUNBLFFBQU0sRUFBRUMsWUFBRixLQUFtQixNQUFNSixLQUFLLENBQUNLLGVBQU4sQ0FBc0JDLFlBQXRCLENBQW1DLEVBQUVDLGdCQUFnQixFQUFFUCxLQUFLLENBQUNRLFFBQTFCLEVBQW9DQyxNQUFNLEVBQUVaLFNBQVMsQ0FBQ2EsUUFBdEQsRUFBbkMsQ0FBL0I7QUFDQSxNQUFJTixZQUFZLENBQUNPLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkIsTUFBTSxJQUFJQyxLQUFKLENBQVcsbUVBQVgsQ0FBTixDQUE3Qjs7QUFFSyxRQUFJUixZQUFZLENBQUNPLE1BQWIsSUFBdUIsQ0FBM0IsRUFBOEIsT0FBTyxJQUFQLENBQTlCO0FBQ0FSLElBQUFBLE9BQU8sR0FBR0MsWUFBWSxDQUFDLENBQUQsQ0FBdEI7OztBQUdMLE1BQUlTLGNBQWMsR0FBR2QsaUJBQWlCLENBQUNJLE9BQU8sQ0FBQ1csVUFBUixDQUFtQkMsVUFBbkIsQ0FBOEJGLGNBQS9CLENBQXRDO0FBQ0EsTUFBSUcsYUFBYSxHQUFHLE1BQWFILGNBQVAsTUFBQWIsS0FBSyxFQUFpQixFQUFFaUIsV0FBVyxFQUFFZCxPQUFPLENBQUNlLFdBQXZCLEVBQW9DckIsU0FBcEMsRUFBK0NDLGVBQS9DLEVBQWpCLEVBQW1GLEVBQUVHLG1CQUFGLEVBQXVCQyxtQkFBdkIsRUFBbkYsQ0FBL0I7OztBQUdBYyxFQUFBQSxhQUFhLEdBQUcsTUFBTWhCLEtBQUssQ0FBQ21CLG9CQUFOLENBQTJCQyxXQUEzQixDQUF1Q0MsY0FBdkMsQ0FBc0QsRUFBRUMsVUFBVSxFQUFFbkIsT0FBTyxDQUFDZSxXQUF0QixFQUFtQ0YsYUFBbkMsRUFBa0RoQixLQUFsRCxFQUF0RCxDQUF0Qjs7QUFFQSxTQUFPZ0IsYUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnXG5cbi8vIFJlc3BvbnNpYmxlIGZvciBwcm9jZXNzaW5nIGRhdGEuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUVkZ2UoeyBzdGFnZU5vZGUsIG5leHRQcm9jZXNzRGF0YSwgZ2V0SW1wbGVtZW50YXRpb24sIGdyYXBoID0gdGhpcyB9LCB7IGFkZGl0aW9uYWxQYXJhbWV0ZXIsIHRyYXZlcnNlQ2FsbENvbnRleHQgfSkge1xuICBsZXQgZXhlY3V0ZVxuICBjb25zdCB7IGV4ZWN1dGVBcnJheSB9ID0gYXdhaXQgZ3JhcGguZGF0YWJhc2VXcmFwcGVyLmdldEV4ZWN1dGlvbih7IGNvbmNyZXRlRGF0YWJhc2U6IGdyYXBoLmRhdGFiYXNlLCBub2RlSUQ6IHN0YWdlTm9kZS5pZGVudGl0eSB9KVxuICBpZiAoZXhlY3V0ZUFycmF5Lmxlbmd0aCA+IDEpIHRocm93IG5ldyBFcnJvcihg4oCiIE11bHRpcGxlIGV4ZWN1dGUgcmVsYXRpb25zaGlwcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBTdGFnZSBub2RlLmApXG4gIC8vIHNraXAgaWYgbm8gZXhlY3V0ZSBjb25uZWN0aW9uXG4gIGVsc2UgaWYgKGV4ZWN1dGVBcnJheS5sZW5ndGggPT0gMCkgcmV0dXJuIG51bGxcbiAgZWxzZSBleGVjdXRlID0gZXhlY3V0ZUFycmF5WzBdXG5cbiAgLy8gRXhlY3V0ZSBub2RlIGRhdGFJdGVtXG4gIGxldCBpbXBsZW1lbnRhdGlvbiA9IGdldEltcGxlbWVudGF0aW9uKGV4ZWN1dGUuY29ubmVjdGlvbi5wcm9wZXJ0aWVzLmltcGxlbWVudGF0aW9uKSAvLyBub2RlL2VkZ2UgcHJvcGVydGllcyBpbXBsZW1lbnRhdGlvbiBoaWVyYXJjaHkgLSBjYWxjdWxhdGUgYW5kIHBpY2sgY29ycmVjdCBpbXBsZW1lbnRhdGlvbiBhY2NvcmRpbmcgdG8gcGFyYW1ldGVyIGhpZXJhcmNoeS5cbiAgbGV0IHByb2Nlc3NSZXN1bHQgPSBhd2FpdCBncmFwaDo6aW1wbGVtZW50YXRpb24oeyBwcm9jZXNzTm9kZTogZXhlY3V0ZS5kZXN0aW5hdGlvbiwgc3RhZ2VOb2RlLCBuZXh0UHJvY2Vzc0RhdGEgfSwgeyBhZGRpdGlvbmFsUGFyYW1ldGVyLCB0cmF2ZXJzZUNhbGxDb250ZXh0IH0pXG5cbiAgLy8gZnVydGhlciBwcm9jZXNzaW5nIGZyb20gcGlwZSBwcm9jZXNzIG5vZGVzOlxuICBwcm9jZXNzUmVzdWx0ID0gYXdhaXQgZ3JhcGgudHJhdmVyc2VySW5zdHJ1Y3Rpb24ucGlwZVByb2Nlc3MucGlwZVByb2Nlc3NpbmcoeyB0YXJnZXROb2RlOiBleGVjdXRlLmRlc3RpbmF0aW9uLCBwcm9jZXNzUmVzdWx0LCBncmFwaCB9KVxuXG4gIHJldHVybiBwcm9jZXNzUmVzdWx0XG59XG4iXX0=