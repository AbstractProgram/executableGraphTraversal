"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.executeEdge = executeEdge;


async function executeEdge({ stageNode, nextProcessData, getImplementation, graph = this }, { additionalParameter, traverseCallContext }) {
  let execute;
  const { executeArray } = await graph.databaseWrapper.getExecution({ concreteDatabase: graph.database, nodeID: stageNode.identity });
  if (executeArray.length > 1) throw new Error(`â€¢ Multiple execute relationships are not supported in Stage node.`);else

    if (executeArray.length == 0) return null;else
    execute = executeArray[0];


  let implementation = getImplementation(execute.connection.properties.implementation);
  let processResult = await implementation.call(graph, { processNode: execute.destination, stageNode, nextProcessData }, { additionalParameter, traverseCallContext });

  return processResult;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC9leGVjdXRlRWRnZS5qcyJdLCJuYW1lcyI6WyJleGVjdXRlRWRnZSIsInN0YWdlTm9kZSIsIm5leHRQcm9jZXNzRGF0YSIsImdldEltcGxlbWVudGF0aW9uIiwiZ3JhcGgiLCJhZGRpdGlvbmFsUGFyYW1ldGVyIiwidHJhdmVyc2VDYWxsQ29udGV4dCIsImV4ZWN1dGUiLCJleGVjdXRlQXJyYXkiLCJkYXRhYmFzZVdyYXBwZXIiLCJnZXRFeGVjdXRpb24iLCJjb25jcmV0ZURhdGFiYXNlIiwiZGF0YWJhc2UiLCJub2RlSUQiLCJpZGVudGl0eSIsImxlbmd0aCIsIkVycm9yIiwiaW1wbGVtZW50YXRpb24iLCJjb25uZWN0aW9uIiwicHJvcGVydGllcyIsInByb2Nlc3NSZXN1bHQiLCJwcm9jZXNzTm9kZSIsImRlc3RpbmF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7QUFHTyxlQUFlQSxXQUFmLENBQTJCLEVBQUVDLFNBQUYsRUFBYUMsZUFBYixFQUE4QkMsaUJBQTlCLEVBQWlEQyxLQUFLLEdBQUcsSUFBekQsRUFBM0IsRUFBNEYsRUFBRUMsbUJBQUYsRUFBdUJDLG1CQUF2QixFQUE1RixFQUEwSTtBQUMvSSxNQUFJQyxPQUFKO0FBQ0EsUUFBTSxFQUFFQyxZQUFGLEtBQW1CLE1BQU1KLEtBQUssQ0FBQ0ssZUFBTixDQUFzQkMsWUFBdEIsQ0FBbUMsRUFBRUMsZ0JBQWdCLEVBQUVQLEtBQUssQ0FBQ1EsUUFBMUIsRUFBb0NDLE1BQU0sRUFBRVosU0FBUyxDQUFDYSxRQUF0RCxFQUFuQyxDQUEvQjtBQUNBLE1BQUlOLFlBQVksQ0FBQ08sTUFBYixHQUFzQixDQUExQixFQUE2QixNQUFNLElBQUlDLEtBQUosQ0FBVyxtRUFBWCxDQUFOLENBQTdCOztBQUVLLFFBQUlSLFlBQVksQ0FBQ08sTUFBYixJQUF1QixDQUEzQixFQUE4QixPQUFPLElBQVAsQ0FBOUI7QUFDQVIsSUFBQUEsT0FBTyxHQUFHQyxZQUFZLENBQUMsQ0FBRCxDQUF0Qjs7O0FBR0wsTUFBSVMsY0FBYyxHQUFHZCxpQkFBaUIsQ0FBQ0ksT0FBTyxDQUFDVyxVQUFSLENBQW1CQyxVQUFuQixDQUE4QkYsY0FBL0IsQ0FBdEM7QUFDQSxNQUFJRyxhQUFhLEdBQUcsTUFBYUgsY0FBUCxNQUFBYixLQUFLLEVBQWlCLEVBQUVpQixXQUFXLEVBQUVkLE9BQU8sQ0FBQ2UsV0FBdkIsRUFBb0NyQixTQUFwQyxFQUErQ0MsZUFBL0MsRUFBakIsRUFBbUYsRUFBRUcsbUJBQUYsRUFBdUJDLG1CQUF2QixFQUFuRixDQUEvQjs7QUFFQSxTQUFPYyxhQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCdcblxuLy8gUmVzcG9uc2libGUgZm9yIHByb2Nlc3NpbmcgZGF0YS5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlRWRnZSh7IHN0YWdlTm9kZSwgbmV4dFByb2Nlc3NEYXRhLCBnZXRJbXBsZW1lbnRhdGlvbiwgZ3JhcGggPSB0aGlzIH0sIHsgYWRkaXRpb25hbFBhcmFtZXRlciwgdHJhdmVyc2VDYWxsQ29udGV4dCB9KSB7XG4gIGxldCBleGVjdXRlXG4gIGNvbnN0IHsgZXhlY3V0ZUFycmF5IH0gPSBhd2FpdCBncmFwaC5kYXRhYmFzZVdyYXBwZXIuZ2V0RXhlY3V0aW9uKHsgY29uY3JldGVEYXRhYmFzZTogZ3JhcGguZGF0YWJhc2UsIG5vZGVJRDogc3RhZ2VOb2RlLmlkZW50aXR5IH0pXG4gIGlmIChleGVjdXRlQXJyYXkubGVuZ3RoID4gMSkgdGhyb3cgbmV3IEVycm9yKGDigKIgTXVsdGlwbGUgZXhlY3V0ZSByZWxhdGlvbnNoaXBzIGFyZSBub3Qgc3VwcG9ydGVkIGluIFN0YWdlIG5vZGUuYClcbiAgLy8gc2tpcCBpZiBubyBleGVjdXRlIGNvbm5lY3Rpb25cbiAgZWxzZSBpZiAoZXhlY3V0ZUFycmF5Lmxlbmd0aCA9PSAwKSByZXR1cm4gbnVsbFxuICBlbHNlIGV4ZWN1dGUgPSBleGVjdXRlQXJyYXlbMF1cblxuICAvLyBFeGVjdXRlIG5vZGUgZGF0YUl0ZW1cbiAgbGV0IGltcGxlbWVudGF0aW9uID0gZ2V0SW1wbGVtZW50YXRpb24oZXhlY3V0ZS5jb25uZWN0aW9uLnByb3BlcnRpZXMuaW1wbGVtZW50YXRpb24pIC8vIG5vZGUvZWRnZSBwcm9wZXJ0aWVzIGltcGxlbWVudGF0aW9uIGhpZXJhcmNoeSAtIGNhbGN1bGF0ZSBhbmQgcGljayBjb3JyZWN0IGltcGxlbWVudGF0aW9uIGFjY29yZGluZyB0byBwYXJhbWV0ZXIgaGllcmFyY2h5LlxuICBsZXQgcHJvY2Vzc1Jlc3VsdCA9IGF3YWl0IGdyYXBoOjppbXBsZW1lbnRhdGlvbih7IHByb2Nlc3NOb2RlOiBleGVjdXRlLmRlc3RpbmF0aW9uLCBzdGFnZU5vZGUsIG5leHRQcm9jZXNzRGF0YSB9LCB7IGFkZGl0aW9uYWxQYXJhbWV0ZXIsIHRyYXZlcnNlQ2FsbENvbnRleHQgfSlcblxuICByZXR1cm4gcHJvY2Vzc1Jlc3VsdFxufVxuIl19