"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.executeEdge = executeEdge;


async function executeEdge({ stageNode, nextProcessData, aggregator, traversalConfig, getImplementation, graphInstance }, { additionalParameter, traverseCallContext }) {
  if (!traversalConfig.shouldExecuteProcess()) return null;

  let execute;
  const { executeArray } = await graphInstance.databaseWrapper.getExecution({ concreteDatabase: graphInstance.database, nodeID: stageNode.identity });
  if (executeArray.length > 1) throw new Error(`â€¢ Multiple execute relationships are not supported in Stage node.`);else

    if (executeArray.length == 0) return null;else
    execute = executeArray[0];


  let nodeImplementationKey;
  if (execute.connection.properties.implementation) nodeImplementationKey = { processNode: execute.connection.properties.implementation };
  let implementation = getImplementation({ nodeImplementationKey });


  let result = await implementation.call(stageNode, { processNode: execute.destination, stageNode, graphInstance, nextProcessData }, { additionalParameter, traverseCallContext });

  if (traversalConfig.shouldIncludeResult()) aggregator.add(result);
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC9leGVjdXRlRWRnZS5qcyJdLCJuYW1lcyI6WyJleGVjdXRlRWRnZSIsInN0YWdlTm9kZSIsIm5leHRQcm9jZXNzRGF0YSIsImFnZ3JlZ2F0b3IiLCJ0cmF2ZXJzYWxDb25maWciLCJnZXRJbXBsZW1lbnRhdGlvbiIsImdyYXBoSW5zdGFuY2UiLCJhZGRpdGlvbmFsUGFyYW1ldGVyIiwidHJhdmVyc2VDYWxsQ29udGV4dCIsInNob3VsZEV4ZWN1dGVQcm9jZXNzIiwiZXhlY3V0ZSIsImV4ZWN1dGVBcnJheSIsImRhdGFiYXNlV3JhcHBlciIsImdldEV4ZWN1dGlvbiIsImNvbmNyZXRlRGF0YWJhc2UiLCJkYXRhYmFzZSIsIm5vZGVJRCIsImlkZW50aXR5IiwibGVuZ3RoIiwiRXJyb3IiLCJub2RlSW1wbGVtZW50YXRpb25LZXkiLCJjb25uZWN0aW9uIiwicHJvcGVydGllcyIsImltcGxlbWVudGF0aW9uIiwicHJvY2Vzc05vZGUiLCJyZXN1bHQiLCJkZXN0aW5hdGlvbiIsInNob3VsZEluY2x1ZGVSZXN1bHQiLCJhZGQiXSwibWFwcGluZ3MiOiI7OztBQUdPLGVBQWVBLFdBQWYsQ0FBMkIsRUFBRUMsU0FBRixFQUFhQyxlQUFiLEVBQThCQyxVQUE5QixFQUEwQ0MsZUFBMUMsRUFBMkRDLGlCQUEzRCxFQUE4RUMsYUFBOUUsRUFBM0IsRUFBMEgsRUFBRUMsbUJBQUYsRUFBdUJDLG1CQUF2QixFQUExSCxFQUF3SztBQUM3SyxNQUFJLENBQUNKLGVBQWUsQ0FBQ0ssb0JBQWhCLEVBQUwsRUFBNkMsT0FBTyxJQUFQOztBQUU3QyxNQUFJQyxPQUFKO0FBQ0EsUUFBTSxFQUFFQyxZQUFGLEtBQW1CLE1BQU1MLGFBQWEsQ0FBQ00sZUFBZCxDQUE4QkMsWUFBOUIsQ0FBMkMsRUFBRUMsZ0JBQWdCLEVBQUVSLGFBQWEsQ0FBQ1MsUUFBbEMsRUFBNENDLE1BQU0sRUFBRWYsU0FBUyxDQUFDZ0IsUUFBOUQsRUFBM0MsQ0FBL0I7QUFDQSxNQUFJTixZQUFZLENBQUNPLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkIsTUFBTSxJQUFJQyxLQUFKLENBQVcsbUVBQVgsQ0FBTixDQUE3Qjs7QUFFSyxRQUFJUixZQUFZLENBQUNPLE1BQWIsSUFBdUIsQ0FBM0IsRUFBOEIsT0FBTyxJQUFQLENBQTlCO0FBQ0FSLElBQUFBLE9BQU8sR0FBR0MsWUFBWSxDQUFDLENBQUQsQ0FBdEI7OztBQUdMLE1BQUlTLHFCQUFKO0FBQ0EsTUFBSVYsT0FBTyxDQUFDVyxVQUFSLENBQW1CQyxVQUFuQixDQUE4QkMsY0FBbEMsRUFBa0RILHFCQUFxQixHQUFHLEVBQUVJLFdBQVcsRUFBRWQsT0FBTyxDQUFDVyxVQUFSLENBQW1CQyxVQUFuQixDQUE4QkMsY0FBN0MsRUFBeEI7QUFDbEQsTUFBSUEsY0FBYyxHQUFHbEIsaUJBQWlCLENBQUMsRUFBRWUscUJBQUYsRUFBRCxDQUF0Qzs7O0FBR0EsTUFBSUssTUFBTSxHQUFHLE1BQWlCRixjQUFYLE1BQUF0QixTQUFTLEVBQWlCLEVBQUV1QixXQUFXLEVBQUVkLE9BQU8sQ0FBQ2dCLFdBQXZCLEVBQW9DekIsU0FBcEMsRUFBK0NLLGFBQS9DLEVBQThESixlQUE5RCxFQUFqQixFQUFrRyxFQUFFSyxtQkFBRixFQUF1QkMsbUJBQXZCLEVBQWxHLENBQTVCOztBQUVBLE1BQUlKLGVBQWUsQ0FBQ3VCLG1CQUFoQixFQUFKLEVBQTJDeEIsVUFBVSxDQUFDeUIsR0FBWCxDQUFlSCxNQUFmO0FBQzNDLFNBQU9BLE1BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0J1xuXG4vLyBSZXNwb25zaWJsZSBmb3IgcHJvY2Vzc2luZyBkYXRhLlxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVFZGdlKHsgc3RhZ2VOb2RlLCBuZXh0UHJvY2Vzc0RhdGEsIGFnZ3JlZ2F0b3IsIHRyYXZlcnNhbENvbmZpZywgZ2V0SW1wbGVtZW50YXRpb24sIGdyYXBoSW5zdGFuY2UgfSwgeyBhZGRpdGlvbmFsUGFyYW1ldGVyLCB0cmF2ZXJzZUNhbGxDb250ZXh0IH0pIHtcbiAgaWYgKCF0cmF2ZXJzYWxDb25maWcuc2hvdWxkRXhlY3V0ZVByb2Nlc3MoKSkgcmV0dXJuIG51bGxcblxuICBsZXQgZXhlY3V0ZVxuICBjb25zdCB7IGV4ZWN1dGVBcnJheSB9ID0gYXdhaXQgZ3JhcGhJbnN0YW5jZS5kYXRhYmFzZVdyYXBwZXIuZ2V0RXhlY3V0aW9uKHsgY29uY3JldGVEYXRhYmFzZTogZ3JhcGhJbnN0YW5jZS5kYXRhYmFzZSwgbm9kZUlEOiBzdGFnZU5vZGUuaWRlbnRpdHkgfSlcbiAgaWYgKGV4ZWN1dGVBcnJheS5sZW5ndGggPiAxKSB0aHJvdyBuZXcgRXJyb3IoYOKAoiBNdWx0aXBsZSBleGVjdXRlIHJlbGF0aW9uc2hpcHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gU3RhZ2Ugbm9kZS5gKVxuICAvLyBza2lwIGlmIG5vIGV4ZWN1dGUgY29ubmVjdGlvblxuICBlbHNlIGlmIChleGVjdXRlQXJyYXkubGVuZ3RoID09IDApIHJldHVybiBudWxsXG4gIGVsc2UgZXhlY3V0ZSA9IGV4ZWN1dGVBcnJheVswXVxuXG4gIC8vIG5vZGUvZWRnZSBwcm9wZXJ0aWVzIGltcGxlbWVudGF0aW9uIGhpZXJhcmNoeVxuICBsZXQgbm9kZUltcGxlbWVudGF0aW9uS2V5IC8vIHRyYXZlcnNhbCBpbXBsZW1lbnRhdGlvIGtleVxuICBpZiAoZXhlY3V0ZS5jb25uZWN0aW9uLnByb3BlcnRpZXMuaW1wbGVtZW50YXRpb24pIG5vZGVJbXBsZW1lbnRhdGlvbktleSA9IHsgcHJvY2Vzc05vZGU6IGV4ZWN1dGUuY29ubmVjdGlvbi5wcm9wZXJ0aWVzLmltcGxlbWVudGF0aW9uIH1cbiAgbGV0IGltcGxlbWVudGF0aW9uID0gZ2V0SW1wbGVtZW50YXRpb24oeyBub2RlSW1wbGVtZW50YXRpb25LZXkgfSkgLy8gY2FsY3VsYXRlIGFuZCBwaWNrIGNvcnJlY3QgaW1wbGVtZW50YXRpb24gYWNjb3JkaW5nIHRvIHBhcmFtZXRlciBoaWVyYXJjaHkuXG5cbiAgLy8gRXhlY3V0ZSBub2RlIGRhdGFJdGVtXG4gIGxldCByZXN1bHQgPSBhd2FpdCBzdGFnZU5vZGU6OmltcGxlbWVudGF0aW9uKHsgcHJvY2Vzc05vZGU6IGV4ZWN1dGUuZGVzdGluYXRpb24sIHN0YWdlTm9kZSwgZ3JhcGhJbnN0YW5jZSwgbmV4dFByb2Nlc3NEYXRhIH0sIHsgYWRkaXRpb25hbFBhcmFtZXRlciwgdHJhdmVyc2VDYWxsQ29udGV4dCB9KVxuXG4gIGlmICh0cmF2ZXJzYWxDb25maWcuc2hvdWxkSW5jbHVkZVJlc3VsdCgpKSBhZ2dyZWdhdG9yLmFkZChyZXN1bHQpXG4gIHJldHVybiByZXN1bHRcbn1cbiJdfQ==