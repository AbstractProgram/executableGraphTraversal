"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.evaluatePosition = evaluatePosition;
var _graphSchemeReference = require("../../../graphModel/graphSchemeReference.js");
var _EvaluatorClass = require("../../Evaluator.class.js");
const Evaluator = (0, _EvaluatorClass.EvaluatorFunction)();

function extractEvaluationConfigProperty(propertyObject) {
  return Object.entries(propertyObject).reduce((accumulator, [key, value]) => {
    if (Object.keys(_EvaluatorClass.evaluationOption).includes(key)) accumulator[key] = value;
    return accumulator;
  }, {});
}





async function evaluatePosition({ evaluation, node, implementation, graphInstance = this }) {
  let { configureArray } = await graphInstance.databaseWrapper.getConfigure({ concreteDatabase: graphInstance.database, nodeID: node.identity });

  evaluation = new Evaluator({ propagation: _EvaluatorClass.evaluationOption.propagation.continue, aggregation: _EvaluatorClass.evaluationOption.aggregation.include });

  for (let configure of configureArray) {

    let nodeEvaluationConfig = {};
    if (configure.destination.labels.includes(_graphSchemeReference.nodeLabel.configuration)) {
      nodeEvaluationConfig = extractEvaluationConfigProperty(configure.destination.properties);
    } else if (configure.destination.labels.includes(_graphSchemeReference.nodeLabel.evaluation)) {
      nodeEvaluationConfig = await checkEvaluationNode({ node, configure, graphInstance, implementation });
    } else throw new Error(`â€¢ "${configure.destination.labels}" Unsupported node type for a NEXT connection.`);


    Object.assign(evaluation, nodeEvaluationConfig);
  }

  return evaluation;
}

async function checkEvaluationNode({ node, configure, graphInstance, implementation }) {var _evaluationNode$prope;
  let evaluationNode = configure.destination;
  const { resource, execute } = await graphInstance.databaseWrapper.getProcessElement({ concreteDatabase: graphInstance.database, nodeID: evaluationNode.identity });



  let checkResult;
  if ((_evaluationNode$prope = evaluationNode.properties) === null || _evaluationNode$prope === void 0 ? void 0 : _evaluationNode$prope.switchValue) {var _evaluationNode$prope2;
    checkResult = (_evaluationNode$prope2 = evaluationNode.properties) === null || _evaluationNode$prope2 === void 0 ? void 0 : _evaluationNode$prope2.switchValue;
  } else if (execute) {

    checkResult = await implementation({ node, configure: configure, execute, resource, graphInstance });
  } else {
    checkResult = undefined;
  }


  const { caseArray, default: defaultRelationship } = await graphInstance.databaseWrapper.getSwitchElement({ concreteDatabase: graphInstance.database, nodeID: evaluationNode.identity });
  let configurationProperty;
  if (caseArray) {

    let caseRelationship = caseArray.filter(caseRelationship => {var _caseRelationship$con;return ((_caseRelationship$con = caseRelationship.connection.properties) === null || _caseRelationship$con === void 0 ? void 0 : _caseRelationship$con.expected) == checkResult;})[0];
    configurationProperty = caseRelationship === null || caseRelationship === void 0 ? void 0 : caseRelationship.destination.properties;
  }
  configurationProperty || (configurationProperty = (defaultRelationship === null || defaultRelationship === void 0 ? void 0 : defaultRelationship.destination.properties) || {});
  return extractEvaluationConfigProperty(configurationProperty);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,