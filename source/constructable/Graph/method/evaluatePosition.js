"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.evaluatePosition = evaluatePosition;var _assert = _interopRequireDefault(require("assert"));
var _graphSchemeReference = require("../../../dataModel/graphSchemeReference.js");
var _extractPropertyFromObject = require("../../../utility/extractPropertyFromObject.js");





async function evaluatePosition({ node, graphInstance = this }) {
  let { configureArray } = await graphInstance.databaseWrapper.getConfigure({ concreteDatabase: graphInstance.database, nodeID: node.identity });


  let configurationMap = new Map();
  for (let configure of configureArray)
  if (configure.source.labels.includes(_graphSchemeReference.nodeLabel.reroute)) {

    let configurationNode = await graphInstance.traverse(
    {
      nodeInstance: configure.source,
      implementationKey: {
        [_graphSchemeReference.nodeLabel.reroute]: 'returnReference' } },


    {
      traverseCallContext: {
        targetNode: configure.destination } });



    (0, _assert.default)(configurationNode.labels.includes(_graphSchemeReference.nodeLabel.configuration), `â€¢ CONFIGURE sub-graph traversal must return a Configuration node.`);

    configurationMap.set(configure, configurationNode);
  }


  let implementationConfigurationArray = configureArray.
  filter(configure => configure.connection.properties.setting == 'implementation').
  map(configure => {
    let configuration;
    if (configurationMap.get(configure)) configuration = configurationMap.get(configure);else
    configuration = configure.source;
    return (0, _extractPropertyFromObject.extractConfigProperty)(configuration.properties, _graphSchemeReference.traversalOption);
  });
  let evaluationConfigurationArray = configureArray.
  filter(configure => configure.connection.properties.setting == 'evaluation').
  map(configure => {
    let configuration;
    if (configurationMap.get(configure)) configuration = configurationMap.get(configure);else
    configuration = configure.source;
    return (0, _extractPropertyFromObject.extractConfigProperty)(configuration.properties, _graphSchemeReference.evaluationOption);
  });


  let implementationConfiguration = implementationConfigurationArray.length > 0 ? Object.assign(...implementationConfigurationArray) : {};
  let evaluationConfiguration = evaluationConfigurationArray.length > 0 ? Object.assign(...evaluationConfigurationArray) : {};

  return { implementationConfiguration, evaluationConfiguration };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlL0dyYXBoL21ldGhvZC9ldmFsdWF0ZVBvc2l0aW9uLmpzIl0sIm5hbWVzIjpbImV2YWx1YXRlUG9zaXRpb24iLCJub2RlIiwiZ3JhcGhJbnN0YW5jZSIsImNvbmZpZ3VyZUFycmF5IiwiZGF0YWJhc2VXcmFwcGVyIiwiZ2V0Q29uZmlndXJlIiwiY29uY3JldGVEYXRhYmFzZSIsImRhdGFiYXNlIiwibm9kZUlEIiwiaWRlbnRpdHkiLCJjb25maWd1cmF0aW9uTWFwIiwiTWFwIiwiY29uZmlndXJlIiwic291cmNlIiwibGFiZWxzIiwiaW5jbHVkZXMiLCJub2RlTGFiZWwiLCJyZXJvdXRlIiwiY29uZmlndXJhdGlvbk5vZGUiLCJ0cmF2ZXJzZSIsIm5vZGVJbnN0YW5jZSIsImltcGxlbWVudGF0aW9uS2V5IiwidHJhdmVyc2VDYWxsQ29udGV4dCIsInRhcmdldE5vZGUiLCJkZXN0aW5hdGlvbiIsImNvbmZpZ3VyYXRpb24iLCJzZXQiLCJpbXBsZW1lbnRhdGlvbkNvbmZpZ3VyYXRpb25BcnJheSIsImZpbHRlciIsImNvbm5lY3Rpb24iLCJwcm9wZXJ0aWVzIiwic2V0dGluZyIsIm1hcCIsImdldCIsInRyYXZlcnNhbE9wdGlvbiIsImV2YWx1YXRpb25Db25maWd1cmF0aW9uQXJyYXkiLCJldmFsdWF0aW9uT3B0aW9uIiwiaW1wbGVtZW50YXRpb25Db25maWd1cmF0aW9uIiwibGVuZ3RoIiwiT2JqZWN0IiwiYXNzaWduIiwiZXZhbHVhdGlvbkNvbmZpZ3VyYXRpb24iXSwibWFwcGluZ3MiOiI0TUFBQTtBQUNBO0FBQ0E7Ozs7OztBQU1PLGVBQWVBLGdCQUFmLENBQWdDLEVBQUVDLElBQUYsRUFBUUMsYUFBYSxHQUFHLElBQXhCLEVBQWhDLEVBQWdFO0FBQ3JFLE1BQUksRUFBRUMsY0FBRixLQUFxQixNQUFNRCxhQUFhLENBQUNFLGVBQWQsQ0FBOEJDLFlBQTlCLENBQTJDLEVBQUVDLGdCQUFnQixFQUFFSixhQUFhLENBQUNLLFFBQWxDLEVBQTRDQyxNQUFNLEVBQUVQLElBQUksQ0FBQ1EsUUFBekQsRUFBM0MsQ0FBL0I7OztBQUdBLE1BQUlDLGdCQUFnQixHQUFHLElBQUlDLEdBQUosRUFBdkI7QUFDQSxPQUFLLElBQUlDLFNBQVQsSUFBc0JULGNBQXRCO0FBQ0UsTUFBSVMsU0FBUyxDQUFDQyxNQUFWLENBQWlCQyxNQUFqQixDQUF3QkMsUUFBeEIsQ0FBaUNDLGdDQUFVQyxPQUEzQyxDQUFKLEVBQXlEOztBQUV2RCxRQUFJQyxpQkFBaUIsR0FBRyxNQUFNaEIsYUFBYSxDQUFDaUIsUUFBZDtBQUM1QjtBQUNFQyxNQUFBQSxZQUFZLEVBQUVSLFNBQVMsQ0FBQ0MsTUFEMUI7QUFFRVEsTUFBQUEsaUJBQWlCLEVBQUU7QUFDakIsU0FBQ0wsZ0NBQVVDLE9BQVgsR0FBcUIsaUJBREosRUFGckIsRUFENEI7OztBQU81QjtBQUNFSyxNQUFBQSxtQkFBbUIsRUFBRTtBQUNuQkMsUUFBQUEsVUFBVSxFQUFFWCxTQUFTLENBQUNZLFdBREgsRUFEdkIsRUFQNEIsQ0FBOUI7Ozs7QUFhQSx5QkFBT04saUJBQWlCLENBQUNKLE1BQWxCLENBQXlCQyxRQUF6QixDQUFrQ0MsZ0NBQVVTLGFBQTVDLENBQVAsRUFBb0UsbUVBQXBFOztBQUVBZixJQUFBQSxnQkFBZ0IsQ0FBQ2dCLEdBQWpCLENBQXFCZCxTQUFyQixFQUFnQ00saUJBQWhDO0FBQ0Q7OztBQUdILE1BQUlTLGdDQUFnQyxHQUFHeEIsY0FBYztBQUNsRHlCLEVBQUFBLE1BRG9DLENBQzdCaEIsU0FBUyxJQUFJQSxTQUFTLENBQUNpQixVQUFWLENBQXFCQyxVQUFyQixDQUFnQ0MsT0FBaEMsSUFBMkMsZ0JBRDNCO0FBRXBDQyxFQUFBQSxHQUZvQyxDQUVoQ3BCLFNBQVMsSUFBSTtBQUNoQixRQUFJYSxhQUFKO0FBQ0EsUUFBSWYsZ0JBQWdCLENBQUN1QixHQUFqQixDQUFxQnJCLFNBQXJCLENBQUosRUFBcUNhLGFBQWEsR0FBR2YsZ0JBQWdCLENBQUN1QixHQUFqQixDQUFxQnJCLFNBQXJCLENBQWhCLENBQXJDO0FBQ0thLElBQUFBLGFBQWEsR0FBR2IsU0FBUyxDQUFDQyxNQUExQjtBQUNMLFdBQU8sc0RBQXNCWSxhQUFhLENBQUNLLFVBQXBDLEVBQWdESSxxQ0FBaEQsQ0FBUDtBQUNELEdBUG9DLENBQXZDO0FBUUEsTUFBSUMsNEJBQTRCLEdBQUdoQyxjQUFjO0FBQzlDeUIsRUFBQUEsTUFEZ0MsQ0FDekJoQixTQUFTLElBQUlBLFNBQVMsQ0FBQ2lCLFVBQVYsQ0FBcUJDLFVBQXJCLENBQWdDQyxPQUFoQyxJQUEyQyxZQUQvQjtBQUVoQ0MsRUFBQUEsR0FGZ0MsQ0FFNUJwQixTQUFTLElBQUk7QUFDaEIsUUFBSWEsYUFBSjtBQUNBLFFBQUlmLGdCQUFnQixDQUFDdUIsR0FBakIsQ0FBcUJyQixTQUFyQixDQUFKLEVBQXFDYSxhQUFhLEdBQUdmLGdCQUFnQixDQUFDdUIsR0FBakIsQ0FBcUJyQixTQUFyQixDQUFoQixDQUFyQztBQUNLYSxJQUFBQSxhQUFhLEdBQUdiLFNBQVMsQ0FBQ0MsTUFBMUI7QUFDTCxXQUFPLHNEQUFzQlksYUFBYSxDQUFDSyxVQUFwQyxFQUFnRE0sc0NBQWhELENBQVA7QUFDRCxHQVBnQyxDQUFuQzs7O0FBVUEsTUFBSUMsMkJBQTJCLEdBQUdWLGdDQUFnQyxDQUFDVyxNQUFqQyxHQUEwQyxDQUExQyxHQUE4Q0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsR0FBR2IsZ0NBQWpCLENBQTlDLEdBQW1HLEVBQXJJO0FBQ0EsTUFBSWMsdUJBQXVCLEdBQUdOLDRCQUE0QixDQUFDRyxNQUE3QixHQUFzQyxDQUF0QyxHQUEwQ0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsR0FBR0wsNEJBQWpCLENBQTFDLEdBQTJGLEVBQXpIOztBQUVBLFNBQU8sRUFBRUUsMkJBQUYsRUFBK0JJLHVCQUEvQixFQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCdcbmltcG9ydCB7IG5vZGVMYWJlbCwgY29ubmVjdGlvblR5cGUsIGNvbm5lY3Rpb25Qcm9wZXJ0eSwgZXZhbHVhdGlvbk9wdGlvbiwgdHJhdmVyc2FsT3B0aW9uIH0gZnJvbSAnLi4vLi4vLi4vZGF0YU1vZGVsL2dyYXBoU2NoZW1lUmVmZXJlbmNlLmpzJ1xuaW1wb3J0IHsgZXh0cmFjdENvbmZpZ1Byb3BlcnR5IH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0eS9leHRyYWN0UHJvcGVydHlGcm9tT2JqZWN0LmpzJ1xuXG4vKipcbiAqIE5vZGUncyBpbmNsdWRlL2V4Y2x1ZGUgZXZhbHVhdGlvbiAtIGV2YWx1YXRlIHdoZXRoZXIgb3Igbm90IGEgbm9kZSB3aG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIG5vZGUgZmVlZCBhbmQgc3Vic2VxdWVudGx5IGluIHRoZSB0cmF2ZXJzYWwuIGNvbnRpbnVlIGNoaWxkIG5vZGVzIHRyYXZlcnNhbCBvciBicmVhayB0cmF2ZXJzYWwuXG4gKiAmIHRyYXZlcnNhbCBpbXBsZW1lbnRhdGlvbiBjb25maWd1cmF0aW9uIC0gY2hvb3NlcyB0aGUgY3VzdG9tIGZ1bmN0aW9ucyB0byBiZSB1c2VkIGluIHRoZSB0cmF2ZXJzYWwuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBldmFsdWF0ZVBvc2l0aW9uKHsgbm9kZSwgZ3JhcGhJbnN0YW5jZSA9IHRoaXMgfSkge1xuICBsZXQgeyBjb25maWd1cmVBcnJheSB9ID0gYXdhaXQgZ3JhcGhJbnN0YW5jZS5kYXRhYmFzZVdyYXBwZXIuZ2V0Q29uZmlndXJlKHsgY29uY3JldGVEYXRhYmFzZTogZ3JhcGhJbnN0YW5jZS5kYXRhYmFzZSwgbm9kZUlEOiBub2RlLmlkZW50aXR5IH0pXG5cbiAgLy8gZXZhbHVhdGUgY29uZmlndXJhdGlvbiBieSB0cmF2ZXJzaW5nIHN1YmdyYXBoIG5vZGVzICh0cmF2ZXJzZSBzd2l0Y2ggc3RhZ2Ugbm9kZSkgJiByZXBsYWNlIGRlc3RpbmF0aW9uIG5vZGUgd2l0aCBhIGNvbmZpZ3VyYXRpb24gbm9kZTpcbiAgbGV0IGNvbmZpZ3VyYXRpb25NYXAgPSBuZXcgTWFwKCkgLy8gbWFwcyBldmFsdWF0ZWQgY29uZmlndXJhdGlvbiB0byB0aGUgQ09ORklHVVJFIHJlbGF0aW9uc2hpcHMuXG4gIGZvciAobGV0IGNvbmZpZ3VyZSBvZiBjb25maWd1cmVBcnJheSlcbiAgICBpZiAoY29uZmlndXJlLnNvdXJjZS5sYWJlbHMuaW5jbHVkZXMobm9kZUxhYmVsLnJlcm91dGUpKSB7XG4gICAgICAvLyBpZiByZXJvdXRlIG5vZGUsIHRoZW4gcmVxdWVzdCByZXNvbHV0aW9uIHRvIHRoZSByZWZlcmVuY2Ugbm9kZSAocnVuIGluIGEgc2VwYXJhdGUgdHJhdmVyc2FsIHJlY3Vyc2l2ZSBzY29wZXMpXG4gICAgICBsZXQgY29uZmlndXJhdGlvbk5vZGUgPSBhd2FpdCBncmFwaEluc3RhbmNlLnRyYXZlcnNlKFxuICAgICAgICB7XG4gICAgICAgICAgbm9kZUluc3RhbmNlOiBjb25maWd1cmUuc291cmNlLFxuICAgICAgICAgIGltcGxlbWVudGF0aW9uS2V5OiB7XG4gICAgICAgICAgICBbbm9kZUxhYmVsLnJlcm91dGVdOiAncmV0dXJuUmVmZXJlbmNlJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHJhdmVyc2VDYWxsQ29udGV4dDoge1xuICAgICAgICAgICAgdGFyZ2V0Tm9kZTogY29uZmlndXJlLmRlc3RpbmF0aW9uLCAvLyBwcm92aWRlIGFjY2VzcyBpbiB0aGUgcmVyb3V0ZSBmb3IgdGhlIHRhcmdldCBub2RlIGNhbGxlciByZXF1ZXN0aW5nIHRoZSByZXNvbHV0aW9uIG9mIHRoZSByZWZlcmVuY2UuXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIClcbiAgICAgIGFzc2VydChjb25maWd1cmF0aW9uTm9kZS5sYWJlbHMuaW5jbHVkZXMobm9kZUxhYmVsLmNvbmZpZ3VyYXRpb24pLCBg4oCiIENPTkZJR1VSRSBzdWItZ3JhcGggdHJhdmVyc2FsIG11c3QgcmV0dXJuIGEgQ29uZmlndXJhdGlvbiBub2RlLmApXG4gICAgICAvLyByZXBsYWNlIGRlc3RpbmF0aW9uIG5vZGUgd2l0aCBhcHByb3ByaWF0ZSBldmFsdWF0ZWQgY29uZmlndXJhdGlvbjpcbiAgICAgIGNvbmZpZ3VyYXRpb25NYXAuc2V0KGNvbmZpZ3VyZSwgY29uZmlndXJhdGlvbk5vZGUpXG4gICAgfVxuXG4gIC8vIGV4dHJhY3QgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzIGZyb20gY29uZmlndXJlIHJlbGF0aW9uc2hpcDpcbiAgbGV0IGltcGxlbWVudGF0aW9uQ29uZmlndXJhdGlvbkFycmF5ID0gY29uZmlndXJlQXJyYXlcbiAgICAuZmlsdGVyKGNvbmZpZ3VyZSA9PiBjb25maWd1cmUuY29ubmVjdGlvbi5wcm9wZXJ0aWVzLnNldHRpbmcgPT0gJ2ltcGxlbWVudGF0aW9uJylcbiAgICAubWFwKGNvbmZpZ3VyZSA9PiB7XG4gICAgICBsZXQgY29uZmlndXJhdGlvblxuICAgICAgaWYgKGNvbmZpZ3VyYXRpb25NYXAuZ2V0KGNvbmZpZ3VyZSkpIGNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uTWFwLmdldChjb25maWd1cmUpXG4gICAgICBlbHNlIGNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmUuc291cmNlXG4gICAgICByZXR1cm4gZXh0cmFjdENvbmZpZ1Byb3BlcnR5KGNvbmZpZ3VyYXRpb24ucHJvcGVydGllcywgdHJhdmVyc2FsT3B0aW9uKVxuICAgIH0pXG4gIGxldCBldmFsdWF0aW9uQ29uZmlndXJhdGlvbkFycmF5ID0gY29uZmlndXJlQXJyYXlcbiAgICAuZmlsdGVyKGNvbmZpZ3VyZSA9PiBjb25maWd1cmUuY29ubmVjdGlvbi5wcm9wZXJ0aWVzLnNldHRpbmcgPT0gJ2V2YWx1YXRpb24nKVxuICAgIC5tYXAoY29uZmlndXJlID0+IHtcbiAgICAgIGxldCBjb25maWd1cmF0aW9uXG4gICAgICBpZiAoY29uZmlndXJhdGlvbk1hcC5nZXQoY29uZmlndXJlKSkgY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb25NYXAuZ2V0KGNvbmZpZ3VyZSlcbiAgICAgIGVsc2UgY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyZS5zb3VyY2VcbiAgICAgIHJldHVybiBleHRyYWN0Q29uZmlnUHJvcGVydHkoY29uZmlndXJhdGlvbi5wcm9wZXJ0aWVzLCBldmFsdWF0aW9uT3B0aW9uKVxuICAgIH0pXG5cbiAgLy8gbWVyZ2UgbXVsdGlwbGUgY29uZmlndXJhdGlvbnMgb2YgdGhlIHNhbWUgdHlwZVxuICBsZXQgaW1wbGVtZW50YXRpb25Db25maWd1cmF0aW9uID0gaW1wbGVtZW50YXRpb25Db25maWd1cmF0aW9uQXJyYXkubGVuZ3RoID4gMCA/IE9iamVjdC5hc3NpZ24oLi4uaW1wbGVtZW50YXRpb25Db25maWd1cmF0aW9uQXJyYXkpIDoge31cbiAgbGV0IGV2YWx1YXRpb25Db25maWd1cmF0aW9uID0gZXZhbHVhdGlvbkNvbmZpZ3VyYXRpb25BcnJheS5sZW5ndGggPiAwID8gT2JqZWN0LmFzc2lnbiguLi5ldmFsdWF0aW9uQ29uZmlndXJhdGlvbkFycmF5KSA6IHt9XG5cbiAgcmV0dXJuIHsgaW1wbGVtZW50YXRpb25Db25maWd1cmF0aW9uLCBldmFsdWF0aW9uQ29uZmlndXJhdGlvbiB9XG59XG4iXX0=