"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.evaluatePosition = evaluatePosition;var _assert = _interopRequireDefault(require("assert"));
var schemeReference = _interopRequireWildcard(require("../../../dataModel/graphSchemeReference.js"));
var _extractPropertyFromObject = require("../../../utility/extractPropertyFromObject.js");





async function evaluatePosition({ traverser, graph = this }) {
  const { node } = traverser;
  let { configureArray } = await graph.databaseWrapper.getConfigure({ concreteDatabase: graph.database, nodeID: node.identity });


  let configurationMap = new Map();
  for (let configure of configureArray)
  if (configure.source.labels.includes(schemeReference.nodeLabel.reroute)) {

    let configurationNode = await graph.traverse.call(graph,
    {
      nodeInstance: configure.source,
      implementationKey: {
        [schemeReference.nodeLabel.reroute]: 'returnReference' } },


    {
      traverseCallContext: {
        targetNode: configure.destination } });



    if (!configurationNode) continue;
    (0, _assert.default)(configurationNode && configurationNode.labels.includes(schemeReference.nodeLabel.configuration), `â€¢ CONFIGURE sub-graph traversal must return a Configuration node.`);

    configurationMap.set(configure, configurationNode);
  }


  let implementationConfigurationArray = configureArray.
  filter(configure => configure.connection.properties.setting == 'implementation').
  map(configure => {
    let configuration;
    if (configurationMap.get(configure)) configuration = configurationMap.get(configure);else
    configuration = configure.source;
    return (0, _extractPropertyFromObject.extractConfigProperty)(configuration.properties, schemeReference.traversalOption);
  });
  let evaluationConfigurationArray = configureArray.
  filter(configure => configure.connection.properties.setting == 'evaluation').
  map(configure => {
    let configuration;
    if (configurationMap.get(configure)) configuration = configurationMap.get(configure);else
    configuration = configure.source;
    return (0, _extractPropertyFromObject.extractConfigProperty)(configuration.properties, schemeReference.evaluationOption);
  });


  let implementationConfiguration = implementationConfigurationArray.length > 0 ? Object.assign(...implementationConfigurationArray) : {};
  let evaluationConfiguration = evaluationConfigurationArray.length > 0 ? Object.assign(...evaluationConfigurationArray) : {};

  return { implementationConfiguration, evaluationConfiguration };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,