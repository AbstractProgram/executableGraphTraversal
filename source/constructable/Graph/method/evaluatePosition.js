"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.evaluatePosition = evaluatePosition;var _assert = _interopRequireDefault(require("assert"));
var _graphSchemeReference = require("../../../dataModel/graphSchemeReference.js");
var _extractPropertyFromObject = require("../../../utility/extractPropertyFromObject.js");





async function evaluatePosition({ node, graphInstance = this }) {
  let { configureArray } = await graphInstance.databaseWrapper.getConfigure({ concreteDatabase: graphInstance.database, nodeID: node.identity });


  let configurationMap = new Map();
  for (let configure of configureArray)
  if (configure.source.labels.includes(_graphSchemeReference.nodeLabel.reroute)) {

    let configurationNode = await graphInstance.traverse(
    {
      nodeInstance: configure.source,
      implementationKey: {
        [_graphSchemeReference.nodeLabel.reroute]: 'returnReference' } },


    {
      traverseCallContext: {
        targetNode: configure.destination } });



    if (!configurationNode) continue;
    (0, _assert.default)(configurationNode && configurationNode.labels.includes(_graphSchemeReference.nodeLabel.configuration), `â€¢ CONFIGURE sub-graph traversal must return a Configuration node.`);

    configurationMap.set(configure, configurationNode);
  }


  let implementationConfigurationArray = configureArray.
  filter(configure => configure.connection.properties.setting == 'implementation').
  map(configure => {
    let configuration;
    if (configurationMap.get(configure)) configuration = configurationMap.get(configure);else
    configuration = configure.source;
    return (0, _extractPropertyFromObject.extractConfigProperty)(configuration.properties, _graphSchemeReference.traversalOption);
  });
  let evaluationConfigurationArray = configureArray.
  filter(configure => configure.connection.properties.setting == 'evaluation').
  map(configure => {
    let configuration;
    if (configurationMap.get(configure)) configuration = configurationMap.get(configure);else
    configuration = configure.source;
    return (0, _extractPropertyFromObject.extractConfigProperty)(configuration.properties, _graphSchemeReference.evaluationOption);
  });


  let implementationConfiguration = implementationConfigurationArray.length > 0 ? Object.assign(...implementationConfigurationArray) : {};
  let evaluationConfiguration = evaluationConfigurationArray.length > 0 ? Object.assign(...evaluationConfigurationArray) : {};

  return { implementationConfiguration, evaluationConfiguration };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,