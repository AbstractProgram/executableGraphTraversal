"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.evaluatePosition = evaluatePosition;var _assert = _interopRequireDefault(require("assert"));
var _graphSchemeReference = require("../../../graphModel/graphSchemeReference.js");
var _extractPropertyFromObject = require("../../../utility/extractPropertyFromObject.js");





async function evaluatePosition({ node, graphInstance = this }) {
  let { configureArray } = await graphInstance.databaseWrapper.getConfigure({ concreteDatabase: graphInstance.database, nodeID: node.identity });


  let configurationMap = new Map();
  for (let configure of configureArray)
  if (configure.source.labels.includes(_graphSchemeReference.nodeLabel.stage)) {

    let configurationNodeArray = await graphInstance.traverse(




    {
      nodeInstance: configure.source,
      implementationKey: {
        processData: 'switchCase',
        traversalInterception: 'traverseThenProcessWithLogicalOperator',
        aggregator: 'ConditionAggregator' } },


    {
      traverseCallContext: {
        targetNode: configure.destination } });



    if (configurationNodeArray.length > 1) throw new Error('• CONFIGURE relationship that returns multiple configurations is not supported.');else
    if (configurationNodeArray.length != 0) {
      let configurationNode = configurationNodeArray[0];
      (0, _assert.default)(configurationNode.labels.includes(_graphSchemeReference.nodeLabel.configuration), `• CONFIGURE sub-graph traversal must return a Configuration node.`);

      configurationMap.set(configure, configurationNode);
    }
  }


  let implementationConfigurationArray = configureArray.
  filter(configure => configure.connection.properties.setting == 'implementation').
  map(configure => {
    let configuration;
    if (configurationMap.get(configure)) configuration = configurationMap.get(configure);else
    configuration = configure.source;
    return (0, _extractPropertyFromObject.extractConfigProperty)(configuration.properties, _graphSchemeReference.traversalOption);
  });
  let evaluationConfigurationArray = configureArray.
  filter(configure => configure.connection.properties.setting == 'evaluation').
  map(configure => {
    let configuration;
    if (configurationMap.get(configure)) configuration = configurationMap.get(configure);else
    configuration = configure.source;
    return (0, _extractPropertyFromObject.extractConfigProperty)(configuration.properties, _graphSchemeReference.evaluationOption);
  });


  let implementationConfiguration = implementationConfigurationArray.length > 0 ? Object.assign(...implementationConfigurationArray) : {};
  let evaluationConfiguration = evaluationConfigurationArray.length > 0 ? Object.assign(...evaluationConfigurationArray) : {};

  return { implementationConfiguration, evaluationConfiguration };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,