"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.Traverser = void 0;var _assert = _interopRequireDefault(require("assert"));
var _events = _interopRequireDefault(require("events"));
var _removeUndefinedFromObject = require("../../utility/removeUndefinedFromObject.js");
var schemeReference = _interopRequireWildcard(require("../../dataModel/graphSchemeReference.js"));
var stageNode = _interopRequireWildcard(require("./method/stageNode.js"));
var rerouteNode = _interopRequireWildcard(require("./method/rerouteNode.js"));








class Traverser {





















  static getEntrypointNodeType({ node }) {
    for (let nodeLabel of Traverser.entrypointNodeArray) if (node.labels.includes(nodeLabel)) return nodeLabel;

    throw new Error(`• Unsupported entrypoint node type for traversal function - ${node.labels}`);
  }












  constructor({
    node,
    graph,
    depth = 0,
    path = null,

    eventEmitter = new _events.default(),
    parentTraverser })
  {var _ref, _graph$context;this.traversalImplementationHierarchy = {};this.evaluationHierarchy = {};
    this.node = node;
    this.graph = graph;
    this.path = parentTraverser ? parentTraverser.path : path;
    this.depth = parentTraverser ? parentTraverser.depth + 1 : depth;
    this.eventEmitter = eventEmitter;

    this.traversalImplementationHierarchy = {

      context: (_ref = ((_graph$context = graph.context) === null || _graph$context === void 0 ? void 0 : _graph$context.implementationKey) || {}, (0, _removeUndefinedFromObject.removeUndefinedFromObject)(_ref)),


      parent: parentTraverser ? parentTraverser.getTraversalImplementationKey() || {} : {} };

    this.evaluationHierarchy = {};

    return this;
  }


  initialize() {
    if (!this.aggregator) {
      let Aggregator = this.getImplementationCallback({ key: 'aggregator' })();
      this.aggregator = new Aggregator();
    }
  }

  setEvaluationHierarchy(parameterType, evaluation) {
    if (!this.evaluationHierarchy[parameterType]) this.evaluationHierarchy[parameterType] = {};
    Object.assign(this.evaluationHierarchy[parameterType], evaluation);
  }

  setImplementationHierarchy(parameterType, implementationKey) {
    if (!this.traversalImplementationHierarchy[parameterType]) this.traversalImplementationHierarchy[parameterType] = {};
    Object.assign(this.traversalImplementationHierarchy[parameterType], implementationKey);
  }

  calculateConfig() {
    return {
      evaluation: this.calculateEvaluationHierarchy(),
      implementation: this.getAllImplementation() };

  }

  getEntrypointNodeImplementation({ nodeLabel = this.node.entrypointNodeType, implementationKey } = {}) {
    let implementationPropertyName = `${nodeLabel}_implementation`;
    implementationKey || (implementationKey = this.node.properties[implementationPropertyName] ? this.node.properties[implementationPropertyName] : undefined);
    let nodeImplementationKey = implementationKey ? { [nodeLabel]: implementationKey } : undefined;

    let calculatedImplementationKey = this.getTraversalImplementationKey({ key: nodeLabel, nodeImplementationKey });
    return Traverser.entrypointNodeImplementation[nodeLabel][calculatedImplementationKey];
  }

  getAllImplementation() {
    let implementationKey = this.getTraversalImplementationKey();
    let implementation = {
      processNode: this.graph.traversal.processNode[implementationKey.processNode],
      portNode: this.graph.traversal.portNode[implementationKey.portNode],
      traversalInterception: this.graph.traversal.traversalInterception[implementationKey.traversalInterception],
      aggregator: this.graph.traversal.aggregator[implementationKey.aggregator] };

    Object.entries(implementation).forEach(([key, value]) => {
      (0, _assert.default)(
      Boolean(value),
      `• All traversal implementation concerete functions must be registered, the implementationKey "${key}" provided doesn't match any of the registered implementaions - ${implementation[key]}`);

    });
    return implementation;
  }

  getImplementationCallback({ key }) {
    let getTraversalImplementationKey = this.getTraversalImplementationKey;
    return ({ nodeImplementationKey } = {}) => {
      let implementationKey = this.getTraversalImplementationKey({ key: key, nodeImplementationKey });
      let implementation = this.graph.traversal[key][implementationKey];
      (0, _assert.default)(implementation, `• 'implementation' concerete function must be registered, the implementationKey "${implementationKey}" provided doesn't match any of the registered implementaions.`);
      return implementation;
    };
  }


  getTraversalImplementationKey({ key, nodeImplementationKey } = {}) {
    let implementationKey = this.calculateImplementationHierarchy({ nodeImplementationKey });
    if (key) return implementationKey[key];else
    return implementationKey;
  }

  calculateImplementationHierarchy({ nodeImplementationKey = {} } = {}) {



    let implementationKey = Object.assign(
    {},

    Traverser.defaultTraversalImplementationKey,

    this.traversalImplementationHierarchy.context,

    this.traversalImplementationHierarchy.parent,

    this.traversalImplementationHierarchy.configuration,

    nodeImplementationKey,

    this.traversalImplementationHierarchy.parameter);

    return implementationKey;
  }

  calculateEvaluationHierarchy() {
    this.evaluation = Object.assign({}, Traverser.defaultEvaluationHierarchyKey, this.evaluationHierarchy.configuration, this.evaluationHierarchy.parameter);
    return this.evaluation;
  }



  shouldContinue() {
    switch (this.evaluation.propagation) {
      case schemeReference.evaluationOption.propagation.continue:
        return true;
        break;
      case schemeReference.evaluationOption.propagation.break:
      case schemeReference.evaluationOption.propagation.hult:
        return false;
        break;
      default:
        throw new Error(`• Unknown option for 'evaluator.propagation' = ${this.evaluation.propagation}.`);
        break;}

  }
  shouldIncludeResult() {
    switch (this.evaluation.aggregation) {
      case schemeReference.evaluationOption.aggregation.include:
        return true;
        break;
      case schemeReference.evaluationOption.aggregation.exclude:
      case schemeReference.evaluationOption.aggregation.skip:
        return false;
        break;
      default:
        throw new Error(`• Unknown option for 'evaluator.aggregation' = ${this.evaluation.aggregation}.`);
        break;}

  }
  shouldExecuteProcess() {
    switch (this.evaluation.aggregation) {
      case schemeReference.evaluationOption.aggregation.include:
      case schemeReference.evaluationOption.aggregation.exclude:
        return true;
        break;
      case schemeReference.evaluationOption.aggregation.skip:
        return false;
        break;
      default:
        throw new Error(`• Unknown option for 'evaluator.aggregation' = ${this.evaluation.aggregation}.`);
        break;}

  }}exports.Traverser = Traverser;Traverser.defaultEvaluationHierarchyKey = { propagation: schemeReference.evaluationOption.propagation.continue, aggregation: schemeReference.evaluationOption.aggregation.include };Traverser.defaultTraversalImplementationKey = { processNode: 'returnDataItemKey', portNode: 'propagationControl', aggregator: 'AggregatorArray', traversalInterception: 'processThenTraverse', [schemeReference.nodeLabel.reroute]: 'traverseReference', [schemeReference.nodeLabel.stage]: 'stageNode' };Traverser.entrypointNodeImplementation = { [schemeReference.nodeLabel.reroute]: rerouteNode, [schemeReference.nodeLabel.stage]: stageNode };Traverser.entrypointNodeArray = [schemeReference.nodeLabel.reroute, schemeReference.nodeLabel.stage];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,