"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });var _exportNames = { load: true, print: true, count: true, traverse: true, databaseWrapper: true };exports.load = load;exports.print = print;exports.count = count;exports.databaseWrapper = exports.traverse = void 0;var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));var _events = _interopRequireDefault(require("events"));
var _assert = _interopRequireDefault(require("assert"));
var _proxifyMethodDecorator = require("../../utility/proxifyMethodDecorator.js");
var _mergeDefaultParameter = require("../../utility/mergeDefaultParameter.js");
var _removeUndefinedFromObject = require("../../utility/removeUndefinedFromObject.js");
var _ContextClass = require("../Context.class.js");

var _graphSchemeReference = require("../../graphModel/graphSchemeReference.js");


var _evaluatePosition = require("./method/evaluatePosition.js");Object.keys(_evaluatePosition).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _evaluatePosition[key];} });});
var _traverseNode = require("./method/traverseNode.js");Object.keys(_traverseNode).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _traverseNode[key];} });});
var _handlePropagation = require("./method/handlePropagation.js");Object.keys(_handlePropagation).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _handlePropagation[key];} });});
var _laodSubgraphTemplateParameter = require("./method/laodSubgraphTemplateParameter.js");Object.keys(_laodSubgraphTemplateParameter).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _laodSubgraphTemplateParameter[key];} });});
var _dataProcess = require("./method/dataProcess.js");Object.keys(_dataProcess).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _dataProcess[key];} });});
var _recursiveIteration = require("./method/recursiveIteration.js");Object.keys(_recursiveIteration).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _recursiveIteration[key];} });});var _databaseWrapper = _interopRequireWildcard(require("../../graphModel/concreteDatabaseWrapper.js"));exports.databaseWrapper = _databaseWrapper;var _dec, _dec2, _dec3, _obj;



async function load({ graphData, graphInstance = this } = {}) {

  (0, _assert.default)(graphData.node && graphData.edge, `• Graph data object must contain node & edge arrays.`);
  return await graphInstance.database.loadGraphData({ nodeEntryData: graphData.node, connectionEntryData: graphData.edge });
}

async function print({ graphInstance = this } = {}) {
  console.log(`______ Graph elements: ____________________`);
  let count = await graphInstance.count();
  let allNode = await graphInstance.database.getAllNode();
  let allEdge = await graphInstance.database.getAllEdge();
  console.log(`#Vertex = ${count.node}`);
  for (let node of allNode) {
    console.log(node.identity);
  }
  console.log(`\n#Edge = ${count.connection}`);
  for (let edge of allEdge) {
    console.log(`${edge.start} --> ${edge.end}`);
  }
  console.log(`___________________________________________`);
}

async function count({ graphInstance = this } = {}) {

  return {
    node: await graphInstance.database.countNode(),
    connection: await graphInstance.database.countEdge() };

}


const { traverse } = (_dec =



(0, _proxifyMethodDecorator.proxifyMethodDecorator)(async (target, thisArg, argumentsList, targetClass, methodName) => {

  let { nodeInstance, nodeKey, nodeID, graphInstance = thisArg } = argumentsList[0];
  let nodeData;
  if (nodeInstance) {
    nodeData = nodeInstance;
  } else if (nodeKey) {
    nodeData = await graphInstance.database.getNodeByKey({ key: nodeKey });
  } else if (nodeID) {
    nodeData = await graphInstance.database.getNodeByID({ id: nodeID });
  } else {
    throw new Error('• node identifier or object must be passed in.');
  }


  if (nodeData.labels.includes(_graphSchemeReference.nodeLabel.subgraphTemplate)) {
    let parameter = await graphInstance.laodSubgraphTemplateParameter({ node: nodeData });
    if (!parameter)
    return;

    ['nodeInstance', 'nodeKey', 'nodeID'].forEach(property => delete argumentsList[0][property]);
    argumentsList[0].implementationKey = argumentsList[0].implementationKey ? Object.assign(parameter.traversalConfiguration, argumentsList[0].implementationKey) : parameter.traversalConfiguration;
    argumentsList[0].additionalChildNode = argumentsList[0].additionalChildNode ? [...argumentsList[0].additionalChildNode, ...parameter.additionalChildNode] : parameter.additionalChildNode;
    Object.assign(argumentsList[0], { nodeInstance: parameter.rootNode });
  } else {
    argumentsList[0].nodeInstance = nodeData;
  }
  return Reflect.apply(target, thisArg, argumentsList);
}), _dec2 =
(0, _proxifyMethodDecorator.proxifyMethodDecorator)((target, thisArg, argumentsList, targetClass, methodName) => {

  argumentsList = (0, _mergeDefaultParameter.mergeDefaultParameter)({
    passedArg: argumentsList,
    defaultArg: [
    {
      traversalDepth: 0,
      path: null,
      graphInstance: thisArg,
      additionalChildNode: [],
      nodeType: 'Stage' },

    { parentTraversalArg: null }] });


  return Reflect.apply(target, thisArg, argumentsList);
}), _dec3 =






(0, _proxifyMethodDecorator.proxifyMethodDecorator)((target, thisArg, argumentsList, targetClass, methodName) => {var _processData$handlePr, _graphInstance$Contex, _targetObject, _parameterImplementat, _contextImplementatio;







  let { nodeInstance, implementationKey: parameterImplementationKey = {}, graphInstance } = argumentsList[0],
  { parentTraversalArg } = argumentsList[1];



  let implementationKey = (_processData$handlePr =
  {
    processData: 'returnDataItemKey',
    handlePropagation: 'chronological',
    traverseNode: 'iterateFork',
    aggregator: 'AggregatorArray',
    traversalInterception: 'processThenTraverse' || 'traverseThenProcess',
    evaluatePosition: 'evaluateConditionReference' }, (0,
  _removeUndefinedFromObject.removeUndefinedFromObject)(_processData$handlePr));


  let contextImplementationKey = (graphInstance[_ContextClass.Context.reference.key.getter] ? (_graphInstance$Contex = graphInstance[_ContextClass.Context.reference.key.getter]()) === null || _graphInstance$Contex === void 0 ? void 0 : _graphInstance$Contex.implementationKey : {}) || {};

  let parentImplementationKey = parentTraversalArg ? parentTraversalArg[0].implementationKey || {} : {};

  _targetObject = implementationKey,

  Object.assign(_targetObject, parentImplementationKey, implementationKey, (_parameterImplementat = parameterImplementationKey, (0, _removeUndefinedFromObject.removeUndefinedFromObject)(_parameterImplementat)), (_contextImplementatio = contextImplementationKey, (0, _removeUndefinedFromObject.removeUndefinedFromObject)(_contextImplementatio)));
  argumentsList[0].implementationKey = implementationKey;


  let implementation = {
    dataProcess: graphInstance.traversal.processData[implementationKey.processData],
    handlePropagation: graphInstance.traversal.handlePropagation[implementationKey.handlePropagation],
    traverseNode: graphInstance.traversal.traverseNode[implementationKey.traverseNode],
    traversalInterception: graphInstance.traversal.traversalInterception[implementationKey.traversalInterception] || (({ targetFunction }) => new Proxy(targetFunction, {})),
    aggregator: graphInstance.traversal.aggregator[implementationKey.aggregator],
    evaluatePosition: graphInstance.traversal.evaluatePosition[implementationKey.evaluatePosition] };

  (0, _assert.default)(
  Object.entries(implementation).every(([key, value]) => Boolean(value)),
  '• All `implementation` concerete functions must be registered, the implementationKey provided doesn`t match any of the registered implementaions.');


  argumentsList = (0, _mergeDefaultParameter.mergeDefaultParameter)({
    passedArg: argumentsList,
    defaultArg: [
    {
      implementation }] });




  return Reflect.apply(target, thisArg, argumentsList);
}), (_obj = {
  async traverse(
  {
    graphInstance,
    nodeInstance,
    traversalIteratorFeed,
    traversalDepth,
    path,
    concreteTraversal,
    implementationKey,
    implementation,
    additionalChildNode,
    eventEmitter = new _events.default(),
    aggregator = new (implementation.aggregator.bind(nodeInstance))(),
    nodeType,
    evaluation } =


















  {},
  { parentTraversalArg } = {})
  {var _ref;
    evaluation || (evaluation = await graphInstance.evaluatePosition({ evaluation, node: nodeInstance, implementation: implementation.evaluatePosition.bind(nodeInstance) }));


    traversalIteratorFeed || (traversalIteratorFeed = graphInstance.traverseNode.call(graphInstance, {
      node: nodeInstance,
      implementation: implementation.traverseNode,
      handlePropagationImplementation: implementation.handlePropagation,
      additionalChildNode }));


    let dataProcessCallback = (nextProcessData) =>
    graphInstance.dataProcess.call(graphInstance, { node: nodeInstance, nextProcessData, evaluation, aggregator, implementation: implementation.dataProcess, graphInstance });

    let proxyify = target => implementation.traversalInterception.call(graphInstance, { targetFunction: target, aggregator, dataProcessCallback });
    let result = await (_ref = graphInstance.recursiveIteration.bind(graphInstance), proxyify(_ref))({
      traversalIteratorFeed,
      nodeInstance,
      traversalDepth,
      eventEmitter,
      evaluation,
      additionalChildNode,
      parentTraversalArg: arguments });


    return result;
  } }, ((0, _applyDecoratedDescriptor2.default)(_obj, "traverse", [_dec, _dec2, _dec3], Object.getOwnPropertyDescriptor(_obj, "traverse"), _obj)), _obj));exports.traverse = traverse;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,