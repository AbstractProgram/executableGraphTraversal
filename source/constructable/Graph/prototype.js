"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });var _exportNames = { load: true, print: true, count: true, traverse: true, traverseIterationRecursiveCallback: true, traverseGroupIterationRecursiveCall: true, traverserInstruction: true, databaseWrapper: true, schemeReference: true };exports.load = load;exports.print = print;exports.count = count;exports.traverseIterationRecursiveCallback = traverseIterationRecursiveCallback;exports.traverseGroupIterationRecursiveCall = traverseGroupIterationRecursiveCall;exports.schemeReference = exports.databaseWrapper = exports.traverserInstruction = exports.traverse = void 0;var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));var _assert = _interopRequireDefault(require("assert"));
var _proxifyMethodDecorator = require("../../utility/proxifyMethodDecorator.js");
var _removeUndefinedFromObject = require("../../utility/removeUndefinedFromObject.js");


var _TraverserClass = require("./Traverser.class.js");


var _stageNode = require("./method/stageNode.js");Object.keys(_stageNode).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _stageNode[key];} });});
var _rerouteNode = require("./method/rerouteNode.js");Object.keys(_rerouteNode).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _rerouteNode[key];} });});
var _forkEdge = require("./method/forkEdge.js");Object.keys(_forkEdge).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _forkEdge[key];} });});
var _executeEdge = require("./method/executeEdge.js");Object.keys(_executeEdge).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return _executeEdge[key];} });});var _traverserInstruction = _interopRequireWildcard(require("../../traverserInstruction"));exports.traverserInstruction = _traverserInstruction;var _databaseWrapper = _interopRequireWildcard(require("../../dataModel/concreteDatabaseWrapper.js"));exports.databaseWrapper = _databaseWrapper;var _schemeReference = _interopRequireWildcard(require("../../dataModel/graphSchemeReference.js"));exports.schemeReference = _schemeReference;var _dec, _obj;





async function load({ graphData } = {}) {

  (0, _assert.default)(graphData.node && graphData.edge, `• Graph data object must contain node & edge arrays.`);
  return await this.database.loadGraphData({ nodeEntryData: graphData.node, connectionEntryData: graphData.edge });
}

async function print({} = {}) {
  console.log(`______ Graph elements: ____________________`);
  let count = await this.count();
  let allNode = await this.database.getAllNode();
  let allEdge = await this.database.getAllEdge();
  console.log(`#Vertex = ${count.node}`);
  for (let node of allNode) {
    console.log(node.identity);
  }
  console.log(`\n#Edge = ${count.connection}`);
  for (let edge of allEdge) {
    console.log(`${edge.start} --> ${edge.end}`);
  }
  console.log(`___________________________________________`);
}

async function count({} = {}) {

  return {
    node: await this.database.countNode(),
    connection: await this.database.countEdge() };

}






const { traverse } = (_dec =


(0, _proxifyMethodDecorator.proxifyMethodDecorator)(async (target, thisArg, argumentsList, targetClass, methodName) => {var _argumentsList$;

  let { nodeInstance, nodeKey, nodeID, traverser } = argumentsList[0];
  if (!nodeInstance) {
    if (nodeKey) nodeInstance = await thisArg.database.getNodeByKey({ key: nodeKey });else

      if (nodeID) nodeInstance = await thisArg.database.getNodeByID({ id: nodeID });else

        if (traverser) nodeInstance = traverser.node;else

          throw new Error('• node identifier or object must be passed in.');
    ['nodeKey', 'nodeID'].forEach(property => delete argumentsList[0][property]);
  }

  nodeInstance.entrypointNodeType = _TraverserClass.Traverser.getEntrypointNodeType({ node: nodeInstance });

  (_argumentsList$ = argumentsList[0]).nodeInstance || (_argumentsList$.nodeInstance = nodeInstance);
  return Reflect.apply(target, thisArg, argumentsList);
}), (_obj = {
  async traverse(
  {
    nodeInstance,
    implementationKey,
    evaluation,
    additionalChildNode,

    traverser,


    traversalSequenceState },

  { parentTraverser, traverseCallContext } = {})
  {
    traversalSequenceState || (traversalSequenceState = {});

    {

      traverser || (traverser = new _TraverserClass.Traverser({
        graph: this,
        node: nodeInstance,
        parentTraverser }));


      if (implementationKey) {var _implementationKey;
        traverser.setImplementationHierarchy('parameter', (_implementationKey = implementationKey, (0, _removeUndefinedFromObject.removeUndefinedFromObject)(_implementationKey)));



      }


      if (evaluation) {
        traverser.setEvaluationHierarchy('parameter', evaluation);

        delete arguments[0].evaluation;
      }


      let { implementationConfiguration, evaluationConfiguration } = await this.traverserInstruction.configurationEvaluation.resolveEvaluationConfiguration({ targetNode: traverser.node, graph: this });
      traverser.setImplementationHierarchy('configuration', implementationConfiguration);
      traverser.setEvaluationHierarchy('configuration', evaluationConfiguration);


      traverser.initialize();
    }

    let implementation = traverser.getEntrypointNodeImplementation();
    return await implementation.call(this, { traverser, additionalChildNode }, { traverseCallContext });
  } }, ((0, _applyDecoratedDescriptor2.default)(_obj, "traverse", [_dec], Object.getOwnPropertyDescriptor(_obj, "traverse"), _obj)), _obj));exports.traverse = traverse;





async function traverseIterationRecursiveCallback({ traversalIterator, additionalChildNode, traverser, traverseCallContext }) {

  let nextYielded = await traversalIterator.next({ eventEmitterCallback: (...args) => traverser.eventEmitter.emit('nodeTraversalCompleted', ...args) });
  while (!nextYielded.done)

  nextYielded = await traversalIterator.next({
    traversalPromise: this.traverse.call(this, { nodeInstance: nextYielded.value.node, additionalChildNode }, { parentTraverser: traverser, traverseCallContext }) });

  return nextYielded.value;
}







async function* traverseGroupIterationRecursiveCall({
  groupIterator,
  additionalChildNode,
  traverseCallContext,






  traverser,
  processDataCallback })
{


  for await (let { group } of groupIterator)
  yield {
    group: {
      result: await this.traverseIterationRecursiveCallback.call(this, {
        traversalIterator: group.traversalIterator,
        additionalChildNode,
        traverser,
        traverseCallContext }),

      config: {
        portNode: group.config.forkEdge.destination } } };



}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,